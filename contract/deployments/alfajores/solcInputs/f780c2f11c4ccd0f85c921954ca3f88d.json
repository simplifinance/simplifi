{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/abstracts/AbstractFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\n// import \"hardhat/console.sol\";\r\nimport { FactoryLib, Data } from \"../libraries/FactoryLib.sol\";\r\nimport { Pausable, IOwnerShip } from \"./Pausable.sol\";\r\nimport { IFactory } from \"../apis/IFactory.sol\";\r\nimport { IERC20 } from \"../apis/IERC20.sol\";\r\nimport { IDIAOracleV2 } from \"../apis/IDIAOracleV2.sol\";\r\nimport { IAssetClass } from \"../apis/IAssetClass.sol\";\r\n// import { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**@title Abstract Factory contract\r\n * Non deployable.\r\n*/\r\n\r\nabstract contract AbstractFactory is\r\n    IFactory,\r\n    Pausable\r\n{\r\n    using FactoryLib for Data;\r\n\r\n    // Storage of type FactoryLib.Data\r\n    Data private data;\r\n\r\n    // Frontend analytics\r\n    Analytics public analytics;\r\n\r\n    /**\r\n     * @dev Only supported assets are allowed.\r\n     * Note: Asset must be supported by the AssetClass contract.\r\n     * @param _asset : Input asset contract address\r\n     */\r\n    modifier onlySupportedAsset(address _asset) {\r\n        if (!IAssetClass(data.pData.assetAdmin).isSupportedAsset(_asset)) {\r\n            revert IAssetClass.UnSupportedAsset(_asset);\r\n        }\r\n        _;\r\n    }\r\n\r\n    // ///@dev Unit contribution must have been initialized before they can be interacted with.\r\n    // modifier onlyInitialized(uint256 unit,bool secondCheck) {\r\n    //     data._isInitialized(unit, secondCheck);\r\n    //     _;\r\n    // }\r\n\r\n    ///@dev Unit contribution must not be less than the minimum contribution.\r\n    // modifier isMinimumContribution(uint256 unit) {\r\n    //     if(unit < minContribution) revert AmountLowerThanMinimumContribution();\r\n    //     _;\r\n    // }\r\n    \r\n    /**\r\n     * See _setUp() for doc\r\n     */\r\n    constructor(\r\n        uint16 serviceRate,\r\n        address feeTo,\r\n        IAssetClass assetClass,\r\n        address strategyManager,\r\n        IOwnerShip _ownershipManager,\r\n        address _diaOracleAddress,\r\n        IERC20 colToken\r\n    ) Pausable(_ownershipManager) {\r\n        _setUp(\r\n            serviceRate, \r\n            feeTo, \r\n            assetClass, \r\n            strategyManager,\r\n            colToken\r\n        );\r\n        diaOracleAddress = _diaOracleAddress;\r\n    }\r\n\r\n    ///@dev Fallback\r\n    receive() external payable {\r\n        if(msg.value > 15e14 wei) {\r\n            (bool success,) = data.pData.feeTo.call{value:msg.value}('');\r\n            if(!success) revert ();\r\n        }\r\n    }\r\n\r\n    /** @dev See _setUp() for doc.\r\n     */\r\n    function performSetUp(\r\n        uint16 serviceRate,\r\n        address feeTo,\r\n        IAssetClass assetClass,\r\n        address strategyManager,\r\n        IERC20 colToken\r\n    ) public onlyOwner {\r\n        _setUp(\r\n            serviceRate, \r\n            feeTo, \r\n            assetClass, \r\n            strategyManager,\r\n            colToken\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Can be used to initialize and reinitialized state variables.\r\n     * @notice Only address with owner role can call. Check Ownable.sol to see \r\n     * how we manage ownership (different from OZ pattern). \r\n     * @param serviceRate : Platform fee\r\n     * @param feeTo : Fee recipient.\r\n     * @param assetAdmin : Asset manager contract.\r\n     * @param bankFactory : Strategy manager contract.\r\n     * @param colToken : Collateral asset.\r\n     */\r\n    function _setUp(\r\n        uint16 serviceRate,\r\n        address feeTo,\r\n        IAssetClass assetAdmin,\r\n        address bankFactory,\r\n        IERC20 colToken\r\n    ) private {\r\n        data.setContractData(assetAdmin, feeTo, serviceRate, bankFactory, colToken);\r\n    }\r\n\r\n    /**\r\n    @dev Launch a liquidity pool. Based on router, it could be permissioned or permissionless.\r\n      @param intRate : Rate of interest to charge on loans.\r\n      @param quorum: The Required number of contributors to form a band. \r\n      @param durationInHours: The maximum time limit (from when turn time begins) with which a contributor\r\n                            will take custody of the loan before repayment. Should be specified in hours.\r\n      @param colCoverage - Collateral factor - Collateral determinant for contributors to borrow.\r\n                            This is expressed as a multiplier index in the total loanable amount.\r\n      @param unitLiquidity - Unit contribution.\r\n      @param asset - Liquidity asset. This will often be an ERC20 compatible asset.\r\n      @param contributors : Array contributors addresses\r\n      @param router : We use this to determine which pool to launch. Router can either be permissioned\r\n                    or permissionless.\r\n        - asset must be supported by AssetClass.sol\r\n    */\r\n    function _createPool(\r\n        uint16 intRate,\r\n        uint8 quorum,\r\n        uint16 durationInHours,\r\n        uint24 colCoverage,\r\n        uint unitLiquidity,\r\n        address asset,\r\n        address[] memory contributors,\r\n        Router router\r\n    )\r\n        internal \r\n        whenNotPaused\r\n        onlySupportedAsset(asset)\r\n        returns (uint)\r\n    {\r\n        bool isPermissionless = router == Router.PERMISSIONLESS;\r\n        if(isPermissionless) {\r\n            if(quorum <= 1) revert MinimumParticipantIsTwo();\r\n        } else {\r\n            if(contributors.length <= 1) revert MinimumParticipantIsTwo();\r\n        }\r\n        CreatePoolParam memory cpp = CreatePoolParam(intRate, quorum, durationInHours, colCoverage, unitLiquidity, contributors, asset);\r\n        Analytics memory alt = analytics;\r\n        analytics = Analytics(\r\n            alt.tvlCollateral, \r\n            alt.tvlBase + unitLiquidity, \r\n            isPermissionless? alt.totalPermissioned : alt.totalPermissioned + 1,\r\n            isPermissionless? alt.totalPermissionless + 1 : alt.totalPermissionless\r\n        );\r\n        emit PoolCreated(\r\n            !isPermissionless ? data\r\n            .createPermissionedPool(cpp)\r\n                : data.createPermissionlessPool(cpp)\r\n        );\r\n        return unitLiquidity;\r\n    } \r\n\r\n    /** @dev Return current epoch. \r\n     * This is also total epoches generated to date \r\n    */\r\n    function getEpoches() \r\n        external \r\n        view \r\n        returns(uint)\r\n    {\r\n        return data.getEpoches();\r\n    }\r\n    \r\n    ///@dev Returns epoches\r\n    function getRecordEpoches() external view returns(uint) {\r\n        return data.getRecordEpoches();\r\n    }\r\n\r\n    /**@dev Add contributor.\r\n      @param unit : Contribution amount.\r\n      @param isPermissioned : Whether pool is permissioned or not\r\n   */\r\n    function _joinEpoch(\r\n        uint256 unit,\r\n        bool isPermissioned\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        unchecked {\r\n            analytics.tvlBase += unit;\r\n        }\r\n        emit NewContributorAdded(\r\n            data.addToPool(AddTobandParam(unit, isPermissioned))\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /** @dev Providers borrow from their pool provided the citeria are met.\r\n        @param unit : Epoh Id user wants to borrow from. \r\n        @notice Users can be members of multiple epoches. This enlarges the\r\n        volume of funds they can access. \r\n\r\n        - This is a payable function since borrowers are required to stake XFI\r\n        before they can access funds in epoches.\r\n        - The contract must be in a usable state i.e not paused.\r\n        - For the selected epoch, the getFinance() must already be unlocked. Unlocking \r\n        is automated soon as the required quorum for the epoch is achieved i.e the \r\n        numbers of providers equals the set quorum.\r\n        @param daysOfUseInHr : The time in hours the borrower wishes to retain the loan\r\n        before paying back.\r\n  */\r\n    function getFinance(\r\n        uint256 unit,\r\n        uint8 daysOfUseInHr\r\n    )\r\n        external\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        (Pool memory _p, uint256 amtFinanced, uint colDeposited) = data.getFinance(unit, daysOfUseInHr, _getCollateralTokenPrice);\r\n        Analytics memory analy = analytics;\r\n        unchecked {\r\n            analy.tvlCollateral += colDeposited;\r\n            if(analy.tvlBase >= amtFinanced) analy.tvlBase -= amtFinanced;\r\n        }\r\n        analytics = analy;\r\n        emit GetFinanced(_p);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Return borrowed fund.\r\n      @param unit : Contribution\r\n     See FactoryLib.payback().\r\n   */\r\n    function payback(uint256 unit)\r\n        external\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        (uint amtPayBackInUSD, uint colWithdrawn, Pool memory _p) = data.payback(PaybackParam(unit, _msgSender()));\r\n        Analytics memory atl = analytics;\r\n        unchecked {\r\n            atl.tvlBase += amtPayBackInUSD;\r\n            if(atl.tvlCollateral >= colWithdrawn) atl.tvlCollateral -= colWithdrawn;\r\n        }\r\n        analytics = atl;\r\n        emit Payback(_p);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n  @dev Liquidate defaulter.\r\n    Note: The expected repayment time for last paid contributor must have passed.\r\n    See FactoryLib.liquidate() for more details.\r\n    @param unit : Epoch Id\r\n  */\r\n    function liquidate(uint256 unit) \r\n        external \r\n        whenNotPaused \r\n        returns (bool) \r\n    {\r\n        (uint amtPayBackInUSD, uint colWithdrawn, Pool memory _p) = data.liquidate(unit);\r\n        emit Payback(_p);\r\n        Analytics memory atl = analytics;\r\n        unchecked {\r\n            atl.tvlBase += amtPayBackInUSD;\r\n            if(atl.tvlCollateral >= colWithdrawn) atl.tvlCollateral -= colWithdrawn;\r\n        }\r\n        analytics = atl;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See FactoryLib.enquireLiquidation\r\n     */\r\n    function enquireLiquidation(uint256 unit) \r\n        external\r\n        view \r\n        // onlyInitialized(unit, true)\r\n        returns (Contributor memory, bool, uint, Slot memory, address)\r\n    {\r\n        return data._enquireLiquidation(unit);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns collaterl quote for the epoch.\r\n     * @param unit : EpochId\r\n     * @return collateral Collateral\r\n     * @return colCoverage Collateral coverage\r\n     */\r\n    function getCollaterlQuote(\r\n        uint256 unit\r\n    )\r\n        external\r\n        view\r\n        // onlyInitialized(unit, true)\r\n        returns(uint collateral, uint24 colCoverage)\r\n    {\r\n        Pool memory _p = data._getCurrentPool(unit).data;\r\n        unchecked {\r\n            (collateral, colCoverage) = (FactoryLib._computeCollateral(\r\n                _p.bigInt.unit * _p.lInt.quorum,\r\n                uint24(_p.lInt.colCoverage),\r\n                _getCollateralTokenPrice(),\r\n                diaOracleAddress == address(0)? 18 : 8\r\n            ), uint24(_p.lInt.colCoverage));\r\n        }\r\n        return (collateral, colCoverage);\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the current debt of target user.\r\n     * @param unit : Epoch Id\r\n     * @param target : Target user.\r\n     */\r\n    function getCurrentDebt(\r\n        uint256 unit,\r\n        address target\r\n    ) \r\n        external\r\n        view \r\n        // onlyInitialized(unit, true)\r\n        returns (uint256) \r\n    {\r\n        return data._getCurrentDebt(unit, target).debt;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the profile of user\r\n     * @param unit : unit contribution\r\n     * @param user : User\r\n     */\r\n    function getProfile(\r\n        uint256 unit,\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        // onlyInitialized(unit, false)\r\n        returns(Contributor memory) \r\n    {\r\n        return data.getProfile(user, unit);\r\n    }\r\n\r\n    /**\r\n     * @dev Set state variables.\r\n     * @param feeTo : Fee receiver.\r\n     * @param assetAdmin : AssetAdmin contract.\r\n     * @param makerRate : fee in %.\r\n     * - Only-owner function.\r\n     */\r\n    function setContractData(\r\n        IAssetClass assetAdmin,\r\n        address feeTo,\r\n        uint16 makerRate,\r\n        address safeFactory,\r\n        IERC20 colToken\r\n    ) \r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        return data.setContractData(assetAdmin, feeTo, makerRate, safeFactory, colToken);\r\n    }\r\n\r\n    function setOracleAddress(address newOracleAddr) public onlyOwner {\r\n        if(newOracleAddr == address(0)) revert OracleAddressIsZero();\r\n        diaOracleAddress = newOracleAddr;\r\n    }\r\n\r\n    // function getStatus(uint256 unit) external view returns(string memory) {\r\n    //     return data._getCurrentPool(unit).data.status == Status.AVAILABLE? 'AVAILABLE' : 'TAKEN';\r\n    // }\r\n\r\n    /**\r\n     * @dev See FactoryLib._cancelBand()\r\n     */\r\n    function _removeLiquidityPool(\r\n        uint256 unit,\r\n        bool isPermissionLess\r\n    ) \r\n        internal\r\n        whenNotPaused \r\n        // onlyInitialized(unit, true)\r\n        returns (bool)\r\n    {\r\n        uint256 tvlBase = analytics.tvlBase;\r\n        unchecked {\r\n            if(tvlBase >= unit) analytics.tvlBase = tvlBase - unit; \r\n        }\r\n        data.removeLiquidity(unit, isPermissionLess);\r\n        emit Cancellation(unit);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a single pool for 'unit'\r\n     * @param unitId : Contribution Id.\r\n     */\r\n    function getPoolData(\r\n        uint unitId\r\n    ) \r\n        external \r\n        view \r\n        returns(ReadDataReturnValue memory) \r\n    {\r\n        return data.getData(unitId);\r\n    }\r\n\r\n    /// @dev Return past pools using unitId. @notice The correct unitId must be parsed.\r\n    function getRecord(uint rId) external view returns(ReadDataReturnValue memory) {\r\n        return data.getRecord(rId);\r\n    }\r\n\r\n    function getPoint(address user) external view returns(Point memory point) {\r\n        point = data.getPoints(user);\r\n        return point;\r\n    }\r\n\r\n    function getSlot(address user, uint256 unit) \r\n        external \r\n        view \r\n        // onlyInitialized(unit, false)\r\n        returns(Slot memory) \r\n    {\r\n        return data.getSlot(user, unit);\r\n    }\r\n\r\n    function getFactoryData()\r\n        public\r\n        view\r\n        returns(ViewFactoryData memory)\r\n    {\r\n        return ViewFactoryData(analytics, data.pData, data.getEpoches(), data.getRecordEpoches());\r\n    }\r\n    \r\n    /**\r\n     * @dev Get price of XFI in USD.\r\n     * @notice from price oracle\r\n     */\r\n    function _getCollateralTokenPrice() \r\n        internal \r\n        view \r\n        returns (uint128 _price) \r\n    {\r\n        if(diaOracleAddress != address(0)) {\r\n            (uint128 price,) = IDIAOracleV2(diaOracleAddress).getValue('XFI/USD');\r\n            _price = price;\r\n        } else {\r\n            _price = 10000000000000000000;\r\n        }\r\n    }\r\n\r\n    address public diaOracleAddress;\r\n}"
    },
    "contracts/abstracts/OnlyOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { MsgSender } from \"../implementations/OwnerShip.sol\";\r\nimport { IOwnerShip } from \"../apis/IOwnerShip.sol\";\r\n\r\nabstract contract OnlyOwner is MsgSender {\r\n    error ManagerAddressIsZero();\r\n    error NotPermittedToCall();\r\n\r\n    IOwnerShip public ownershipManager;\r\n\r\n    constructor(IOwnerShip _ownershipManager)\r\n    {\r\n        _setOwnershipManager(_ownershipManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Caller must have owner role before execeution can proceed.\r\n     * The 'errorMessage' argument can be used to return error specific to \r\n     * a context e.g function call. \r\n     */\r\n    modifier onlyOwner {\r\n        IOwnerShip mgr = ownershipManager;\r\n        if(address(mgr) == address(0)) revert ManagerAddressIsZero();\r\n        if(!IOwnerShip(mgr).isOwner(_msgSender())) revert NotPermittedToCall();\r\n        _;\r\n    }\r\n\r\n    function _setOwnershipManager(\r\n        IOwnerShip newManager\r\n    )\r\n        private\r\n    {\r\n        ownershipManager = newManager;\r\n    }\r\n\r\n    /**\r\n     * Set Ownership manager\r\n     * @param newManager : New manager address\r\n     */\r\n    function setOwnershipManager(\r\n        address newManager\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        _setOwnershipManager(IOwnerShip(newManager));\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/abstracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner, IOwnerShip } from \"./OnlyOwner.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n * \r\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\r\n * Thanks to the OZ team.\r\n */\r\nabstract contract Pausable is OnlyOwner {\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is paused.\r\n     */\r\n    error EnforcedPause();\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is not paused.\r\n     */\r\n    error ExpectedPause();\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor(\r\n        IOwnerShip _ownershipManager\r\n    ) OnlyOwner(_ownershipManager) {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     * Only owner role can call.\r\n     * - The contract must not be paused.\r\n     */\r\n    function pause() \r\n        public \r\n        onlyOwner\r\n        whenNotPaused \r\n    {\r\n        _paused = true; \r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     * - Only owner role can call.\r\n     * - The contract must be paused.\r\n     */\r\n    function unpause() \r\n        public \r\n        onlyOwner \r\n        whenPaused \r\n    {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/apis/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\nimport { Counters } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\";\r\nimport { IERC20 } from \"./IERC20.sol\";\r\n\r\ninterface Common {\r\n  /**\r\n   * @dev Tags/Placeholders for functions available in the implementation contract.\r\n   */\r\n\r\n  enum Stage {\r\n    JOIN, \r\n    GET, \r\n    PAYBACK, \r\n    WITHDRAW,\r\n    CANCELED,\r\n    ENDED\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////// V3\r\n  // enum Status { AVAILABLE, TAKEN }\r\n\r\n  enum Router { PERMISSIONLESS, PERMISSIONED }\r\n\r\n  struct Pool {\r\n    LInt lInt;\r\n    BigInt bigInt;\r\n    Addresses addrs;\r\n    Router router;\r\n    Stage stage;\r\n    Interest interest;\r\n\r\n  }\r\n    // Status status;\r\n\r\n  struct Point {\r\n    uint contributor;\r\n    uint creator; \r\n  }\r\n\r\n  /** \r\n   *  @param isMember : Whether user is a member or not\r\n   *  @param turnStartTime: Time when the contributor's turn start to count.\r\n   *  @param getFinanceTime: Date when loan was disbursed\r\n   *  @param paybackTime: Date which the borrowed fund must be retured\r\n   *  @param loan: Total debts owed by the last fund recipient.\r\n   *  @param colBals: Collateral balances of the last recipient.\r\n   *  @param sentQuota : Whether an user/current msg.sender has received or not.\r\n   *  @param id : Address of the last recipient.    \r\n  */\r\n  struct Contributor {\r\n    uint durOfChoice;\r\n    uint paybackTime;\r\n    uint turnStartTime;\r\n    uint getFinanceTime;\r\n    uint loan;\r\n    uint colBals;\r\n    address id;\r\n    bool sentQuota;\r\n    uint interestPaid;\r\n  }\r\n\r\n  // struct Rank {\r\n  //   bool admin;\r\n  //   bool member;\r\n  // }\r\n\r\n  \r\n  struct UpdateMemberDataParam {\r\n    uint24 durOfChoice;\r\n    address expected;\r\n    uint256 unit;\r\n    uint uId;\r\n    uint fee;\r\n    uint128 colPriceInDecimals;\r\n    Pool pool;\r\n  }\r\n\r\n  struct AddTobandParam {\r\n    uint unit;\r\n    bool isPermissioned;\r\n  }\r\n\r\n  struct GetPoolResult {\r\n    Pool data;\r\n    uint uId;\r\n  }\r\n\r\n  struct PaybackParam {\r\n    uint unit;\r\n    address user;\r\n  }\r\n\r\n  /**\r\n    @dev Structured data types to convey parameters to avoid Stack too deep error.\r\n    @param quorum : The maximum number of users that can form a contribution group.\r\n    @param duration : The number of days the contribution contract will expires. It should be \r\n                      specified in hour.\r\n    @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \r\n                  in order to be able to get financed. This should be specified in percentage i.e \r\n                  if raw ccr is 1.2 , actual ccr should be 1.2 * 100 = 120. It is pertinent to be\r\n                  mindful how this works in our protocol. Even if ccr is 1 indicating that contributor\r\n                  must hold at least 100% of collateral in their wallet before they can GF, it must \r\n                  be rendered in input section as 1 * 100. 100 is the minimum admins of bands\r\n                  can give as collateral coverage ratio.\r\n    @param value : The total value of pooled fund.\r\n    @param members : List of members in a group.\r\n    @param intRate : The rate of interest to charge for the duration of use of the fund.\r\n    @param asset : The contract address of an approved assets in this group. \r\n                    @notice The pooled asset of this group is denominated in this currency. \r\n  */\r\n  struct CreatePoolParam {\r\n    uint16 intRate;\r\n    uint8 quorum;\r\n    uint16 duration;\r\n    uint24 colCoverage; \r\n    uint unit;\r\n    address[] members;\r\n    address asset;\r\n  }\r\n\r\n  /**\r\n   *  @notice Structured types - uint256\r\n   *  @param unit : Unit contribution.\r\n   *  @param currentPool : Total contributed to date.\r\n   */\r\n  struct BigInt {\r\n    uint256 unit;\r\n    uint256 currentPool;\r\n    uint256 recordId;\r\n  }\r\n\r\n  /**\r\n   *  @notice Structured types - unit less than uint124\r\n   *  @param intRate : Rate of interest per duration. \r\n   *  @param quorum : The maximum number of users that can form a contribution group.\r\n   *  @param selector : This is like the hand or ticker of a clock that is used to select\r\n   *                    the next contributor to get finance.\r\n   *  @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \r\n                  in order to be able to get financed.\r\n      @param duration : The number of days the contribution contract will expires.\r\n      @param cSlot : Slot ref No where the contributors are stored.\r\n      @param allGh : Indicator showing whether all th members have been financed or not.\r\n      @param userCount : Indicating the current number of contributors.\r\n   */\r\n  struct LInt {\r\n    uint quorum;\r\n    uint selector;\r\n    uint colCoverage;\r\n    uint duration;\r\n    uint intRate;\r\n    uint cSlot;\r\n    uint allGh;\r\n    uint userCount;\r\n  }\r\n\r\n  /**\r\n   * @notice Structured types - Address\r\n   * @param asset : Contract address of the asset in use.\r\n   * @param lastPaid: Last contributor who got finance.\r\n   * @param bank : Strategy for each pool or epoch. See Strategy.sol for more details.\r\n   * @param admin : Pool creator.\r\n   * \r\n   */\r\n  struct Addresses {\r\n    address asset;\r\n    address lastPaid;\r\n    address bank;\r\n    address admin;\r\n  }\r\n  \r\n  struct ReturnValue {\r\n    Pool pool;\r\n    uint uId;\r\n    uint rId;\r\n  }\r\n\r\n  struct CreatePoolReturnValue {\r\n    Pool pool;\r\n    Contributor cData; \r\n  }\r\n\r\n  struct Interest {\r\n    uint fullInterest;\r\n    uint intPerSec;\r\n    uint intPerChoiceOfDur;\r\n  }\r\n\r\n  struct CommonEventData {\r\n    Pool pool;\r\n    uint debtBal;\r\n    uint colBal;\r\n  }\r\n\r\n  // struct Contributor {\r\n  //   Contributor cData;\r\n  //   // Rank rank;\r\n  //   // uint8 slot;\r\n  // }\r\n\r\n  struct Balances {\r\n    uint collateral;\r\n    uint assetBase;\r\n  }\r\n\r\n  struct DebtReturnValue {\r\n    uint debt;\r\n    uint pos;\r\n  }\r\n\r\n  struct SwapProfileArg {\r\n    Slot expSlot;\r\n    address expCaller;\r\n    address actCaller;\r\n    uint unit;\r\n    uint cSlot;\r\n    Contributor expcData;\r\n  }\r\n\r\n  struct Slot {\r\n    uint value;\r\n    bool isMember;\r\n    bool isAdmin;\r\n  }\r\n\r\n  struct UpdateUserParam {\r\n    Contributor cData;\r\n    Slot slot;\r\n    uint cSlot;\r\n    uint256 unit;\r\n    address user;\r\n  }\r\n\r\n  struct Price {\r\n    uint128 price;\r\n    uint8 decimals;\r\n  }\r\n\r\n  struct ReadDataReturnValue {\r\n    Pool pool;\r\n    Contributor[] cData;\r\n  }\r\n\r\n  struct Payback_Bank {\r\n    address user; \r\n    address asset; \r\n    uint256 debt;\r\n    uint256 attestedInitialBal;\r\n    bool allGF; \r\n    Contributor[] cData;\r\n    bool isSwapped;\r\n    address defaulted;\r\n    uint rId;\r\n    IERC20 collateralToken;\r\n  }\r\n\r\n  error CollateralCoverageCannotGoBelow_100(uint24 ccr);\r\n  error InsufficientAllowance();\r\n  error TransferFailed();\r\n  error UnitIsTaken();\r\n  error SafeAddupFailed();\r\n  error CurrentReceiverIsNotADefaulter();\r\n  error CancellationNotAllowed();\r\n  error TurnTimeHasNotPassed();\r\n  error OnlyAdminIsAllowed();\r\n  error PoolNotComplete();\r\n  error PoolIsFilled();\r\n  error NoDebtFound();\r\n  error NotAMember();\r\n  error UserDoesNotHaveAccess();\r\n\r\n  // struct ViewFactoryData {\r\n  //   Analytics analytics;\r\n  //   uint currentEpoches;\r\n  //   uint recordEpoches;\r\n  //   uint makerRate;\r\n  //   uint totalSafe;\r\n  //   IERC20[] baseAssets; \r\n  // }\r\n\r\n}"
    },
    "contracts/apis/IAssetClass.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\ninterface IAssetClass {\r\n  error UnSupportedAsset(address);\r\n  error Locked();\r\n  \r\n  function isSupportedAsset(\r\n    address _asset\r\n  ) \r\n    external \r\n    view returns(bool);\r\n}"
    },
    "contracts/apis/IBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Common } from \"./Common.sol\";\r\nimport { IERC20 } from \"./IERC20.sol\";\r\n\r\ninterface IBank {\r\n  error AssetTransferFailed();\r\n  \r\n  function addUp(address user, uint rId) external returns(bool);\r\n  function getFinance(\r\n    address user, \r\n    address asset, \r\n    uint256 loan, \r\n    uint fee, \r\n    uint256 calculatedCol,\r\n    uint rId\r\n  ) \r\n    external \r\n    returns(uint);\r\n\r\n  function payback(Common.Payback_Bank memory) external returns(bool);\r\n  function cancel(address user, address asset, uint unit, uint rId) external returns(bool);\r\n  function getData() external view returns(ViewData memory);\r\n\r\n  struct ViewData {\r\n    uint totalClients;\r\n    uint aggregateFee;\r\n  }\r\n\r\n  struct ViewUserData {\r\n    bool access;\r\n    uint collateralBalance;\r\n  }\r\n}"
    },
    "contracts/apis/IBankFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @title Interface of the Bank manager\r\n * @author : Simplifinance\r\n */\r\ninterface IBankFactory {\r\n  error ZeroAddress(address);\r\n  \r\n  /**\r\n   * Query bank for user\r\n   * @param unit : Address to get bank for\r\n   * @return A bank if none was found, it returns address(0).\r\n   */\r\n  function getBank(uint256 unit) external view returns(address);\r\n  // function getBank(address user) external view returns(address);\r\n\r\n/**\r\n * Clones and return a new bank \r\n * @param unit : Target address for whom to create bank\r\n */\r\n  function createBank(uint256 unit) external returns(address bank);\r\n\r\n  /**\r\n   * Bank struct map\r\n   * key: user address { EOA }\r\n   * value: Bank { Contract } \r\n   */\r\n  struct BankData {\r\n    address key;\r\n    address value;\r\n  }\r\n\r\n}"
    },
    "contracts/apis/IDIAOracleV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\ninterface IDIAOracleV2 {\r\n    function getValue(string memory key) \r\n        external \r\n        view \r\n        returns(uint128 price, uint128 timestamp);\r\n}"
    },
    "contracts/apis/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport \"./IERC20Metadata.sol\";\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 is IERC20Metadata{\r\n    error NotCallable();\r\n    error AddressIsZero(address);\r\n    error NoPreviousLockDetected();\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    /** \r\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event for each transfer.\r\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \r\n                RELATIVE TO THE ACCOUNTS ARRAY\r\n     */\r\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    /**@dev Locks specific amount of JFT to the private ledger.\r\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\r\n        param: amount - Amount to lock.\r\n    */\r\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\r\n\r\n    /**@dev Moves an 'amount' from private ledger to regular balances.\r\n        @param amount - Amount to unlock.\r\n        Note: If the lock duration was set, holder will not be able to unlock until the \r\n            set time has passed else they can withdraw to regular balance anytime.\r\n     */\r\n    function unlockToken(uint amount) external returns(bool);\r\n\r\n    /** @dev Returns seperate balances of @param who\r\n        return value will be in struct format having two values\r\n     */\r\n    function accountBalances(address who) external view returns(Balances memory);\r\n   \r\n    // /**@dev Return JFT's Metadata including the information of `who`\r\n    //  */\r\n    // function getInfo(address who) external view returns(Protected memory);\r\n\r\n    /**\r\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\r\n     * It should only be called when JFT holder has lost access to their account and they had \r\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\r\n     * provided at the time the lock was activated.\r\n     * \r\n     * Note: Attorney charges a fee for doing this. \r\n     * @param account : Account that owns this token.\r\n     */\r\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\r\n\r\n    /**\r\n     * @dev Same as lockToken except that this function is called by the Factory contract to \r\n     * lock collateral amount to user's wallet\r\n     * @param target : Account to lock to token to.\r\n     * @param _routeTo : Escape address.\r\n     * @param amount : Amount to lock\r\n     */\r\n    function lockSpecial(\r\n        address target, \r\n        address _routeTo, \r\n        uint256 amount\r\n    ) external returns(bool);\r\n\r\n    struct Protected {\r\n        uint256 value; // Total value currently locked\r\n        address escapeTo;\r\n    }\r\n\r\n    struct Balances {\r\n        uint256 spendable;\r\n        Protected locked;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        uint8 decimals;\r\n        uint256 totalSupply;\r\n        string name;\r\n        string symbol;\r\n        address attorney;\r\n        // address rewarder;\r\n    }\r\n}\r\n"
    },
    "contracts/apis/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/apis/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Common } from \"./Common.sol\";\r\nimport { IAssetClass } from \"./IAssetClass.sol\";\r\nimport { IERC20 } from \"./IERC20.sol\";\r\n\r\ninterface IFactory is Common {\r\n  error InsufficientFund();\r\n  error AllMemberIsPaid();\r\n  error QuorumIsInvalid();\r\n  error OracleAddressIsZero();\r\n  error OwnershipManagerIsNotSet();\r\n  error MinimumParticipantIsTwo();\r\n  error AmountLowerThanMinimumContribution();\r\n\r\n  event PoolCreated(Pool);\r\n  event NewContributorAdded(Pool);\r\n  event GetFinanced(Pool);\r\n  event Payback(Pool);\r\n  event Liquidated(Pool);\r\n  event Cancellation(uint epochId);\r\n\r\n  // event RoundUp(uint, Pool);\r\n  // event Rekeyed(address indexed, address indexed);\r\n  \r\n  function getEpoches() external view returns(uint);\r\n  function createPermissionlessPool(\r\n    uint16 intRate,\r\n    uint8 quorum,\r\n    uint16 durationInHours,\r\n    uint24 colCoverage,\r\n    uint unitLiquidity,\r\n    address liquidAsset\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function createPermissionedPool(\r\n    uint16 intRate,\r\n    uint16 durationInHours,\r\n    uint24 colCoverage,\r\n    uint unitLiquidity,\r\n    address liquidAsset,\r\n    address[] memory contributors\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function payback(uint256 unit) external returns(bool);\r\n  function joinAPool(uint256 unit) external returns(bool);\r\n  function liquidate(uint256 unit) external returns(bool);\r\n  function removeLiquidityPool(uint256 unit) external returns(bool);\r\n  function getFinance(uint256 unit, uint8 daysOfUseInHr) external returns(bool);\r\n  function getPoolData(uint256 unitId) external view returns(ReadDataReturnValue memory);\r\n  function getRecord(uint256 rId) external view returns(ReadDataReturnValue memory);\r\n  function enquireLiquidation(uint256 unit)external view returns(Contributor memory _liq, bool defaulted, uint currentDebt, Slot memory slot, address); \r\n  function getCurrentDebt( uint256 unit, address target) external view returns(uint debtToDate); \r\n  function getProfile(uint256 unit, address user) external view returns(Contributor memory);\r\n  function getPoint(address user) external view returns(Point memory);\r\n  function getRecordEpoches() external view returns(uint);\r\n  function getSlot(address user, uint256 unit) external view returns(Slot memory);\r\n  \r\n  /**\r\n   * @notice sendFee: will be used as flag to auto-withdraw fee from each strategy. If sendFee is true, \r\n   * when a round is completed, the fee balances in a strategy will be forwarded to 'feeReceiver'.\r\n   */\r\n  struct ContractData {\r\n    address feeTo;\r\n    IAssetClass assetAdmin;\r\n    uint16 makerRate;\r\n    address bankFactory;\r\n    address safeFactory;\r\n    IERC20 collateralToken;\r\n  }\r\n\r\n  struct Analytics {\r\n    uint256 tvlCollateral;\r\n    uint256 tvlBase;\r\n    uint totalPermissioned;\r\n    uint totalPermissionless;\r\n  }\r\n\r\n  struct ViewFactoryData {\r\n    Analytics analytics;\r\n    ContractData contractData;\r\n    uint currentEpoches;\r\n    uint recordEpoches;\r\n  }\r\n}"
    },
    "contracts/apis/IOwnerShip.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @title IOwnerShip \r\n * Interface of the OwnerShip contract\r\n * @author Simplifi (Bobeu)\r\n */\r\ninterface IOwnerShip {\r\n    function setPermission(\r\n        address[] memory newOwners\r\n    ) \r\n        external\r\n        returns(bool);\r\n\r\n    function removeOwner(\r\n        address target\r\n    ) \r\n        external\r\n        returns(bool);\r\n\r\n    function renounceOwnerShip() \r\n        external\r\n        returns(bool);\r\n\r\n    function getOwner(\r\n        uint ownerId\r\n    ) \r\n        external \r\n        view \r\n        returns(address);\r\n\r\n    function isOwner(\r\n        address target\r\n    )\r\n        external\r\n        view \r\n        returns(bool);\r\n}"
    },
    "contracts/implementations/AssetClass.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner, IOwnerShip } from \"../abstracts/OnlyOwner.sol\";\r\nimport { IAssetClass } from \"../apis/IAssetClass.sol\"; \r\n\r\ncontract AssetClass is IAssetClass, OnlyOwner {\r\n  address[] private assets;\r\n\r\n  /**\r\n   * @dev Mapping assets address to bool i.e Assets must be contract account\r\n   * and must be supported\r\n   */\r\n  mapping(address => bool) private supportedAssets;\r\n\r\n  mapping(address => bool) public listed;\r\n\r\n  /**\r\n   * @dev Asset must be supported before they can be used.\r\n   */\r\n  modifier onlySupportedAsset(address _asset) {\r\n    if(!supportedAssets[_asset]) revert UnSupportedAsset(_asset);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Initialize state variables\r\n   * @param _asset : Initial supported asset\r\n   */\r\n  constructor(\r\n    address _asset,\r\n    IOwnerShip _ownershipMgr\r\n  ) \r\n    OnlyOwner(_ownershipMgr) \r\n  {\r\n    require(_asset != address(0), \"Asset cannot be empty\");\r\n    _supportAsset(_asset);\r\n  }\r\n\r\n  // fallback(bytes calldata data) external returns(bytes memory) {\r\n  //   return \"Function not found\";\r\n  // }\r\n\r\n  /**\r\n   * @dev Support a new asset\r\n   * Note: OnlyOwner action\r\n   * @param _asset : Asset to add to list of supported asset\r\n   */\r\n  function supportAsset(\r\n    address _asset\r\n  ) \r\n    public \r\n    onlyOwner\r\n  {\r\n    _supportAsset(_asset); \r\n  }\r\n\r\n  function _supportAsset(address _asset) private {\r\n    \r\n    if(!listed[_asset]){\r\n      listed[_asset] = true;\r\n      assets.push(_asset);\r\n    }\r\n    if(!_isAssetSupported(_asset)){\r\n      supportedAssets[_asset] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Unsupports an asset\r\n   * Note: Only-owner action\r\n   * @param newAsset : Removes an asset from the list of supported asset\r\n   */\r\n  function unsupportAsset(\r\n    address newAsset\r\n  ) \r\n    public \r\n    onlyOwner\r\n  {\r\n    supportedAssets[newAsset] = false;\r\n  }\r\n\r\n  function _isAssetSupported(address _asset) internal view returns(bool) {\r\n    return supportedAssets[_asset];\r\n  }\r\n\r\n  /**\r\n   * @dev Check if an asset is supported\r\n   */\r\n  function isSupportedAsset(address _asset) public override view returns(bool) {\r\n    return _isAssetSupported(_asset);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a list of supported assets\r\n   */\r\n  function getSupportedAssets() public view returns(address[] memory _assets) {\r\n    _assets = assets;\r\n    return _assets;\r\n  }\r\n\r\n}"
    },
    "contracts/implementations/Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { AbstractFactory, IERC20, IAssetClass, IOwnerShip } from \"../abstracts/AbstractFactory.sol\";\r\n\r\n/** @title Factory\r\n *  @author Simplifinance - Written by Isaac Jesse (https://github.com/bobeu) \r\n * A protocol for short-term lending and borrowing services through a peer-funding mechanism, with an auto-AI yield dashboard. This is a structure where liquidity providers are also the borrowers.\r\n * Two currencies are used:\r\n *        - Native currency/Platform/Base currency e.g Celo, XFI, ETH, etc. This is the currency used as collateral.\r\n *        - Stable coin e.g cUSD, xUSD, USDT etc. This is the base currency use for contribution.\r\n*/\r\n\r\ncontract Factory is AbstractFactory {\r\n    mapping(uint => Router) public routers;\r\n\r\n    /** @dev Initializes state variables.\r\n     * @param serviceRate : Platform fee in %\r\n     * @param feeTo : Account to receive fees.\r\n     * @param assetClass : Asset manager contract.\r\n     * @param bankFactory : BankFactory contract.\r\n     * @param ownerShipManager : Accessibility manager contract\r\n    */\r\n   \r\n    constructor(\r\n        uint16 serviceRate,\r\n        address feeTo,\r\n        IAssetClass assetClass,\r\n        address bankFactory,\r\n        IOwnerShip ownerShipManager,\r\n        address diaOracleAddress,\r\n        IERC20 colToken\r\n    )\r\n        AbstractFactory(\r\n            serviceRate,\r\n            feeTo,\r\n            assetClass,\r\n            bankFactory,\r\n            ownerShipManager,\r\n            diaOracleAddress,\r\n            colToken\r\n        )\r\n    {}\r\n\r\n    /**@dev Create permissioned pool\r\n        See AbstractFactory.sol \r\n     */\r\n    function createPermissionedPool(\r\n        uint16 intRate,\r\n        uint16 durationInHours,\r\n        uint24 colCoverage,\r\n        uint unitLiquidity,\r\n        address asset,\r\n        address[] memory contributors\r\n    ) external returns (bool) {\r\n        Router router = Router.PERMISSIONED;\r\n        uint quorum = contributors.length;\r\n        routers[\r\n            _createPool(\r\n                intRate,\r\n                uint8(quorum),\r\n                durationInHours,\r\n                colCoverage,\r\n                unitLiquidity,\r\n                asset,\r\n                contributors,\r\n                router\r\n            )\r\n        ] = router;\r\n        return true;\r\n    }\r\n\r\n    /**@dev Create permissionless\r\n        See AbstractFactory.sol\r\n    */\r\n    function createPermissionlessPool(\r\n        uint16 intRate,\r\n        uint8 quorum,\r\n        uint16 durationInHours,\r\n        uint24 colCoverage,\r\n        uint unitLiquidity,\r\n        address asset\r\n    ) external returns (bool) {\r\n        Router _router = Router.PERMISSIONLESS;\r\n        address[] memory contributors = new address[](1);\r\n        contributors[0] = _msgSender();\r\n        routers[\r\n            _createPool(\r\n                intRate,\r\n                quorum,\r\n                durationInHours,\r\n                colCoverage,\r\n                unitLiquidity,\r\n                asset,\r\n                contributors,\r\n                _router\r\n            )\r\n        ] = _router;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove liquidity pool\r\n     * @param unit : Epoch/Poool id\r\n     */\r\n    function removeLiquidityPool(uint256 unit) external returns (bool) {\r\n        _removeLiquidityPool(unit, routers[unit] == Router.PERMISSIONLESS);\r\n        return true;\r\n    }\r\n\r\n    /**@dev See AbstractFactory.sol */\r\n    function joinAPool(uint256 unit) \r\n        external \r\n        whenNotPaused\r\n        returns(bool) \r\n    {\r\n        return _joinEpoch(unit, routers[unit] == Router.PERMISSIONED);\r\n    }\r\n\r\n    /**@dev Return the router for an unit.\r\n     */\r\n    function getRouter(uint256 unit) external view returns (string memory) {\r\n        return\r\n            routers[unit] == Router.PERMISSIONLESS\r\n                ? \"PERMISSIONLESS\"\r\n                : \"PERMISSIONED\";\r\n    }\r\n\r\n}"
    },
    "contracts/implementations/OwnerShip.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IOwnerShip } from \"../apis/IOwnerShip.sol\";\r\n/**\r\n * @title MsgSender \r\n * @author Simplifi (Bobeu)\r\n * @notice Non-deployable contract simply returning the calling account.\r\n */\r\nabstract contract MsgSender {\r\n    function _msgSender() internal view virtual returns(address sender) {\r\n        sender = msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @title OwnerShip contract cuts across all contracts in the Simplifinance ecosystem. Multiple accounts can be given ownership right to interact with \r\n * ecosystem's smart contracts. It is a standalone contract for managing ownership in Simplifi protocol\r\n * @author Simplifinance Code written by Isaac Jesse (a.k.a Bobeu) Github: https://github.com/bobeu\r\n * @notice Accounts with ownership access cannot access users'fund. Users'funds are isolated from the main contract. Funds are \r\n * managed in a special safe called Bank. Each of the pools operates a unique and reusable safe.\r\n */\r\ncontract OwnerShip is IOwnerShip, MsgSender{\r\n    /**\r\n     * @notice Number of owners.\r\n     */\r\n    uint public ownersCount;\r\n\r\n    /**\r\n     * @notice Addresses with ownership permission.\r\n     */\r\n    \r\n    mapping (address => bool) private _isOwner;\r\n\r\n    /**\r\n     * @notice Mapping of ownersCount to addresses.\r\n     * A valid id will return a mapped owner.\r\n     */\r\n    mapping (uint => address) public owners;\r\n\r\n    /**\r\n     * @dev Only owner is allowed.\r\n     */\r\n    modifier onlyOwner {\r\n        require(_isOwner[_msgSender()], \"Oop! Caller is not recognized\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender(), true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns owner variable.\r\n     */\r\n    function _getOwner(uint ownerId) \r\n        internal \r\n        view \r\n        returns(address _owner) \r\n    {\r\n        _owner = owners[ownerId];\r\n    }\r\n\r\n    /**\r\n     * @dev Add or remove target address as owner.\r\n     * @param target: Target address.\r\n     * @notice 'target' parameter must not be empty.\r\n     */\r\n    function _setOwner(\r\n        address target,\r\n        bool add\r\n    ) \r\n        private \r\n    {\r\n        require(target != address(0), \"Simplifi OwnerShip: 'target' parameter is empty\");\r\n        add? (_isOwner[target] = true, ownersCount ++) : (_isOwner[target] = false, ownersCount --);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new owner address\r\n     * @param newOwners: New owners\r\n     * @notice Only address with owner permission can add another owner.\r\n     */\r\n    function setPermission(\r\n        address[] memory newOwners\r\n    ) \r\n        external\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        bool rt = true;\r\n        for(uint r = 0; r < newOwners.length; r++) {\r\n            _setOwner(newOwners[r], rt);\r\n        }\r\n        return rt;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an address as owner.\r\n     * @param target: Target address\r\n     * @notice Only address with owner permission can remove another owner.\r\n     */\r\n    function removeOwner(\r\n        address target\r\n    ) \r\n        external\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        _setOwner(target, false);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev An owner can renounce their ownership. This however will not leave the\r\n     * contract empty without an owner. There must be at least one owner left.\r\n     * @notice Only address with owner permission can renounce ownership.\r\n     */\r\n    function renounceOwnerShip() \r\n        external\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        require(ownersCount > 1, \"At least 2 owners is required to leave\"); \r\n        _setOwner(_msgSender(), false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns owner variable.\r\n     * Can be called externally by contracts.\r\n     * @param ownerId : Owner Id. \r\n     */\r\n    function getOwner(\r\n        uint ownerId\r\n    ) \r\n        external \r\n        view \r\n        returns(address) \r\n    {\r\n        return _getOwner(ownerId);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if target is an owner.\r\n     * @param target : Target address.\r\n     */\r\n    function isOwner(\r\n        address target\r\n    )\r\n        external\r\n        view \r\n        returns(bool) \r\n    {\r\n        return _isOwner[target];\r\n    }\r\n}"
    },
    "contracts/implementations/SimpliToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { ERC20Abstract, IOwnerShip } from \"./token/ERC20Abstract.sol\";\r\n\r\n/*\r\n    @title SToken is the native token of the Simplifinance platform.\r\n            It is a utility token that gives its holders access to Simplifinance\r\n            products.\r\n        Standard: Customized and ERC20 compatible.\r\n        Type: Deflationary.\r\n        Max Supply: 1_000_000_000.\r\n        Decimal: 18.\r\n*/\r\ncontract SimpliToken is ERC20Abstract {\r\n    event Locked(address from, uint256 amount);\r\n    event UnLocked(address from, uint256 amount);\r\n\r\n    constructor( \r\n        address attorney_,\r\n        address reserve_,\r\n        address initTokenReceiver,\r\n        IOwnerShip _ownershipMgr\r\n    ) ERC20Abstract(attorney_, reserve_, initTokenReceiver, _ownershipMgr) { }\r\n\r\n    ///@dev Contract accepts no platform coin\r\n    receive() external payable {\r\n        revert(\"NA\");\r\n    }\r\n\r\n    ///@dev See IERC20.sol {lockToken}\r\n    function lockToken(address _routeTo, uint256 amount) public returns (bool) {\r\n        _lock(_msgSender(), _routeTo, amount);\r\n\r\n        emit Locked(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    ///@dev See IERC20.sol {lockSpecial}\r\n    function lockSpecial(\r\n        address target, \r\n        address _routeTo, \r\n        uint256 amount\r\n    ) external onlyOwner returns (bool) {\r\n        _lock(target, _routeTo, amount);\r\n\r\n        emit Locked(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    ///@dev See IERC20.sol {unlock}\r\n    function unlockToken(uint256 amount) public returns (bool) {\r\n        _unlock(_msgSender(), amount);\r\n\r\n        emit UnLocked(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    ///@dev Burns token of `amount`\r\n    function burn(uint amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n        See IERC20.sol {batchTransfer}\r\n        A dynamic transfer utility. \r\n        Note: The size of the amount array must match that of the \r\n        account's. Another benefit is that each of the addresses on the \r\n        list can be dynamically mapped to different amount.\r\n     */\r\n    function batchTransfer(\r\n        uint[] memory amounts,\r\n        address[] memory accounts\r\n    ) public override returns (bool) {\r\n        uint accountSize = accounts.length;\r\n        require(accountSize == amounts.length, \"Unequal list\");\r\n        for (uint i = 0; i < accountSize; i++) {\r\n            address to = accounts[i];\r\n            uint amount = amounts[i];\r\n            _transfer(_msgSender(), to, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n"
    },
    "contracts/implementations/strategies/Bank.sol": {
      "content": "// SPDX-License-Identifier: MIT \r\n\r\npragma solidity 0.8.24;\r\n\r\n// import \"hardhat/console.sol\";\r\nimport { SafeMath } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\";\r\nimport { ReentrancyGuard } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\";\r\nimport { SafeCallERC20, IERC20 } from \"../../libraries/SafeCallERC20.sol\";\r\nimport { IBank } from \"../../apis/IBank.sol\";\r\nimport { Common } from \"../../apis/Common.sol\";\r\nimport { OnlyOwner, IOwnerShip } from \"../../abstracts/OnlyOwner.sol\";\r\n\r\ncontract Bank is IBank, OnlyOwner, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n\r\n    // Number of contributors currently operating this safe\r\n    uint private userCount;\r\n\r\n    // Total fee collected\r\n    uint private aggregateFee;\r\n\r\n    // Collateral token\r\n    // IERC20 public collateralToken;\r\n\r\n    // Fee Receiver\r\n    address public feeTo;\r\n\r\n    // Mapping of user to unitId to access\r\n    mapping(address => mapping(uint => bool)) private access;\r\n\r\n    // Mapping of users to unitId to Collateral\r\n    mapping(address => mapping(uint => uint256)) private collateralBalances;\r\n\r\n    ///@dev Only users with access role are allowed\r\n    modifier hasAccess(address user, uint unitId) {\r\n        if (!access[user][unitId]) revert Common.UserDoesNotHaveAccess();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes state variables.\r\n     * OnlyOwner function.\r\n     */\r\n    constructor(\r\n        IOwnerShip _ownershipManager,\r\n        address _feeTo\r\n    ) OnlyOwner(_ownershipManager) {\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    receive() external payable {\r\n        (bool s, ) = feeTo.call{value: msg.value}(\"\");\r\n        require(s);\r\n    }\r\n\r\n    /**\r\n     * @dev Registers new user\r\n     * @param user New user\r\n\r\n    */\r\n    function _addUser(address user, uint rId) private {\r\n        assert(!access[user][rId]);\r\n        access[user][rId] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of IBank.addUp\r\n     * See IBank.addUp\r\n     */\r\n    function addUp(address user, uint rId) external onlyOwner returns (bool) {\r\n        userCount++;\r\n        _addUser(user, rId);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev UnLocks collateral balances\r\n     * @param user Existing user\r\n\r\n    */\r\n    function _removeUser(address user, uint rId) private {\r\n        assert(access[user][rId]);\r\n        access[user][rId] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve spender contributor 'to' to spend from contract's balance\r\n     * @param to : Contributor\r\n     * @param asset : Currency in use\r\n     * @param amount : Value\r\n     * @notice Consideration is given to the previous allowances given to users.\r\n     */\r\n    function _setAllowance(address to, address asset, uint256 amount) private {\r\n        uint prev = IERC20(asset).allowance(address(this), to);\r\n        IERC20(asset).approve(to, amount.add(prev));\r\n    }\r\n\r\n    /**\r\n     * @dev End the current epoch\r\n     * @param asset : AssetBase\r\n     * @param cData : Contributors data\r\n     */\r\n    function _tryRoundUp(\r\n        address asset,\r\n        Common.Contributor[] memory cData\r\n    ) internal {\r\n        uint erc20Balances = IERC20(asset).balanceOf(address(this));\r\n        uint fees = aggregateFee;\r\n        if (erc20Balances > 0) {\r\n            if (erc20Balances > fees && fees > 0) {\r\n                erc20Balances -= fees;\r\n                aggregateFee = 0;\r\n                if (!IERC20(asset).transfer(feeTo, fees))\r\n                    revert AssetTransferFailed();\r\n            }\r\n            if (erc20Balances > 0) {\r\n                fees = erc20Balances.div(cData.length); // Reusing the fee memory slot\r\n                for (uint i = 0; i < cData.length; i++) {\r\n                    address to = cData[i].id;\r\n                    _setAllowance(to, asset, fees);\r\n                }\r\n            }\r\n        }\r\n        userCount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Finance - We send USD to user and accept collateral.\r\n     * @param user : Beneficiary.\r\n     * @param asset : Asset base\r\n     * @param loan : Amount to receive as loan.\r\n     * @param fee : Amount charged as platform fee\r\n     * @param calculatedCol : Amount required to pay as collateral\r\n     * @param rId : Record Id\r\n     */\r\n    function getFinance(\r\n        address user,\r\n        address asset,\r\n        uint256 loan,\r\n        uint fee,\r\n        uint256 calculatedCol,\r\n        uint rId\r\n    ) external onlyOwner returns (uint) {\r\n        assert(asset != address(0) && user != address(0));\r\n        collateralBalances[user][rId] = calculatedCol;\r\n        uint loanable = loan;\r\n        if (fee > 0) {\r\n            unchecked {\r\n                aggregateFee += fee;\r\n                if (loanable > fee) {\r\n                    loanable -= fee;\r\n                }\r\n            }\r\n        }\r\n        _setAllowance(user, asset, loanable);\r\n        return loan;\r\n    }\r\n\r\n    /**\r\n     * @dev Pays back loan\r\n     * @param _p : Parameters of type PaybackParam\r\n     * _p.user : Current txn.origin not msg.sender\r\n     * _p.asset : Asset base\r\n     * _p.debt : Amount owing by user\r\n     * _p.attestedInitialBal : Initial recorded balance of this contract before asset was transfered from the user.\r\n     * _p.allGF : Whether all the contributors have get finance or not\r\n     * _p.cData : Contributors data\r\n     * _p.isSwapped : If isSwapped is true, meaning the actual contributor defaulted.\r\n     * _p.defaulted : Address of the defaulted\r\n     * _p.rId : Record Id. Every pool has a record Id i.e pool.bigInt.recordId\r\n     */\r\n    function payback(Common.Payback_Bank memory _p) external onlyOwner returns (bool) {\r\n        uint col = collateralBalances[_p.user][_p.rId];\r\n        if (_p.isSwapped) {\r\n            col = collateralBalances[_p.defaulted][_p.rId];\r\n            collateralBalances[_p.defaulted][_p.rId] = 0;\r\n            _removeUser(_p.defaulted, _p.rId);\r\n            _addUser(_p.user, _p.rId);\r\n        }\r\n        assert(\r\n            IERC20(_p.asset).balanceOf(address(this)) >=\r\n                (_p.attestedInitialBal + _p.debt)\r\n        );\r\n        _setAllowance(_p.user, address(_p.collateralToken), col);\r\n        if (_p.allGF) _tryRoundUp(_p.asset, _p.cData);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called when a contributor remove a pool\r\n     * @param user : Contributor\r\n     * @param asset : Asset base\r\n     * @param unit : Unit contribution\r\n     * @param rId : Record Id\r\n     */\r\n    function cancel(\r\n        address user,\r\n        address asset,\r\n        uint unit,\r\n        uint rId\r\n    ) external onlyOwner returns (bool) {\r\n        _setAllowance(user, asset, unit);\r\n        _removeUser(user, rId);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Safe-related data\r\n     */\r\n    function getData() external view returns (ViewData memory) {\r\n        return ViewData(userCount, aggregateFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns User-related data\r\n     * @param user : Contributor\r\n     * @param rId : Record Id\r\n     */\r\n    function getUserData(\r\n        address user,\r\n        uint rId\r\n    ) external view returns (ViewUserData memory) {\r\n        return ViewUserData(access[user][rId], collateralBalances[user][rId]);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n    // function withdrawFee(\r\n    //     address recipient, \r\n    //     address asset\r\n    // ) \r\n    //     external \r\n    //     nonReentrant \r\n    //     onlyOwner\r\n    // {\r\n    //     uint fees = aggregateFee;\r\n    //     if(fees == 0) revert NoFeeToWithdraw();\r\n    //     if(asset == address(0)) revert TokenAddressIsZero();\r\n    //     aggregateFee = 0;\r\n    //     IERC20(asset).transfer(recipient, fees);\r\n\r\n\r\n    // }\r\n\r\n        // assert(asset != address(0) && user != address(0));\r\n        // Collateral memory col = collateralBalances[user][rId];\r\n        // uint primaryBal = col.balance.add(msg.value);\r\n        // if(calculatedCol <= primaryBal){\r\n        //     col.withdrawable = col.withdrawable.add(primaryBal.sub(calculatedCol));\r\n        // } else {\r\n        // uint agBalance = col.balance.add(msg.value).add(col.withdrawable);\r\n        // require(agBalance >= calculatedCol, \"Aggregate balances is insufficient\");\r\n        // col.withdrawable = agBalance.sub(calculatedCol);\r\n        // }\r\n        // col.balance = calculatedCol;\r\n        // collateralBalances[user][rId] = col;\r\n        // primaryBal = loan;\r\n        // if(fee > 0) {\r\n        // unchecked {\r\n        //     aggregateFee += fee;\r\n        // }\r\n        // if(loan > fee){\r\n        //     unchecked {\r\n        //     primaryBal -= fee;\r\n        //     }\r\n        // }\r\n\r\n        // }\r\n        // _setAllowance(user, asset, primaryBal);\r\n        // return loan;\r\n\r\n        // assert(IERC20(asset).balanceOf(address(this)) >= (attestedInitialBal + debt));\r\n        // Collateral memory col = collateralBalances[user][rId];\r\n        // if(isSwapped) {\r\n        // col = collateralBalances[defaulted][rId];\r\n        // delete collateralBalances[defaulted][rId];\r\n        // collateralBalances[user][rId] = col; \r\n        // _removeUser(defaulted, rId);\r\n        // _addUser(user, rId);\r\n\r\n        // }\r\n        // collateralBalances[user][rId] = Collateral(0, col.withdrawable.add(col.balance));\r\n        // if(allGF) { _tryRoundUp(asset, cData); }\r\n\r\n\r\n    // /**\r\n    //  *  @dev Withdraw Collateral.\r\n    //  * @param rId : Record Slot\r\n    //  */\r\n    // function withdrawCollateral(uint rId) \r\n    //     public \r\n    //     hasAccess(_msgSender(), rId)\r\n    //     nonReentrant\r\n    //     returns(bool) \r\n    // {\r\n    //     address caller = _msgSender();\r\n    //     Collateral memory col = collateralBalances[caller][rId];\r\n    //     uint balances = address(this).balance;\r\n    //     if(col.withdrawable == 0) revert ZeroWithdrawable();\r\n    //     if(col.balance == 0){\r\n    //     _removeUser(caller, rId);\r\n    //     delete collateralBalances[caller][rId];\r\n    //     } else {\r\n    //     collateralBalances[caller][rId].withdrawable = 0;\r\n    //     }\r\n    //     require(balances >= col.withdrawable, \"Balance Anomaly\");\r\n    //     payable(caller).transfer(col.withdrawable);\r\n    //     return true;\r\n    // }\r\n\r\n    //     /**\r\n    //  * @notice User can deposit collateral ahead of time\r\n    //  * @param amount msg.value\r\n    //  * @param rId : Record Slot\r\n    //  */\r\n    // function _depositCollateral(uint amount, uint rId) \r\n    //     internal\r\n    //     hasAccess(_msgSender(), rId)\r\n    // {\r\n    //     unchecked {\r\n    //     collateralBalances[_msgSender()][rId].withdrawable += amount;\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n// // import \"hardhat/console.sol\";\r\n// import { SafeMath } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\";\r\n// import { ReentrancyGuard } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\";\r\n// import { SafeCallERC20, IERC20 } from \"../../libraries/SafeCallERC20.sol\";\r\n// import { IBank } from \"../../apis/IBank.sol\";\r\n// import { Common } from \"../../apis/Common.sol\";\r\n// import { OnlyOwner } from \"../../abstracts/OnlyOwner.sol\";\r\n\r\n// contract Bank is IBank, OnlyOwner, ReentrancyGuard {\r\n//   using SafeMath for uint;\r\n\r\n//   // Number of contributors currently operating this safe\r\n//   uint private userCount;\r\n\r\n//   // Total fee generated from the contributors\r\n//   uint private aggregateFee;\r\n\r\n//   // Fee Receiver\r\n//   address public feeTo;\r\n\r\n//   // Collateral token\r\n//   IERC20 public collateralToken;\r\n\r\n//   // Mapping of unitId to addresses\r\n//   mapping (uint => address[]) private usersLists;\r\n\r\n//   // Mapping of user to unitId to access\r\n//   mapping (address => mapping(uint => User)) private access;\r\n\r\n//   // Mapping of users to unitId to Collateral\r\n//   mapping (address => mapping(uint => uint256)) private collateralBalances;\r\n\r\n//   ///@dev Only users with access role are permitted\r\n//   modifier hasAccess(address user, uint unitId) {\r\n//     if(!access[user][unitId]) revert AccessDenied();\r\n//     _;\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Initializes state variables.\r\n//    * OnlyOwner function.\r\n//    */\r\n//   constructor (\r\n//     address _ownershipManager, \r\n//     address _feeTo,\r\n//     IERC20 _collateralToken\r\n//   ) OnlyOwner(_ownershipManager)  {\r\n//     feeTo = _feeTo;\r\n//     collateralToken = _collateralToken;\r\n//   }\r\n\r\n//   receive() external payable {\r\n//     (bool s,) = ownershipManager.call{value: msg.value}('');\r\n//     require(s);\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Registers new user\r\n//    * @param user New user\r\n//    * @param unitId : Unit Id\r\n//    */\r\n//   function _addNewUser(address user, uint unitId, Users memory usr) private {\r\n//     access[user][unitId] = usr;\r\n//     usersLists[unitId].push(user);\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Implementation of IBank.addUp\r\n//    * See IBank.addUp\r\n//   */\r\n//   function addUp(address user, uint unitId) \r\n//     external\r\n//     onlyOwner\r\n//   {\r\n//     userCount ++;\r\n//     _addNewUser(user, unitId, Users(true, usersLists[unitId].length));\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Swap two addresses without incrementing userCount\r\n//   */\r\n//   function _swap(address oldUser, address newUser, uint unitId) \r\n//     internal\r\n//   {\r\n//     // _removeUser(oldUser, unitId);\r\n//     Users memory usr = access[oldUser][unitId];\r\n//     Users memory usr_new = access[newUser][unitId];\r\n//     if(usr_new.hasAccess) {\r\n//       access[oldUser][unitId] = usr_new;\r\n//       usersLists[unitId][usr_new.index] = oldUser;\r\n//     }\r\n//     access[newUser][unitId] = usr;\r\n//     usersLists[unitId][usr.index] = newUser;\r\n//   }\r\n\r\n//   /**\r\n//    * @dev UnLocks collateral balances\r\n//    * @param user Existing user\r\n//    * @param unitId : Unit Id\r\n//    */\r\n//   function _removeUser(address user, uint unitId) private {\r\n//     Users memory usr = access[user][unitId];\r\n//     if(usr.hasAccess) {\r\n//       access[user][unitId] = Users(false, 0);\r\n//       usersLists[unitId][usr.index] = address(0);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Approve spender contributor 'to' to spend from contract's balance\r\n//    * @param to : Contributor\r\n//    * @param asset : Currency in use\r\n//    * @param amount : Value\r\n//    * @notice Consideration is not given to the previous allowances given to users.\r\n//    *          Users are expected to withdraw allowances immediately they complete \r\n//    *          related transactions such as 'getFinance'.\r\n//    */\r\n//   function _setAllowance(\r\n//     address to, \r\n//     IERC20 asset, \r\n//     uint256 amount\r\n//   ) \r\n//     private \r\n//   {\r\n//     IERC20(asset).approve(to, amount);\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Complete a round if all the contributors have been financed \r\n//    * @param asset : Base asset used for contribution.\r\n//    * @param unitId : Unit Id or pool Id\r\n//    */\r\n//   function _tryRoundUp(IERC20 asset, uint unitId) internal {\r\n//     uint erc20Balances = IERC20(asset).balanceOf(address(this));\r\n//     uint fees = aggregateFee;\r\n//     if(erc20Balances > 0) {\r\n//       if(erc20Balances > fees && fees > 0) {\r\n//         erc20Balances -= fees;\r\n//         aggregateFee = 0;\r\n//         if(!IERC20(asset).transfer(feeTo, fees)) revert AssetTransferFailed();\r\n//       }\r\n//       address[] memory users = usersLists[unitId];\r\n//       if(erc20Balances > 0) {\r\n//         fees = erc20Balances.div(users.length); // Reusing the fee memory slot\r\n//         for(uint i = 0; i < users.length; i++) {\r\n//           address to = users[i].id;\r\n//           _setAllowance(to, asset, fees);\r\n//         }\r\n//       }\r\n//     }\r\n//     userCount = 0;\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Get Finance - We send USD to user and accept collateral.\r\n//    * @param user : Beneficiary.\r\n//    * @param loan : Amount to receive as loan.\r\n//    * @param asset : base asset\r\n//    * @param fee : Fee collacted\r\n//    * @param calculatedCol : Collateral amount user is expected to deposit\r\n//    * @param unitId : Unit Id\r\n//    */\r\n//   function getFinance(\r\n//     address oldUser, \r\n//     IERC20 asset, \r\n//     uint256 loan, \r\n//     uint fee, \r\n//     uint256 calculatedCol,\r\n//     uint unitId,\r\n//     bool swap,\r\n//     address newUser\r\n//   ) \r\n//     external \r\n//     onlyOwner\r\n//     returns(uint) \r\n//   {\r\n//     assert(address(asset) != address(0) && user != address(0));\r\n//     address user = oldUser;\r\n//     if(swap) {\r\n//       user = newUser;\r\n//       if(oldUser != newUser) _swap(oldUser, newUser, unitId);\r\n//     };\r\n//     IERC20 token = collateralToken;\r\n//     collateralBalances[user][unitId] = calculatedCol;\r\n//     uint loanable = loan;\r\n//     if(fee > 0) {\r\n//       unchecked {\r\n//         aggregateFee += fee;\r\n//       }\r\n//       if(loan > fee){\r\n//         unchecked {\r\n//           loanable -= fee;\r\n//         }\r\n//       }\r\n\r\n//     }\r\n//     _setAllowance(user, asset, loanable);\r\n//     return loan;\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Payback loan\r\n//    * @param user : User. Not msg.sender\r\n//    * @param asset : Base asset in use\r\n//    * @param debt : amount owe as debt\r\n//    * @param attestedInitialBal : Initial balance that was recorded before execution get to this point\r\n//    * @param allGF : If all has get finance or not\r\n//    * @param cData : Contributors array\r\n//    * @param isSwapped : If the expected contributor defaults, and they're being liquidated, this flag becomes true\r\n//    * @param defaulted : Defaulted account\r\n//    * @param unitId : Unit Id\r\n//    */\r\n//   function payback(\r\n//     address user, \r\n//     IERC20 asset, \r\n//     uint256 debt,\r\n//     uint256 attestedInitialBal,\r\n//     bool allGF, \r\n//     bool isSwapped,\r\n//     address defaulted,\r\n//     uint unitId\r\n//   ) external onlyOwner{\r\n//     uint col = collateralBalances[user][unitId];\r\n//     if(isSwapped) {\r\n//       col = collateralBalances[defaulted][unitId];\r\n//       collateralBalances[defaulted][unitId] = 0;\r\n//       _swap(defaulted, user, unitId);\r\n//     }\r\n//     assert(IERC20(asset).balanceOf(address(this)) >= (attestedInitialBal + debt));\r\n//     _setAllowance(user, collateralToken, col);\r\n//     if(allGF) _tryRoundUp(asset, unitId);\r\n//   }\r\n\r\n//   function cancel(\r\n//     address user, \r\n//     IERC20 asset, \r\n//     uint unit,\r\n//     uint unitId\r\n//   ) external onlyOwner  {\r\n//     _setAllowance(user, asset, unit);\r\n//     _removeUser(user, unitId);\r\n//   }\r\n\r\n//   /**\r\n//    * @dev Alternate way of withdrawing collateral balance if user forget to do so before this safe\r\n//    * is transfered to a new set of contributors. It is advisable to withdraw collaterals before an epoch is \r\n//    * completed.\r\n//    * @param poolId : Poolid or unitId\r\n//    * @param asset : Asset that was in the pool \r\n//    */\r\n//   function withdrawCollateralFromPool(uint poolId, IERC20 asset) public nonReentrant returns(bool) {\r\n//     uint colBal = collateralBalances[_msgSender()][poolId];\r\n//     require(colBal > 0, \"Zero\");\r\n//     if(address(asset) == address(0)) revert InvalidIERC20Contract();\r\n//     collateralBalances[user][poolId] = 0;\r\n//     if(IERC20(collateralToken).balanceOf(address(this)) < colBal) revert InsufficientContractBalance();\r\n//     _setAllowance(_msgSender(), asset, colBal);\r\n//     return true;\r\n//   }\r\n\r\n//   function getData() external view returns(ViewData memory) {\r\n//     return ViewData(userCount, aggregateFee);\r\n//   }\r\n\r\n//   function getUserData(address user, uint unitId) external view returns(ViewUserData memory) {\r\n//     return ViewUserData(\r\n//       access[user][unitId],\r\n//       collateralBalances[user][unitId]\r\n//     );\r\n//   }\r\n\r\n// }\r\n"
    },
    "contracts/implementations/strategies/BankFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IBankFactory } from \"../../apis/IBankFactory.sol\";\r\nimport { Bank } from \"./Bank.sol\";\r\nimport { OnlyOwner, IOwnerShip } from \"../../abstracts/OnlyOwner.sol\";\r\n\r\n/**@title SmartBankAdmin: A standalone contract that manages bank creation, \r\n   deletion, read and write data.\r\n\r\n   Author: Simplifinance\r\n */\r\ncontract BankFactory is IBankFactory, OnlyOwner {\r\n  // using Clones for address;\r\n\r\n  // Bank count \r\n  uint public totalBanks;\r\n\r\n  address public feeTo;\r\n\r\n/**\r\n * @dev List of Strategies and their keys \r\n */\r\n  // BankData[] private strategies;\r\n\r\n /**\r\n * @dev Mapping of addresses to strategies.\r\n * Also used as reverse map of strategies to status.\r\n */\r\n  mapping(uint256 => address) private bankMap;\r\n\r\n  constructor (IOwnerShip _ownershipManager, address _feeTo) OnlyOwner(_ownershipManager) {\r\n    feeTo = _feeTo;\r\n  }\r\n\r\n  receive() \r\n    external \r\n    payable \r\n  {\r\n    revert();\r\n  }\r\n  \r\n  /**@dev Return if account owns a bank or not\r\n  */\r\n  function _hasBank(\r\n    uint256 unit\r\n  ) \r\n    internal \r\n    view \r\n    returns (bool) \r\n  {\r\n    return bankMap[unit] != address(0);\r\n  }\r\n\r\n  // Returns smartBank for 'user'\r\n  function _getBank(\r\n    uint256 unit\r\n  ) \r\n    internal \r\n    view returns(address) \r\n  { \r\n    return bankMap[unit];\r\n  }\r\n  \r\n  // function _getBank(\r\n  //   address user\r\n  // ) \r\n  //   internal \r\n  //   view returns(address) \r\n  // { \r\n  //   return bankMap[user];\r\n  // }\r\n  \r\n  /**@dev Create a new bank.\r\n   * @notice 'unit' should not own a bank before now.\r\n   *          only address with owner permission can call.\r\n  */\r\n  function createBank(\r\n    uint256 unit\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns(address _bank) \r\n  {\r\n    if(!_hasBank(unit)){\r\n      _bank = _createBank(unit);\r\n    } else {\r\n      _bank = _getBank(unit);\r\n    }\r\n    return _bank;\r\n  }\r\n\r\n  /**\r\n    * @param unit : Amount\r\n   * \r\n   * @notice Even if user is trying to rekey or upgrade smartbank, same amount of fee is required\r\n   * for successful upgrade.\r\n   */\r\n  function _createBank(\r\n    uint256 unit\r\n  ) \r\n    private \r\n    returns(address bank) \r\n  {\r\n    totalBanks ++;\r\n    // address ssi = instance;\r\n    // bank = ssi.cloneDeterministic(keccak256(abi.encodePacked(totalBanks, caller)));\r\n    bank = address(new Bank(ownershipManager, feeTo));\r\n    _updateBank(unit, bank);\r\n  }\r\n\r\n  /**\r\n   * Update storage with the new Bank instance : {internal}\r\n   * @param unit : Unit amount \r\n   * @param bank : New Bank address\r\n   */\r\n  function _updateBank(\r\n    uint256 unit, \r\n    address bank\r\n  ) \r\n    private \r\n  {\r\n    bankMap[unit] = bank;\r\n  }\r\n\r\n  /// Returns then bank for 'unit'\r\n  /// @param unit : Unit amount\r\n  function getBank(\r\n    uint unit\r\n  ) \r\n    external \r\n    view \r\n    returns(address) \r\n  { \r\n    return _getBank(unit);\r\n  }\r\n\r\n  function setFeeTp(address newFeeTo) public onlyOwner {\r\n    feeTo = newFeeTo;\r\n  }\r\n}"
    },
    "contracts/implementations/TestUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { ERC20, Context } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport { OnlyOwner, MsgSender, IOwnerShip } from \"../abstracts/OnlyOwner.sol\";\r\nimport { IERC20 } from \"../apis/IERC20.sol\";\r\n\r\ncontract TestBaseAsset is OnlyOwner, ERC20 {\r\n  error AlreadySignedUp();\r\n  struct Tester {\r\n    bool isSignedUp;\r\n    bool isApproved;\r\n  }\r\n\r\n  address[] public testers;\r\n\r\n  IERC20 public collateralToken;\r\n\r\n  mapping (address => Tester) public indexes;\r\n\r\n  constructor(\r\n    IOwnerShip _ownershipManager,\r\n    IERC20 _collateralToken\r\n  ) ERC20(\"Test Base Asset\", \"TBSD\") OnlyOwner(_ownershipManager) {\r\n    require(address(_collateralToken) != address(0), \"Collateral token is zero\");\r\n    require(address(_ownershipManager) != address(0), \"OwnershipManager addr is zero\");\r\n    collateralToken = _collateralToken;\r\n    _mint(msg.sender, 100000 * (10**18));\r\n    _signUp();\r\n  }\r\n\r\n  /**\r\n   * @dev Claim test token \r\n   * @param to : Recipient\r\n   * @notice Two assets are sent to recipient:\r\n   *      1. Base contribution asset\r\n   *      2. Collateral token\r\n   *  Sender must registered and be approved in order to claim test tokens\r\n   */\r\n  function _claimTestTokens(address to) internal {\r\n    require(indexes[to].isApproved, \"Not approved\");\r\n    uint amount = 5000 * (10**18);\r\n    uint colAmount = amount * 4;\r\n    if(balanceOf(to) == 0) _mint(to, amount);\r\n    if(IERC20(collateralToken).balanceOf(to) == 0 && IERC20(collateralToken).balanceOf(address(this)) >= colAmount) IERC20(collateralToken).transfer(to, colAmount);\r\n  }\r\n\r\n  function claimTestTokens() public returns(bool) {\r\n    _claimTestTokens(_msgSender());\r\n    return true;\r\n  }\r\n   \r\n  /**\r\n   * @dev Assigned owner account (s) can send test tokens to multiple users provided they're \r\n   * registered and approved.\r\n   * @param tos : A list of recipients\r\n   * @notice Sender must have ownership right or access\r\n   */\r\n  function mintBatch(address[] memory tos) public onlyOwner {\r\n    for(uint i = 0; i < tos.length; i++) {\r\n      _claimTestTokens(tos[i]);\r\n    }\r\n  }\r\n\r\n  function _signUp() internal {\r\n    Tester memory ts = indexes[_msgSender()];\r\n    if(!ts.isSignedUp){\r\n      indexes[_msgSender()].isSignedUp = true;\r\n      testers.push(_msgSender());\r\n    } else revert AlreadySignedUp();\r\n  }\r\n  \r\n  /**\r\n   * @dev Register users for testnet participation\r\n   */\r\n  function joinTestnet() public returns(bool) {\r\n    _signUp();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Owner accounts can approve testers\r\n   * @param targets : List of accounts to approve \r\n   */\r\n  function approveTester(address[] memory targets) public onlyOwner {\r\n    for(uint i = 0; i < targets.length; i++){\r\n      address target = targets[i];\r\n      Tester memory ts = indexes[target];\r\n      if(ts.isSignedUp && !ts.isApproved) indexes[target].isApproved = true;\r\n    }\r\n  }\r\n\r\n  function _msgSender() internal view override(Context, MsgSender) returns(address sender) {\r\n    sender = msg.sender;\r\n  }\r\n}"
    },
    "contracts/implementations/token/Attorney.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Pausable, IOwnerShip } from \"../../abstracts/Pausable.sol\";\r\nimport { Lib } from \"./ERC20Abstract.sol\";\r\nimport { SafeERC20 } from \"./SafeERC20.sol\";\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\n\r\n/**\r\n * Attorney acts as mediator between token and their holders when they lost access to their account and had previously\r\n * set up a lock. Attorney run attestation om the token contract if user's claim is genuine, charges a small amount of fee\r\n * and unlocks the token. \r\n * Tokens are unlocked and sent to the escape address. \r\n */\r\n\r\ncontract Attorney is Pausable {\r\n  using Lib for *;\r\n  using SafeERC20 for IERC20;\r\n\r\n  error CallNotFromEscapeAccount();\r\n\r\n  // Service fee\r\n  uint public fee;\r\n\r\n  // Fee receiver\r\n  address private feeTo;\r\n\r\n  IERC20 public token;\r\n\r\n  receive() external payable {\r\n    (bool _s,) = feeTo.call{value: msg.value}(\"\");\r\n    require(_s);\r\n  }\r\n\r\n  constructor(\r\n    uint _fee, \r\n    address _feeTo,\r\n    IOwnerShip _ownershipManager\r\n  ) \r\n    Pausable(_ownershipManager) \r\n  {\r\n    _feeTo.cannotBeEmptyAddress();\r\n    fee = _fee;\r\n    feeTo = _feeTo;\r\n  }\r\n\r\n  function setToken(IERC20 _token) \r\n    public \r\n    onlyOwner\r\n  {\r\n    address(_token).cannotBeEmptyAddress();\r\n    token = _token;\r\n  }\r\n\r\n  /**@dev Panic unlock token.\r\n    Token balances is sent to address specified as an escape address.\r\n   */\r\n  function panicUnlock(\r\n    address lostAccount\r\n  ) \r\n    public \r\n    payable \r\n    whenNotPaused\r\n  {\r\n    IERC20.Balances memory _b = IERC20(token).accountBalances(lostAccount);\r\n    require(_b.locked.value > 0, \"No lock detected\");\r\n    // if(_msgSender() != _b.locked.escapeTo) revert CallNotFromEscapeAccount();\r\n    msg.value.mustBeAbove(fee);\r\n    (bool _s,) = feeTo.call{value: msg.value}(\"\");\r\n    require(_s);\r\n    token.safePanicUnlock(lostAccount, _b);\r\n  }\r\n\r\n  function setFee(uint newFee) public onlyOwner {\r\n    fee = newFee;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/implementations/token/ERC20Abstract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\nimport { Pausable, IOwnerShip } from \"../../abstracts/Pausable.sol\";\r\n\r\nlibrary Lib {\r\n  function cannotBeEmptyAddress(address target) internal pure {\r\n    require(target != address(0), \"Lib: Target is zero address\");\r\n  }\r\n\r\n  function mustBeAbove(uint a, uint b) internal pure {\r\n    require(a >= b, \"B is greater than A\");\r\n  }\r\n\r\n  function _now() internal view returns(uint64 result) {\r\n    result = uint64(block.timestamp);\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n\r\n/**\r\n * @title SimpliFinance Token Implementation { Non deployable }\r\n * @author SimpliFinance - https://github.com/bobeu\r\n * @notice @dev Simplifinance Token operates a dual ledger model:\r\n     *      - Regular balance : Compatible with the standard ERC20 balances.\r\n     *      - private balance : This is kept in a seperate ledger but reflects in the total balances when \r\n     *          the `balanceOf` is invoked. We introduced this method for internal security reasons to protect\r\n     *          SPT holder in the event they lost access to their wallets.\r\n     *  HOW IS WORKS\r\n     *  ============\r\n     *      To be protected, holder must explicitly subscribe to it. During the processs, an alternative \r\n     *      EOA referred to as `escapeTo` must be provided as an argument to the function. Holders are adviced to create a seperate account for this purpose\r\n     *      and keep the private keys secure. Such account might not be used for regular transaction. Providing this address activates \r\n     *      the private balance mode. The specified amount of `inValue` is locked for the period of `lockTil`. During the locked period, if holder \r\n     *      lost access to their account, through the `Attorney` contract, provided the lock is activated, they will regain access to their funds.\r\n     *      The Attorney will enquire from the Token contract if the caller has previously activated the lock, and if an escape address was set. otherwise\r\n     *      the request is ignored.\r\n     * Note: An amount is charged by the Attorney for such service.\r\n     * Even if an hacker gained access to your private keys, as a SPT holder, the fund is not accessible to them only if the holder had activated the lock feature.\r\n     * \r\n     * Note: The call must be initiated by an account other than the owner.\r\n     *       An attacker only has access to SPT token in your regular ERC20 ledger balances.\r\n     *   \r\n        The `panicWithdraw` method resides in the Attorney contract. It unlocks all balances in the locked ledger and are sent to the `escape` account provided the  \r\n        an address was initially set.\r\n */\r\nabstract contract ERC20Abstract is IERC20, Pausable {\r\n  using Lib for *;\r\n\r\n  TokenInfo private tokenInfo;\r\n  \r\n  mapping(address => Balances) private _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  /**\r\n   * @dev Initializes state varibles.\r\n   * Note: We mint the maxSupply at deployment. 30% of the total supply\r\n   * is in circulation while the rest is lcoked in the reserve.\r\n   */\r\n  constructor(\r\n    address attorney_,\r\n    address reserve_,\r\n    address initTokenReceiver,\r\n    IOwnerShip _ownershipManager\r\n  )  \r\n    Pausable(_ownershipManager)\r\n  {\r\n    attorney_.cannotBeEmptyAddress();\r\n    tokenInfo = TokenInfo(18, 0, \"Simplfinance Token\", \"TSFT\", attorney_);\r\n    _mint(_msgSender(), 200000*(10**18)); // For testing, mint to msg.sender\r\n    _mint(initTokenReceiver, 1_000_000_000*(10**18));\r\n    _lock(initTokenReceiver, reserve_, 700_000_000*(10**18)); // We expect reserve_ to be a grouped account e.g multisig.\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return tokenInfo.name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return tokenInfo.symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the default value returned by this function, unless\r\n   * it's overridden.\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return tokenInfo.decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns contracts account connected to the token contracts i.e.\r\n   *    - Attorney\r\n   * Note: Attorney account acts on behalf of a holders to retrive their token\r\n   *        in the event they lost access to their accounts.\r\n   */\r\n  function getAttorney() public view returns(address _attorney) {\r\n    _attorney = tokenInfo.attorney;\r\n  }\r\n\r\n  /// @dev See IERC20.sol {getInfo}\r\n  function getLockedInfo(address target) public view returns(Protected memory _locked) {\r\n    address msgSender = _msgSender();\r\n    if(msgSender == tokenInfo.attorney) {\r\n      _locked = _balances[target].locked;\r\n    }\r\n    return _locked;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return tokenInfo.totalSupply;\r\n  }\r\n\r\n  ///@dev See {IERC20-accountBalances}.\r\n  function accountBalances(address who) external view returns (Balances memory _bal) {\r\n    _bal = _balances[who];\r\n    return _bal;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   * Returns the spendable balance of @param account: Bytes32 address type\r\n   * Note: The function `balanceOf` complies with that ERC20 standard\r\n   */\r\n  function balanceOf(address account) public view returns (uint256 _bal) {\r\n    return _getSpendable(account);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address to, uint256 amount) public returns (bool) {\r\n    address owner = _msgSender();\r\n    _transfer(owner, to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n      address owner = _msgSender();\r\n      _approve(owner, spender, amount);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * NOTE: Does not update the allowance if the current allowance\r\n   * is the maximum `uint256`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` and `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``from``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n    address spender = _msgSender();\r\n    _spendAllowance(from, spender, amount);\r\n    _transfer(from, to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n      address owner = _msgSender();\r\n      _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n    address owner = _msgSender();\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n      _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // Returns spendable balances of {from} i.e usual ERC20 'balanceOf'\r\n  function _getSpendable(address from) internal view returns (uint256) {\r\n    return _balances[from].spendable;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `from` to `to`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address from, address to, uint256 amount) internal virtual \r\n  {\r\n    from.cannotBeEmptyAddress();\r\n    to.cannotBeEmptyAddress();\r\n\r\n    _beforeTokenTransfer(from, to, amount);\r\n    uint256 fromBalance = _getSpendable(from);\r\n    fromBalance.mustBeAbove(amount);\r\n    unchecked {\r\n        _balances[from].spendable = fromBalance - amount;\r\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n        // decrementing then incrementing.\r\n        _balances[to].spendable += amount;\r\n    }\r\n\r\n    emit Transfer(from, to, amount);\r\n\r\n    _afterTokenTransfer(from, to, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    // _requireContext(_isCallable(Internal.MINT));\r\n    account.cannotBeEmptyAddress();\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    tokenInfo.totalSupply += amount;\r\n    unchecked {\r\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n        _balances[account].spendable += amount;\r\n    }\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    account.cannotBeEmptyAddress();\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account].spendable;\r\n    accountBalance.mustBeAbove(amount);\r\n    unchecked {\r\n      _balances[account].spendable = accountBalance - amount;\r\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n      tokenInfo.totalSupply -= amount;\r\n    }\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    owner.cannotBeEmptyAddress();\r\n    spender.cannotBeEmptyAddress();\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n   *\r\n   * Does not update the allowance amount in case of infinite allowance.\r\n   * Revert if not enough allowance is available.\r\n   *\r\n   * Might emit an {Approval} event.\r\n   */\r\n  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n      currentAllowance.mustBeAbove(amount);\r\n      unchecked {\r\n        _approve(owner, spender, currentAllowance - amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * has been transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n  \r\n  ///@dev Returns current Unix time stamp\r\n  function _now() internal view returns(uint32) {\r\n    return uint32(block.timestamp);\r\n  }\r\n  \r\n  /**@dev Locks token in the private ledger balances.\r\n    When tokens are locked they can be unlocked at any time.\r\n      @param _escapeTo : An extra address that token will be forwarded to. This must not be zero address\r\n      @param amount : Amount user is willing to send to the safe.\r\n      Note: If caller has no lock previously set,`escapeTo` must not be an empty address.\r\n            User will always have to provide an escape address each time they want to lock up tokens.\r\n      REWARD\r\n      ======\r\n      Holders are eligible to claim reward if they hold SFT in private ledger for at least 30 days.\r\n      The measure of such reward is determined by the team.\r\n      @notice Care must be taken when locking and unlocking. Users must first check through the attorney if they're\r\n            qualify for reward then they must claim first before lock again, otherwise, the locked time is overriden.\r\n            This can nullify their rewards.\r\n\r\n   */\r\n  function _lock(address account, address _escapeTo, uint256 amount) \r\n    internal\r\n  {\r\n    _escapeTo.cannotBeEmptyAddress();\r\n    Balances memory balances = _balances[account];\r\n\r\n    balances.spendable.mustBeAbove(amount);\r\n    // _balances[account].locked.escapeTo = _escapeTo;\r\n    // _balances[account].locked.lastLocked = amount;\r\n    unchecked {\r\n      _balances[account] = Balances(\r\n        balances.spendable - amount,\r\n        Protected(\r\n          balances.locked.value + amount,\r\n          _escapeTo\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**@dev Unlock token \r\n   */\r\n  function _unlock(address account, uint amount) internal {\r\n    Balances memory balances = _balances[account];\r\n    if(balances.locked.escapeTo == address(0)) revert NoPreviousLockDetected();\r\n    balances.locked.value.mustBeAbove(amount);\r\n    unchecked {\r\n      _balances[account].locked.value -= amount;\r\n      _balances[balances.locked.escapeTo].spendable += amount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Replaces the attorney account. Only authorized owner account can perform\r\n   * this action.\r\n   */\r\n  function setAttorney(address newAttorney) public onlyOwner {\r\n    newAttorney.cannotBeEmptyAddress();\r\n    tokenInfo.attorney = newAttorney;\r\n  }\r\n\r\n  /**See IERC20.sol {panicUnlock}\r\n    Method is executed only of the caller is the attorney\r\n    Note: Since the user is able to prove to the attorney that they\r\n    own the lost account, they are also able to reclaim all balances.\r\n   */ \r\n  function panicUnlock(address accountToRetrieve, Balances memory _bal) external returns(bool feedback) {\r\n    tokenInfo.attorney.cannotBeEmptyAddress();\r\n    if(_msgSender() == tokenInfo.attorney) {\r\n      unchecked {\r\n        _balances[accountToRetrieve].locked.value = 0;\r\n        _balances[_bal.locked.escapeTo].spendable += _bal.locked.value;\r\n      }\r\n      if(_bal.spendable > 0) {\r\n        _transfer(accountToRetrieve, _bal.locked.escapeTo, _bal.spendable);\r\n      } \r\n      feedback = true;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/implementations/token/Escape.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { TokenInteractor, IOwnerShip } from \"./TokenInteractor.sol\";\r\n\r\n/**\r\n * @title Escape\r\n * @dev Total supply is minted to this contract and is controlled by an owner address\r\n * that should be a multisig account.\r\n */\r\n\r\ncontract Escape is TokenInteractor {\r\n    constructor(IOwnerShip _ownershipManager) TokenInteractor(_ownershipManager) { }\r\n\r\n    function name() public pure returns(string memory) {\r\n        return \"ESCAPE\";\r\n    }\r\n}\r\n"
    },
    "contracts/implementations/token/Reserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { TokenInteractor, IOwnerShip} from \"./TokenInteractor.sol\";\r\n\r\n/**\r\n * @title Reserve\r\n * @dev Total supply is minted to this contract and is controlled by an owner address\r\n * that should be a multisig account.\r\n */\r\n\r\ncontract Reserve is TokenInteractor {\r\n    constructor(IOwnerShip _ownershipManager) TokenInteractor(_ownershipManager) { }\r\n\r\n    function name() public pure returns(string memory) {\r\n        return \"RESERVE\";\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/implementations/token/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\nimport { IERC20Permit } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /** Batch transfer\r\n     * @dev Transfer `values` amount of `token` from the calling contract to `tos`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeBatchTransfer(IERC20 token, address[] memory tos, uint256[] memory values) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.batchTransfer.selector, tos, values));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Panicly unlock token from the 'token' contract by force transfer from the 'account' to the\r\n     * preset escape account. \r\n     * This is done only by the Attorney.\r\n     */\r\n    function safePanicUnlock(IERC20 token, address account, IERC20.Balances memory _bal) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.panicUnlock.selector, account, _bal));\r\n    }\r\n\r\n    /**\r\n     * @dev Unlocks token 'token' of 'amount' from the caller's account.\r\n     * If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeUnlock(IERC20 token, uint256 amount) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.unlockToken.selector, amount));\r\n    }\r\n    \r\n    /**\r\n     * @dev Lock token 'token' of 'amount' from the caller's account.\r\n     * If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeLock(IERC20 token, address _routeTo, uint256 amount) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.lockToken.selector, _routeTo, amount));\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/implementations/token/TokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner, IOwnerShip } from \"../../abstracts/OnlyOwner.sol\";\r\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport { Lib } from \"./ERC20Abstract.sol\";\r\nimport { SafeERC20 } from \"./SafeERC20.sol\";\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\n\r\n/**\r\n * @title InitialTokenReceiver\r\n * @dev Total supply is minted to this contract and is controlled by a set of addresses\r\n *  acting hence TokenDistributor is multisig in nature. \r\n * To transfer any amount of token out of this contract, the following steps\r\n * must be peformed:\r\n * \r\n * - INITIATE TRXN: A request to transfer an amount must be made. An event is emitted \r\n *      to extract the request Id. Request IDs are unique to another.\r\n * \r\n * - SIGN TRXN: The predefined signers addresses will have to sign the transaction with \r\n *      the given request Id. The number of signers needed to validate execution must match \r\n *      `quorum` declared in the state variable.\r\n * \r\n * - EXECUTE TRXN: Transactions can only be executed if the delay period has passed and are \r\n *      are already signed.\r\n * \r\n * Same functionalities can be used to add and remove a new signer, and change quorum. \r\n */\r\ncontract TokenDistributor is \r\n    OnlyOwner,\r\n    ReentrancyGuard\r\n{\r\n    using Lib for *;\r\n    using SafeERC20 for IERC20;\r\n\r\n    error Pending();\r\n    error AlreadySigned();\r\n    error InvalidRequestId(uint);\r\n    error InsufficientBalance(uint256);\r\n\r\n    event Requested(uint reqId, address from);\r\n    event Signer(uint reqId, address from);\r\n\r\n    enum Status {NONE, INITIATED, PENDING, EXECUTED}\r\n\r\n    /**\r\n     * @notice Transaction type\r\n     * Transaction can be ERC20 or Native.\r\n     * By default, they're ERC20 type.\r\n     * We also use other type from 2 and above to denote the \r\n     * type of transaction that can be performed by the owner account\r\n     */\r\n    enum Type {ERC20, NATIVE, ADDSIGNER, REMOVESIGNER, SETQUORUM}\r\n\r\n    /**\r\n     * @notice Number of signers require to execute a transfer\r\n     */\r\n    uint public quorum;\r\n\r\n    /**\r\n     * @dev Unique order ID mapped to each transfer request.\r\n     * Note: Two requests can not have same order ID. \r\n     */\r\n    uint private requestIDs;\r\n\r\n    /**\r\n     * @notice Delay timer.\r\n     * Transfers are executed after the expiration of this period.\r\n     */\r\n    uint public delay;\r\n\r\n    struct Request {\r\n        uint256 amount;\r\n        address recipient;\r\n        uint delay;\r\n        address[] executors;\r\n        Status status;\r\n        Type txType;\r\n    }\r\n\r\n    address[] private executors;\r\n\r\n    /**\r\n     * @dev Transfer orders.\r\n     * Mapping of Ids to Request\r\n     * Note: We assigned slot `0` to add and remove signer.\r\n     * i.e requests[0].\r\n     */\r\n    mapping (uint => Request) private requests;\r\n\r\n    /**\r\n     * @dev Signers\r\n     * Mapping of address to bool\r\n     */\r\n    mapping (address => bool) private signers;\r\n\r\n    /**\r\n     * @dev Signed requests\r\n     * Mapping of signer to request id to bool\r\n     */\r\n    mapping (address => mapping (uint => bool)) private signed;\r\n\r\n    // ERC20 basic token contract held by this contract\r\n    IERC20 public token;\r\n\r\n    /**\r\n     * @dev Only signers are allowed\r\n     */\r\n    modifier onlySigner {\r\n        require(signers[_msgSender()], \"Not a signer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Request Id must not be zero\r\n     * @param reqId : Request Id\r\n     */\r\n    modifier validateRequestId(uint reqId) {\r\n        if(reqId == 0) revert InvalidRequestId(reqId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only when not signed.\r\n     * @param reqId : Request Id\r\n     */\r\n    modifier whenNotSign(uint reqId) {\r\n        address caller = _msgSender();\r\n        if(signed[caller][reqId]) revert AlreadySigned();\r\n        _;\r\n        signed[caller][reqId] = true;\r\n    }\r\n\r\n    constructor(\r\n        IOwnerShip _ownershipManager,\r\n        address[] memory _signers, \r\n        uint8 _quorum\r\n    ) \r\n        OnlyOwner(_ownershipManager) \r\n    {\r\n        uint size = _signers.length;\r\n        quorum = _quorum;\r\n        if(size > 0) {\r\n            for (uint i = 0; i < size; i++) {\r\n                _addSigner(_signers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setToken(IERC20 newToken) \r\n        public \r\n        onlyOwner\r\n    {\r\n        address(newToken).cannotBeEmptyAddress();\r\n        token = newToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Generate request Id\r\n     * Request Id is generated for all transaction type\r\n     */\r\n    function _generateRequestId() private returns(uint id) {\r\n        requestIDs ++;\r\n        id = requestIDs;\r\n        // id = _type < 2? requestIDs : 0;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check that current request's staus correspond\r\n     * @param _req : Request struct.\r\n     * @param _status : Status to match with.\r\n     * @param errorMessage : Error message.\r\n     */\r\n    function _whenStatus(Request memory _req, Status _status, string memory errorMessage) internal pure {\r\n        require(_req.status == _status, errorMessage);\r\n    }\r\n\r\n    /**@dev Initiate transaction. \r\n        This function can be invoked only by the authorized accounts\r\n        as signers.\r\n        The `_type` parameter is used to select the type of transaction \r\n        the caller want to perform - a more reason we restrict the `_type` \r\n        input to number between 0 and 5 otherwise we get out of bound error\r\n        since enums work similar to arrays.\r\n        @param _recipient :     An address to act as the beneficiary of this \r\n                                transaction.\r\n        @param _amount:         Amount to send as value (in token).\r\n        @param _delayInHours:   If this flag is set to value greater than 0,\r\n                                execution of the proposed transaction will not succeed unless the \r\n                                delay time has passed.\r\n        @param  _type:  The type of transaction to perform. Transction could be any of the following\r\n                        as set in the `Type` enum:\r\n                        ERC20 (0): Transfer ERC20 token.\r\n                        NATIVE (1): Transfer network asset such as ETH.\r\n                        ADDSIGNER (2): Add more signers to the list.\r\n                        REMOVESIGNER (3): Deactivate the `_recipient` address from as a signers. \r\n                        SETQUORUM (4): Increase or decrease the number of signatories needed to execute a transaction.\r\n        Note: By default, the caller is deemed to have signed the transaction.\r\n     */\r\n    function initiateTransaction(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        uint16 _delayInHours,\r\n        uint8 _type\r\n    ) public onlySigner {\r\n        require(_type < 5, \"Invalid selector\");\r\n        uint reqId = _generateRequestId();\r\n        if(_type < 4) {\r\n            require(_recipient != address(0), \"Recipient is zero addr\");\r\n        }\r\n        requests[reqId].amount = _amount;\r\n        requests[reqId].recipient = _recipient;\r\n        requests[reqId].status = Status.INITIATED;\r\n        requests[reqId].txType = Type(_type);\r\n        unchecked {\r\n            requests[reqId].delay = _now() + (_delayInHours * 1 hours);\r\n            \r\n        }\r\n        address caller = _msgSender();\r\n        requests[reqId].executors.push(caller);\r\n        signed[caller][reqId] = true;\r\n\r\n        emit Requested(reqId, caller);\r\n    }\r\n\r\n    function _now() internal view returns(uint64) {\r\n        return uint64(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Sign transactions\r\n     * @param reqId : Request Id.\r\n     * Note: Caller must be one of the signers\r\n     */\r\n    function signTransaction(uint reqId) \r\n        public \r\n        onlySigner\r\n        validateRequestId(reqId)\r\n        whenNotSign(reqId)\r\n    {\r\n        Request memory req = requests[reqId];\r\n        _whenStatus(req, Status.INITIATED, \"Trxn must be initiated\");\r\n        uint currentSigners = req.executors.length;\r\n        require(currentSigners < quorum, \"Signers complete\");\r\n        address caller = _msgSender();\r\n        requests[reqId].executors.push(caller);\r\n        signed[caller][reqId] = true;\r\n        if((currentSigners + 1) == quorum) {\r\n            requests[reqId].status = Status.PENDING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Executes pending transaction.\r\n     * @param reqId : Request Id\r\n     * Transaction must be pending in status. When moved to executed, \r\n     * they have no way to be restored.\r\n     * Only signer accounts can call.\r\n     */\r\n    function executeTransaction(uint reqId) public onlySigner validateRequestId(reqId) nonReentrant {\r\n        Request memory req = requests[reqId];\r\n        _whenStatus(req, Status.PENDING, \"Trxn must be initiated\");\r\n        if(_now() < req.delay) revert Pending();\r\n        requests[reqId].status = Status.EXECUTED;\r\n        if(req.txType == Type.ERC20) {\r\n            address(token).cannotBeEmptyAddress();\r\n            token.safeTransfer(req.recipient, req.amount);\r\n        } else if(req.txType == Type.NATIVE) {\r\n            uint256 balance = address(this).balance;\r\n            if(balance < req.amount) revert InsufficientBalance(balance);\r\n            (bool success,) = req.recipient.call{value: req.amount}(\"\");\r\n            require(success,\"Trxn failed\");\r\n        } else if(req.txType == Type.ADDSIGNER) {\r\n            req = requests[reqId];\r\n            delete requests[reqId];\r\n            _addSigner(req.recipient);\r\n        } else if(req.txType == Type.REMOVESIGNER) {\r\n            req = requests[reqId];\r\n            delete requests[reqId];\r\n            _removeSigner(req.recipient);\r\n        } else if(req.txType == Type.SETQUORUM) {\r\n            quorum = req.amount;\r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n     * @dev Remove a signer from the list\r\n     */\r\n    function _removeSigner(address account) private {\r\n        signers[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a signer to the list\r\n     */\r\n    function _addSigner(address account) private {\r\n        signers[account] = true;\r\n        executors.push(account);\r\n    }\r\n\r\n    /**\r\n        @dev Return request struct at the reqId ref.\r\n     */\r\n    function getTransactionRequest(uint reqId) public view returns(Request memory req) {\r\n        return requests[reqId];\r\n    }\r\n\r\n    // function deposit() public payable {\r\n    //     require(msg.value > 0, \"000/\");\r\n    // }\r\n\r\n    function getExecutors() public view returns(address[] memory) {\r\n        return executors;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/implementations/token/TokenInteractor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner, IOwnerShip } from \"../../abstracts/OnlyOwner.sol\";\r\nimport { SafeERC20 } from \"./SafeERC20.sol\";\r\nimport { Lib } from \"./ERC20Abstract.sol\";\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\n\r\nabstract contract TokenInteractor is OnlyOwner {\r\n  using Lib for *;\r\n  using SafeERC20 for IERC20;\r\n\r\n  IERC20 public token;\r\n\r\n  ///@dev Contract accepts platform coin\r\n  receive () external payable {\r\n    revert(\"NA\");\r\n  } \r\n\r\n  constructor(IOwnerShip _ownershipManager) OnlyOwner(_ownershipManager) { }\r\n\r\n  function setToken(IERC20 newToken) public onlyOwner {\r\n    address(newToken).cannotBeEmptyAddress();\r\n    token = newToken;\r\n  }\r\n\r\n  ///@dev Transfer Token to @param account : Token recipient\r\n  function transferToken(address account, uint amount) public onlyOwner {\r\n    token.safeTransfer(account, amount);\r\n  }\r\n\r\n  ///@dev Batch tranfer: Sends token to many addresses\r\n  function batchTransfer(address[] memory accounts, uint256[] memory amounts) public onlyOwner {\r\n    token.safeBatchTransfer(accounts, amounts);\r\n  }\r\n\r\n  ///@dev Locks certain amount i.e Move from private ledger to the regular balance\r\n  function lockToken(address _routeTo, uint256 amount) public onlyOwner {\r\n    token.safeLock(_routeTo, amount);\r\n  }\r\n\r\n  ///@dev Unlocks certain amount i.e Move from private ledger to the regular balance\r\n  function unlockToken(uint256 amount) public onlyOwner {\r\n    token.safeUnlock(amount);\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/libraries/FactoryLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\n// import \"hardhat/console.sol\";   // For debugging only\r\nimport { SafeMath } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\";\r\nimport { Counters } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\";\r\nimport { IERC20 } from \"../apis/IERC20.sol\";\r\nimport { IBankFactory } from \"../apis/IBankFactory.sol\";\r\nimport { IBank } from \"../apis/IBank.sol\";\r\nimport { IFactory } from \"../apis/IFactory.sol\";\r\nimport { Common } from \"../apis/Common.sol\";\r\nimport { AssetClass, IAssetClass } from \"../implementations/AssetClass.sol\";\r\nimport { Utils } from \"../libraries/Utils.sol\";\r\n// import { IAssetClass } from \"../apis/IAssetClass.sol\";\r\n\r\n/**@dev\r\n  * @param amountExist: Tracks unit contribution i.e values created in each permissionless communities\r\n  * @param pools: Mapping of unitIds to Pool\r\n  * @param pData: Public State variable stats\r\n  * @param epoches : Total pool created to date\r\n  * @param contributors : Mapping of unitIds to group of contributors\r\n  * @param slots : Reverse map of contributors to unitId to slots on the list.\r\n    \r\n  @param indexes: Each amount is mapped to an index. These indexes are used to retrieve the corresponding Amount struct from the 'amount' storage\r\n  * \r\n*/\r\nstruct Data {\r\n  Counters.Counter epoches;\r\n\r\n  Counters.Counter cSlots;\r\n\r\n  Counters.Counter pastEpoches;\r\n\r\n  IFactory.ContractData pData;\r\n\r\n  mapping(uint => Common.Contributor[]) cData;\r\n\r\n  mapping(uint256 => uint) indexes; // For every unit amount of contribution, there is a corresponding index for retrieving data from the storage.\r\n\r\n  mapping(uint => Common.Pool) records; // Past transactions i.e Ended or Canceled pools \r\n\r\n  mapping(uint => Common.Pool) current; // Mapping of unitId to Pool\r\n  \r\n  mapping(address => Common.Point) points;\r\n\r\n  mapping(address => mapping(uint256 => Common.Slot)) slots;\r\n}\r\n\r\nstruct Def {\r\n  bool t;\r\n  bool f;\r\n  uint8 zero;\r\n  uint8 one;\r\n  address zeroAddr;\r\n}\r\n\r\nlibrary FactoryLib {\r\n  using Utils for *;\r\n  using SafeMath for uint256;\r\n  using Counters for Counters.Counter;\r\n\r\n  /**\r\n   * @dev Verifiy that status is already initialized\r\n  */\r\n  function _isValidUnit(Data storage self, uint256 unit) internal view {\r\n    require( _isInitialized(self.indexes[unit]), 'Amount not initialized');\r\n  }\r\n\r\n  /**\r\n   * @dev Ensure that unit contribution is active.\r\n   * Every unit contribution has a corresponding and unique id called unitId.\r\n   * When a unitId equals zero mean it is not active\r\n   */\r\n  function _isInitialized(uint unitId) internal pure returns(bool result){\r\n    result = unitId > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Verifiy that unit contribution is not initialized, then intialize it.\r\n   * @notice We preserve the first slot at self.current[0] for future use.\r\n  */\r\n  function _getUnitId(Data storage self, uint256 unit) internal returns(uint uId, uint rId, bool initialized) {\r\n    (uId, rId, initialized) = (self.indexes[unit], 0, _isInitialized(uId));\r\n    if(!initialized){\r\n      self.epoches.increment();\r\n      self.pastEpoches.increment();\r\n      self.indexes[unit] = uId;\r\n      (uId, rId) = (self.epoches.current(), self.pastEpoches.current());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the corresponding index for a unit amount of contribution from storage\r\n  */\r\n  function _getCurrentPool(Data storage self, uint256 unit) internal view returns(Common.GetPoolResult memory result) {\r\n    result.uId = self.indexes[unit];\r\n    result.data = self.current[result.uId];\r\n  }\r\n\r\n  /**\r\n   * @dev Check that user has given enough approval to spend from their balances\r\n   * @param user : Caller.\r\n   * @param asset : ERC20 currency address to use as contribution base.\r\n   * @param value : Contribution per user.\r\n  */\r\n  function _validateAndWithdrawAllowance(\r\n    address user, \r\n    address asset, \r\n    uint value,\r\n    address to\r\n  ) \r\n    internal \r\n    returns(uint allowance)\r\n  {\r\n    allowance = IERC20(asset).allowance(user, address(this));\r\n    if(allowance < value) revert Common.InsufficientAllowance();\r\n    if(!IERC20(asset).transferFrom(user, to, value)) revert Common.TransferFailed();\r\n  }\r\n\r\n  function _addUpToSafe(address safe, address user, uint rId) internal {\r\n    IBank(safe).addUp(user, rId);\r\n  }\r\n\r\n  /**\r\n   * @dev Create a fresh pool\r\n   * @param self: Storage of type `Data`\r\n   * @param cpp: This is a struct of data much like an object. We use it to compress a few parameters\r\n   *              instead of overloading _createPool.\r\n   * @notice cSlot is the position where the contibutors for the current unit is stored.\r\n   *          Anytime we created a pool, a record is known in advance i.e. a slot is created in advance for the it. This is where the pool\r\n   *          is moved when it is finalized.\r\n   * \r\n   *          - We removed collateral coverage check so as to enable more flexible tuning and customization. Example: Bob, Alice and Kate agreed\r\n   *            to operate a flexpool of unit $100 at zero collateral index. So Bob creates a flexpool of $100 setting quorum to maximum 3 participants.\r\n   *            He set colCoverage to 0. If particapant A wants to get finance, they will be required to provide (collateralCalculor * 0) which is 0\r\n   *            in order to get finance.\r\n  */   \r\n  function _createPool(\r\n    Data storage self,\r\n    Common.CreatePoolParam memory cpp,\r\n    address safe,\r\n    address user,\r\n    Common.Router router\r\n  ) \r\n    private \r\n    returns(Common.Pool memory _p) \r\n  {\r\n    Def memory _d = _defaults();\r\n    // bool(cpp.colCoverage >= 100).assertTrue(\"Col coverage is too low\");\r\n    Utils.assertTrue_2(cpp.duration > _d.zero, cpp.duration <= 720, \"Invalid duration\"); // 720hrs = 30 days.\r\n    _awardPoint(self.points, user, _d.t);\r\n    self.cSlots.increment();\r\n    (, uint rId, bool initialized) = _getUnitId(self, cpp.unit);\r\n    if(initialized) revert Common.UnitIsTaken();\r\n    _p = _updatePoolSlot(self, cpp, safe, router);\r\n    _callback(self, _p, rId);\r\n    if(!IBank(safe).addUp(user, rId)) revert Common.SafeAddupFailed();\r\n    _validateAndWithdrawAllowance(user, cpp.asset, cpp.unit, safe);\r\n  }\r\n\r\n  function _defaults()\r\n    internal \r\n    pure \r\n    returns(Def memory) \r\n  {\r\n    return Def(true, false, 0, 1, address(0));\r\n  }\r\n\r\n  ///@dev Returns current timestamp (unix).\r\n  function _now() \r\n    internal \r\n    view returns (uint) \r\n  {\r\n    return block.timestamp;\r\n  }\r\n\r\n  /**\r\n   * @dev Initializes the slot for the pool user intend to create.\r\n   * @notice To maintain storage orderliness especially when an epoch has ended and we need to \r\n   * keep record of the pool, we create a slot ahead for the initialized pool so we can move current\r\n   * pool to it when it is finalized.\r\n   */\r\n  function _initializePool(\r\n    Data storage self,\r\n    Common.CreatePoolParam memory cpp,\r\n    Common.Interest memory itr,\r\n    address safe,\r\n    uint24 durInSec,\r\n    Common.Router router\r\n  ) internal view returns(Common.Pool memory _p) {\r\n    Def memory _d = _defaults();\r\n    uint cSlot = self.cSlots.current();\r\n    _p.lInt = Common.LInt(cpp.quorum, _d.zero, cpp.colCoverage, durInSec, cpp.intRate, cSlot, _d.zero, _p.lInt.userCount);\r\n    _p.bigInt = Common.BigInt(cpp.unit, cpp.unit, self.pastEpoches.current());\r\n    _p.addrs = Common.Addresses(cpp.asset, _d.zeroAddr, safe, cpp.members[0]);\r\n    _p.router = router;\r\n    _p.interest = itr;\r\n    _p.stage = Common.Stage.JOIN;\r\n  }\r\n\r\n  /*** @dev Update the storage with pool information\r\n   * @param self: Storage of type `Data`\r\n   * @param cpp: This is a struct of data much like an object. We use it to compress a few parameters\r\n   *              instead of overloading _createPool.\r\n   * @param uId: Unit Id ref/index in storage.\r\n   * @param safe: Strategy contract.\r\n   */\r\n  function _updatePoolSlot(\r\n    Data storage self,\r\n    Common.CreatePoolParam memory cpp,\r\n    address safe,\r\n    Common.Router router \r\n  ) \r\n    internal view returns(Common.Pool memory _p)\r\n  {\r\n    uint24 durInSec = _convertDurationToSec(uint16(cpp.duration));\r\n    _p = _initializePool(\r\n      self, \r\n      cpp, \r\n      cpp.unit.mul(cpp.quorum).computeInterestsBasedOnDuration(cpp.intRate, durInSec), \r\n      safe, \r\n      durInSec, \r\n      router\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Update storage\r\n   */\r\n  function _callback(Data storage self, Common.Pool memory pool, uint uId) private {\r\n    self.current[uId] = pool;\r\n  }\r\n\r\n  /**@dev Create permissioned band\r\n   * @param self: Storage of type `Data`.\r\n   * @param cpp : Parameter struct\r\n   * Note: Each of the addresses on the members array must an Account instance. Participants must already own an\r\n   * account before now otherwise, execution will not pass.\r\n   * - Admin cannot replicate themselves in a band.\r\n   * - Each of the contributors must have created account before now.\r\n   * - We assume admin should be address in first slot in the members array, so expression evaluates to `if not admin`.\r\n   */\r\n  function createPermissionedPool(\r\n    Data storage self,\r\n    Common.CreatePoolParam memory cpp\r\n  ) \r\n    internal\r\n    returns (Common.Pool memory _p) \r\n  {\r\n    Def memory _d = _defaults();\r\n    address safe = _fetchAndValidateSafe(cpp.unit, self.pData.safeFactory);\r\n    for(uint i = _d.zero; i < cpp.members.length; i++) {\r\n      address user = cpp.members[i];\r\n      if(i == _d.zero) {\r\n        _p = _createPool(self, cpp, safe, user, Common.Router.PERMISSIONED);\r\n        _addNewContributor(self, _p.lInt.cSlot, _p.bigInt.unit, user, _d.t, _d.t, _d.t);\r\n      } else {\r\n        bool(user != _p.addrs.admin).assertTrue(\"Admin spotted twice\");\r\n        _addNewContributor(self, _p.lInt.cSlot, _p.bigInt.unit, user, _d.f, _d.t, _d.f);\r\n        _p = _getCurrentPool(self, _p.bigInt.unit).data; \r\n      } \r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return safe for user\r\n   * @param safeFactory: StrategyManager contract address\r\n   * @param unit : Caller\r\n   */\r\n  function _getSafe(\r\n    address safeFactory, \r\n    uint256 unit\r\n  ) \r\n    internal \r\n    view\r\n    returns(address _safe) \r\n  {\r\n    _safe = IBankFactory(safeFactory).getBank(unit);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks, validate and return safe for the target address.\r\n   * @param unit : Unit contribution.\r\n   * @param safeFactory : StrategyManager contract address.\r\n   */\r\n  function _fetchAndValidateSafe(\r\n    uint256 unit,\r\n    address safeFactory\r\n  ) \r\n    private \r\n    returns(address safe) \r\n  {\r\n    safe = _getSafe(safeFactory, unit);\r\n    if(safe == address(0)) {\r\n      safe = IBankFactory(safeFactory).createBank(unit);\r\n    }\r\n    assert(safe != address(0));\r\n  }\r\n\r\n    /**\r\n   * @dev Add new member to the pool\r\n   * Note: `target` is expected to be an instance of the `SmartBank`\r\n   */\r\n  function _addNewContributor(\r\n    Data storage self, \r\n    uint cSlot, \r\n    uint256 unit,\r\n    address user,\r\n    bool isAdmin,\r\n    bool isMember,\r\n    bool sentQuota                                                                                                                                                                              \r\n  ) \r\n    private \r\n  {\r\n    uint8 pos = uint8(self.cData[cSlot].length);\r\n    self.cData[cSlot].push(); \r\n    self.slots[user][unit] = Common.Slot(pos, isMember, isAdmin);\r\n    self.cData[cSlot][pos] = Common.Contributor(0, 0, 0, 0, 0, 0, user, sentQuota, 0);\r\n    // self.current[_getIndex(self.indexes, unit)].lInt.userCount ++;\r\n    (uint uId,,) = _getUnitId(self, unit);\r\n    self.current[uId].lInt.userCount ++;\r\n  }\r\n\r\n  /**@dev Update contributor's data\r\n    @param self : Storage of type mapping\r\n    @param up : Parameters\r\n   */\r\n  function _updateUserData(\r\n    Data storage self, \r\n    Common.UpdateUserParam memory up\r\n  )\r\n    private \r\n  {\r\n    self.cData[up.cSlot][up.slot.value] = up.cData;\r\n    self.slots[up.user][up.unit] = up.slot;\r\n  }\r\n\r\n  ///@dev Award points to user based on contribution\r\n  function _awardPoint(mapping(address => Common.Point) storage self, address user, bool isCreator) internal {\r\n    isCreator? self[user].creator += 5 : self[user].contributor += 2;\r\n  }\r\n\r\n  /**@dev Ruturn provider's info\r\n    @param self : Storage of type Common.Contributor\r\n   */\r\n  function _getProfile(\r\n    Data storage self,\r\n    uint unit,\r\n    address user\r\n  ) \r\n    internal \r\n    view \r\n    returns(Common.Contributor memory cbt) \r\n  {\r\n    Common.Slot memory uSlot = self.slots[user][unit];\r\n    uint cSlot = _getCurrentPool(self, unit).data.lInt.cSlot;\r\n    if(self.cData[cSlot].length > 0){\r\n      cbt = self.cData[cSlot][uSlot.value];\r\n    } else {\r\n      cbt = Common.Contributor(0, 0, 0, 0, 0, 0, address(0), false, 0);\r\n    }\r\n  }\r\n\r\n  /**@dev Creates a new permissionless community i.e public\r\n   * @param self: Storage of type `Data`\r\n   * @param cpp: This is a data struct. We use it to compress a few parameters\r\n   *              instead of overloading _createPool.\r\n   * Note: Only in private bands we mandated the selected contribution value does not exist.\r\n   *       This is to ensure orderliness in the system, timeliness, and efficiency.\r\n   */\r\n  function createPermissionlessPool( \r\n    Data storage self, \r\n    Common.CreatePoolParam memory cpp\r\n  )\r\n    internal\r\n    returns (Common.Pool memory _p)\r\n  {\r\n    Def memory _d = _defaults();\r\n    address user = cpp.members[0];\r\n    address safe = _fetchAndValidateSafe(cpp.unit, self.pData.safeFactory);\r\n    _p = _createPool(self, cpp, safe, user, Common.Router.PERMISSIONLESS);\r\n    _addNewContributor(self, _p.lInt.cSlot, _p.bigInt.unit, user, _d.t, _d.t, _d.t);\r\n  }\r\n\r\n  /**@dev Add new contributor to a band.\r\n   * @param self: Storage ref of type Data.\r\n   * @param _ab: Parameters struct.\r\n   * @notice A contributor can occupy more than one spot.\r\n  */\r\n  function addToPool(\r\n    Data storage self,\r\n    Common.AddTobandParam memory _ab\r\n  )\r\n    internal\r\n    returns (\r\n      Common.Pool memory _p\r\n    ) \r\n  {\r\n    Def memory _d = _defaults();\r\n    _isValidUnit(self, _ab.unit);\r\n    _p = _getCurrentPool(self, _ab.unit).data;\r\n    address caller = _msgSender();\r\n    _validateStage(_p.stage, Common.Stage.JOIN, \"Cannot add contributor\");\r\n    if(_ab.isPermissioned) {\r\n      _mustBeAMember(self, _ab.unit, caller);\r\n      self.cData[_p.lInt.cSlot][_getSlot(self.slots, caller, _ab.unit).value].sentQuota = _d.t;\r\n    } else {\r\n      if(_p.lInt.userCount >= _p.lInt.quorum) revert Common.PoolIsFilled();\r\n      _mustNotBeAMember(self, _ab.unit, caller);\r\n      _addNewContributor(self, _p.lInt.cSlot, _ab.unit, caller, _d.f, _d.t, _d.t);\r\n      _p = _getCurrentPool(self, _ab.unit).data;\r\n    }\r\n    _p.bigInt.currentPool += _p.bigInt.unit;\r\n    if(_isPoolFilled(_p, _ab.isPermissioned)) {\r\n      self.cData[_p.lInt.cSlot][_p.lInt.selector].turnStartTime = _now();\r\n      _p = _setNextStage(_p, Common.Stage.GET);\r\n    }\r\n    _validateAndWithdrawAllowance(caller, _p.addrs.asset, _p.bigInt.unit, _p.addrs.bank);\r\n    _addUpToSafe(_p.addrs.bank, caller, _p.bigInt.recordId);\r\n    _callback(self, _p, self.indexes[_p.bigInt.unit]);\r\n  }\r\n\r\n  /**\r\n   * @dev Validate stage for invoked function.\r\n   */\r\n  function _validateStage(\r\n    Common.Stage expected, \r\n    Common.Stage actual, \r\n    string memory errorMessage\r\n  ) internal pure { \r\n    (expected == actual).assertTrue(errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev A Check to know if _msgSender() is a member of the band at unitId.\r\n   * @param self: Storage {typeof => mapping}\r\n   * @param unit: Unit contribution\r\n   * @param user: Contributor address\r\n  */\r\n  function _mustBeAMember(\r\n    Data storage self,\r\n    uint256 unit,\r\n    address user\r\n  ) \r\n    internal \r\n    view \r\n  {\r\n    if(!_getSlot(self.slots, user, unit).isMember) revert Common.NotAMember();\r\n  }\r\n\r\n  /**\r\n   * @dev Msg.sender must not be a member of the band at epoch Id before now.\r\n   * @param self: Storage {typeof mapping}\r\n   * @param unit: Unit contribution\r\n   * @param user : User\r\n  */\r\n  function _mustNotBeAMember(\r\n    Data storage self,\r\n    uint256 unit,\r\n    address user\r\n  ) \r\n    internal \r\n    view \r\n  {\r\n    _getSlot(self.slots, user, unit).isMember.assertFalse(\"User is already a member\");\r\n  }\r\n\r\n  /**@dev Check if pool is filled\r\n    * @dev Msg.sender must not be a member of the band at epoch Id before now.\r\n    * @param _p: Pool struct (Location: Memory)\r\n  */\r\n  function _isPoolFilled(Common.Pool memory _p, bool isPermissioned) \r\n    internal \r\n    pure\r\n    returns(bool filled) \r\n  {\r\n    uint expected = _p.bigInt.unit.mul(_p.lInt.quorum);\r\n    filled = !isPermissioned? _p.lInt.userCount == _p.lInt.quorum : expected == _p.bigInt.currentPool;\r\n  }\r\n\r\n  // /**@dev Update selector to who will get finance next\r\n  //   * @param self: Storage {typeof mapping}\r\n  //   * @param cSlot: Pool index.\r\n  //   * @param selector : Spot selector.\r\n  // */\r\n  // function _setTurnTime(\r\n  //   Data storage self, \r\n  //   uint selector, \r\n  //   uint cSlot\r\n  // ) \r\n  //   private\r\n  // {\r\n  //   self.cData[cSlot][selector].turnStartTime = _now();\r\n  // }\r\n\r\n  function getProfile(\r\n    Data storage self, \r\n    address user,\r\n    uint256 unit\r\n  ) \r\n    internal \r\n    view \r\n    returns(Common.Contributor memory) \r\n  {\r\n    _mustBeAMember(self, unit, user);\r\n    return _getProfile(self, unit, user);\r\n  }\r\n\r\n  /**@dev Get the slots of user with address and unitId\r\n    @param self : Storage of type mappping\r\n    @param user : User address\r\n   */\r\n  function _getSlot(\r\n    mapping(address =>mapping(uint256 => Common.Slot)) storage self, \r\n    address user, \r\n    uint256 unit\r\n  ) \r\n    internal \r\n    view \r\n    returns(Common.Slot memory slot) \r\n  {\r\n    slot = self[user][unit];\r\n  }\r\n\r\n  /**@dev Get finance: Sends current total contribution to the \r\n   * expected account and update respective accounts.\r\n    @param self : Storage of type Data.\r\n    @param unit : Contribution amount.\r\n    @param daysOfUseInHr : Number of days specified in hours after which \r\n                      the contributor shall return the borrowed fund.\r\n    @param getPriceOfCollateralToken : A function that returns the current price of XFI.\r\n  */\r\n  function getFinance(\r\n    Data storage self,\r\n    uint256 unit,\r\n    uint16 daysOfUseInHr,\r\n    function () internal returns(uint128) getPriceOfCollateralToken\r\n  ) \r\n    internal\r\n    returns(Common.Pool memory _p, uint256 amtFinanced, uint colDeposited)\r\n  {\r\n    _isValidUnit(self, unit);\r\n    _p = _getCurrentPool(self, unit).data;\r\n    amtFinanced = _p.bigInt.currentPool;\r\n    _validateStage(_p.stage, Common.Stage.GET, \"Borrow not ready\");\r\n    if(_p.lInt.allGh == _p.lInt.quorum) revert IFactory.AllMemberIsPaid();\r\n    _p = _incrementGF(_p);\r\n    if(_p.bigInt.currentPool < (_p.bigInt.unit.mul(_p.lInt.quorum))) revert Common.PoolNotComplete();\r\n    (_p, colDeposited) = _updateStorageAndCall(\r\n      self,\r\n      Common.UpdateMemberDataParam( \r\n        _convertDurationToSec(daysOfUseInHr), \r\n        self.cData[_p.lInt.cSlot][_p.lInt.selector].id,\r\n        unit,\r\n        self.indexes[unit],\r\n        _p.bigInt.currentPool.computeFee(self.pData.makerRate),\r\n        getPriceOfCollateralToken(),\r\n        _p\r\n      )\r\n    );\r\n    self.cData[_p.lInt.cSlot][_p.lInt.selector].getFinanceTime = _now();\r\n    _callback(self, _p, self.indexes[unit]);\r\n  }\r\n\r\n  /**@dev Increment allGh when one member get finance\r\n  */\r\n  function _incrementGF(\r\n   Common.Pool memory pool \r\n    // uint unitId\r\n  )  \r\n    internal\r\n    pure\r\n    returns(Common.Pool memory _p) \r\n  {\r\n    pool.lInt.allGh ++;\r\n    _p = pool;\r\n  }\r\n\r\n  /**\r\n   * @dev Validates duration selected by this contributor must not exceed the set duration.\r\n   * @param durInHrs : Duration set in hours.\r\n   */\r\n  function _convertDurationToSec(\r\n    uint16 durInHrs\r\n  ) \r\n    internal \r\n    pure\r\n    returns(uint24 durOfChoiceInSec) \r\n  {\r\n    durOfChoiceInSec = uint24(uint(durInHrs).mul(1 hours));\r\n  }\r\n\r\n  function _computeCollateral(\r\n    uint loanAmount,\r\n    uint24 ccr,\r\n    uint128 collateralTokenPrice,\r\n    uint8 colDecimals\r\n  )\r\n    internal\r\n    pure\r\n    returns(uint collateral)\r\n  { \r\n    collateral = Common.Price(collateralTokenPrice, colDecimals).computeCollateral(ccr, loanAmount);\r\n  }\r\n\r\n\r\n  /** \r\n    * @dev Update storage.\r\n    * Note: Priority is given to expected contributor. i.e the first to get finance.\r\n    * Irrespective of who _msgSender() is, consideration is given to\r\n    * expected user provided their time to get finance has not pass.\r\n    * If _msgSender() is not the contributor we're expecting and the time\r\n    * to get finance for the contributor has passed, we swap the whole\r\n    * process in favor of the actual caller provided the conditions are met.\r\n    * @param self: Storage.\r\n    * @param arg : Parameter of type Common.UpdateMemberDataParam\r\n    * Note: \r\n    *   slot = exp.slot;\r\n        If the caller is not the next on the queue to getfinance\r\n        and the time to get finance for the expected account has passed.\r\n      @notice Debt is not determined ahead. We do that at the point of paying back\r\n              since borrrowers decide when to return the borrowed fund so long it is not\r\n              greater than the duration set by the admin.\r\n      We will also not include the debt for the 'credit' parameter as stated in Strategy.setClaim\r\n      unless borrowers are returning the loan.\r\n\r\n      ASSUMPTION 1\r\n      ------------\r\n      Assuming 2 providers in a pool, if the first on the list with slot '0' failed to GF within the grace\r\n      period, the next provider can take over. When this happens, the slots and profile are swapped to \r\n      alow the serious one proceed to borrow. Slot 0 becomes 1 vice versa. This allows the defaulted \r\n      party another chance to GF since the ticker i.e 'pool.lInt.selector' waits for no one. It is always\r\n      incremented as long at the epoch is active. If the second slot also default, the any party in the pool\r\n      i.e Provider 1 can step in to GF. \r\n\r\n      ASSUMPTION 2\r\n      ------------\r\n      The case above is different where the number of providers exceeds 2. Since the selector goes forward, the \r\n      first one the list i.e admin is given priority to proceed to GF even after they defaulted. Since the admin\r\n      is 0, if they defaulted, slots greater than 0 can step in i.e from 1, 2, to 'n'. Admin slot is swapped for\r\n      higher slot.\r\n      If a defaulted slot is swapped for higher one, they have another chance to GF. But if a defaulted slot is \r\n      is swapped for the lower one, the only chance available to them is for the next GF to default so they can \r\n      hop in. \r\n      Irrespective of who defaults, the orderliness is preserved, And the defaulted must wait for the turn of the \r\n      new slot assigned to them. \r\n  */  \r\n  function _updateStorageAndCall(\r\n    Data storage self,\r\n    Common.UpdateMemberDataParam memory arg\r\n  ) \r\n    private\r\n    returns (Common.Pool memory _p, uint computedCol) \r\n  {\r\n    address caller = arg.expected;\r\n    Common.Contributor memory cbt = _getProfile(self, arg.unit, arg.expected); // Expected contributor\r\n    if(_now() > cbt.turnStartTime + 1 hours){\r\n      if(_msgSender() != arg.expected) {\r\n        caller = _msgSender();\r\n        _mustBeAMember(self, arg.unit, caller);\r\n        cbt = _swapFullProfile(self, Common.SwapProfileArg(_getSlot(self.slots, caller, arg.unit), arg.expected, caller, arg.unit, arg.pool.lInt.cSlot, cbt));\r\n      }\r\n    } else {\r\n      if(_msgSender() != cbt.id) revert Common.TurnTimeHasNotPassed();\r\n      // require(_msgSender() == cbt.id, \"Turn time has not passed\");\r\n    }\r\n    computedCol = _computeCollateral(arg.pool.bigInt.currentPool, uint24(arg.pool.lInt.colCoverage), arg.colPriceInDecimals, IERC20(self.pData.collateralToken).decimals());\r\n    arg.pool.addrs.lastPaid = caller;\r\n    arg.pool.lInt.selector ++;\r\n    _validateAndWithdrawAllowance(caller, address(self.pData.collateralToken), computedCol, arg.pool.addrs.bank);\r\n    Common.Contributor memory cData = Common.Contributor({\r\n      durOfChoice: arg.durOfChoice, \r\n      interestPaid: 0,\r\n      // expInterest: arg.pool.bigInt.currentPool.computeInterestsBasedOnDuration(uint16(arg.pool.lInt.intRate), uint24(arg.pool.lInt.duration) ,arg.durOfChoice).intPerChoiceOfDur,\r\n      paybackTime: _now().add(arg.durOfChoice),\r\n      turnStartTime: cbt.turnStartTime,\r\n      getFinanceTime: cbt.getFinanceTime,\r\n      loan: IBank(arg.pool.addrs.bank).getFinance(caller, arg.pool.addrs.asset, arg.pool.bigInt.currentPool, arg.fee, computedCol, arg.pool.bigInt.recordId),\r\n      colBals: computedCol,\r\n      id: caller,\r\n      sentQuota: cbt.sentQuota\r\n    });\r\n    _updateUserData(\r\n      self,\r\n      Common.UpdateUserParam(\r\n        cData,\r\n        _getSlot(self.slots, caller, arg.unit),\r\n        arg.pool.lInt.cSlot,\r\n        arg.unit,\r\n        caller\r\n      )\r\n    );\r\n    arg.pool.stage = Common.Stage.PAYBACK;\r\n    arg.pool.bigInt.currentPool = _defaults().zero;\r\n    _p = arg.pool;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the caller identifier from the msg object \r\n   * Gas-saving\r\n   */\r\n  function _msgSender() internal view returns(address _sender) {\r\n    _sender = msg.sender;\r\n  }\r\n\r\n  \r\n  /**\r\n   * @dev Swaps slot if the calling address is different from the expected contributor.\r\n   * The assumption is that profile data of contributors who are yet to get finance\r\n   * are identical except if the expected address is an admin which makes it easier for us to swap profile data.\r\n   * @param self: Storage ref of type `Data`.\r\n   * @param sw: Parameters.\r\n   * @notice Defaulted address will not be taken out. In this case, we move them backward. \r\n   *          The worse that could happen to them is to them is for someone else to occupy their slot. \r\n   */\r\n\r\n  function _swapFullProfile(\r\n    Data storage self,\r\n    Common.SwapProfileArg memory sw\r\n  )\r\n    private \r\n    returns(Common.Contributor memory aCData) \r\n  {\r\n    Common.Slot memory aSlot = _getSlot(self.slots, sw.actCaller, sw.unit);\r\n    aCData = _getProfile(self, sw.unit, sw.actCaller);\r\n    sw.expcData.id = sw.actCaller;\r\n    aCData.id = sw.expCaller;\r\n    _updateUserData(self, Common.UpdateUserParam (aCData,  aSlot, sw.cSlot, sw.unit, sw.expCaller));\r\n    _updateUserData(self, Common.UpdateUserParam (sw.expcData, sw.expSlot, sw.cSlot, sw.unit, sw.actCaller));\r\n    aCData = sw.expcData;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current stage of pool at unitId \r\n   */\r\n  function _getStage(\r\n    Common.Pool[] storage self, \r\n    uint unitId\r\n  ) internal view returns(Common.Stage stage) {\r\n    stage = self[unitId].stage;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the next stage of an epoch\r\n   */\r\n  function _setNextStage(\r\n    Common.Pool memory _p, \r\n    Common.Stage nextStage\r\n  ) internal pure returns(Common.Pool memory _p_) {\r\n    assert(uint8(nextStage) < 6);\r\n    _p.stage = nextStage;\r\n    _p_ = _p;\r\n  }\r\n\r\n  /**@dev Return accrued debt for user up to this moment.\r\n   * @param self : Storage\r\n   * @param unit : Contribution amount.\r\n   * @param user : Contributor.\r\n   * @notice This is the total accrued debt between the date user was paid and now.\r\n  */\r\n  function _getCurrentDebt(\r\n    Data storage self, \r\n    uint256 unit, \r\n    address user\r\n  ) \r\n    internal \r\n    view returns(Common.DebtReturnValue memory drv) \r\n  {\r\n    uint intPerSec = _getCurrentPool(self, unit).data.interest.intPerSec;\r\n    drv.pos = _getSlot(self.slots, user, unit).value;\r\n    Common.Contributor memory _cb = _getProfile(self, unit, user);\r\n    drv.debt = _cb.loan.add(intPerSec.mul(_now().sub(_cb.turnStartTime)));\r\n  }\r\n\r\n  function _clearDebt(Common.Contributor memory cData) internal pure returns(Common.Contributor memory _cData) {\r\n    cData.loan = 0;\r\n    cData.colBals = 0;\r\n    _cData = cData;\r\n  }\r\n\r\n  /**@dev Reset pool balances\r\n    @param _p: Pool (location type is memory)\r\n   */\r\n  function _replenishPoolBalance(Common.Pool memory _p) internal pure returns(Common.Pool memory _p_) {\r\n    _p.bigInt.currentPool = _p.bigInt.unit.mul(_p.lInt.quorum);\r\n    _p_ = _p;\r\n  }\r\n\r\n  \r\n  /**@dev Check if round is completed i.e all contributors have received finance\r\n  */\r\n  function _allHasGF(Common.Pool memory pool) internal pure returns(bool) {\r\n    return pool.lInt.allGh == pool.lInt.quorum;\r\n  }\r\n\r\n  function payback(Data storage self, Common.PaybackParam memory pb) internal returns(uint, uint, Common.Pool memory) {\r\n    return _payback(self, pb, false, address(0));\r\n  }\r\n\r\n  /**@dev Payback borrowed fund.\r\n   * @param self : Storage\r\n   * @param pb : Payback Parameters struct.\r\n  */\r\n  function _payback(\r\n    Data storage self,\r\n    Common.PaybackParam memory pb,\r\n    bool isSwapped,\r\n    address defaulted\r\n  )\r\n    internal\r\n    returns(uint amtPayBackInUSD, uint colWithdrawn, Common.Pool memory _p)\r\n  {\r\n    _isValidUnit(self, pb.unit);\r\n    _p = _getCurrentPool(self, pb.unit).data;\r\n    Common.Contributor memory _cData = _getProfile(self, pb.unit, pb.user);\r\n    _validateStage(_p.stage, Common.Stage.PAYBACK, \"Payback not ready\");\r\n    uint debt = _getCurrentDebt(self, pb.unit, pb.user).debt;\r\n    if(debt == 0) revert Common.NoDebtFound();\r\n    amtPayBackInUSD = _cData.loan;\r\n    colWithdrawn = _cData.colBals;\r\n    _cData = _clearDebt(_cData);\r\n    _awardPoint(self.points, pb.user, _defaults().f);\r\n    bool allGF = _allHasGF(_p);\r\n    if(!allGF){\r\n      _p = _replenishPoolBalance(_p);\r\n      _p = _setNextStage(_p, Common.Stage.GET);\r\n      self.cData[_p.lInt.cSlot][_p.lInt.selector].paybackTime = _now();\r\n      _callback(self, _p, self.indexes[pb.unit]);\r\n      self.cData[_p.lInt.cSlot][_getSlot(self.slots, pb.user, pb.unit).value] = _cData;\r\n    } else {\r\n      _p = _setNextStage(_p, Common.Stage.ENDED);\r\n      self.cData[_p.lInt.cSlot][_getSlot(self.slots, pb.user, pb.unit).value] = _cData;\r\n      _callback(self, _shuffle(self, _p), self.indexes[pb.unit]);\r\n    }\r\n    (address user, IERC20 colToken) = (pb.user, self.pData.collateralToken);\r\n    Common.Contributor[] memory cDatas = self.cData[_p.lInt.cSlot];\r\n    (bool _isSwapped, address _defaulted, uint rId) = (isSwapped, defaulted, _p.bigInt.recordId);\r\n    uint256 attestedInitialBal = IERC20(_p.addrs.asset).balanceOf(_p.addrs.bank);\r\n    _validateAndWithdrawAllowance(user, _p.addrs.asset, debt, _p.addrs.bank);\r\n    IBank(_p.addrs.bank).payback(Common.Payback_Bank(user, _p.addrs.asset, debt, attestedInitialBal, allGF, cDatas, _isSwapped, _defaulted, rId, colToken));\r\n  }\r\n\r\n  /**\r\n   * @dev Return struct object with data if current beneficiary has defaulted otherwise an empty struct is returned.\r\n   * @param self : Storage\r\n   * @param unit: Unit contribution\r\n   */\r\n  function _enquireLiquidation(\r\n    Data storage self, \r\n    uint256 unit\r\n  ) \r\n    internal \r\n    view \r\n    returns (Common.Contributor memory _liq, bool defaulted, uint currentDebt, Common.Slot memory slot, address defaulter) \r\n  {\r\n    Common.Pool memory _p = _getCurrentPool(self, unit).data;\r\n    Common.Contributor memory prof = _getProfile(self, unit, _p.addrs.lastPaid);\r\n    (_liq, defaulted, currentDebt, slot, defaulter)\r\n      = \r\n        _now() <= prof.paybackTime? \r\n          (_liq, defaulted, currentDebt, slot, defaulter) \r\n            : \r\n              ( \r\n                prof, \r\n                _defaults().t, \r\n                _getCurrentDebt( self, unit, _liq.id).debt, \r\n                self.slots[prof.id][unit],\r\n                prof.id\r\n              );\r\n  }\r\n\r\n  /**\r\n    @dev Liquidates a borrower if they have defaulted in repaying their loan.\r\n      - If the current beneficiary defaults, they're liquidated.\r\n      - Their collateral balances is forwarded to the liquidator.\r\n      - Liquidator must not be a participant in pool at `unitId. We use this \r\n        to avoid fatal error in storage.\r\n    @param self : Storage ref.\r\n    @param unit : Unit contribution.\r\n  */\r\n  function liquidate(\r\n    Data storage self,\r\n    uint256 unit\r\n  ) \r\n    internal\r\n    returns(uint, uint, Common.Pool memory _p)\r\n  {\r\n    (Common.Contributor memory prof, bool defaulted,, Common.Slot memory slot, address defaulter) = _enquireLiquidation(self, unit);\r\n    if(!defaulted) revert Common.CurrentReceiverIsNotADefaulter();\r\n    address liquidator = _msgSender() ;\r\n    _mustNotBeAMember(self, unit, liquidator);\r\n    prof.id = liquidator;\r\n    _updateUserData(\r\n      self, \r\n      Common.UpdateUserParam(prof, slot, _getCurrentPool(self, unit).data.lInt.cSlot, unit, liquidator)\r\n    );\r\n    delete self.slots[defaulter][unit];\r\n    self.current[self.indexes[unit]].addrs.lastPaid = liquidator;\r\n    return _payback(self, Common.PaybackParam(unit, liquidator), true, defaulter);\r\n  }\r\n\r\n  /**\r\n   * @dev Shuffle between pools i.e moves a finalized pool to the records ledger.\r\n   * This action resets the data at 'uId' after moving it to records for viewing purpose.\r\n   */\r\n  function _shuffle(\r\n    Data storage self,\r\n    Common.Pool memory _p\r\n  ) internal returns(Common.Pool memory) {\r\n    self.records[_p.bigInt.recordId] = _p;\r\n  }\r\n\r\n  /**\r\n    @dev Cancels virgin band i.e Newly created band with only one contributor.\r\n      Only admin of a band can cancel only if no one has join the band.\r\n    @param self : Storage\r\n    @param unit : Unit contribution.\r\n    @param isPermissionLess : Whether band is public or not.\r\n\r\n    @notice : Setting the quorum to 0 is an indication that a pool was removed.\r\n  */\r\n  function removeLiquidity(\r\n    Data storage self,\r\n    uint256 unit,\r\n    bool isPermissionLess\r\n  ) \r\n    internal\r\n  {\r\n    _isValidUnit(self, unit);\r\n    Common.Pool memory _p = _getCurrentPool(self, unit).data;\r\n    address creator = _msgSender();\r\n    _isAdmin(self, unit, creator);\r\n    if(isPermissionLess) {\r\n      if(_p.lInt.userCount > 1 || _p.lInt.userCount < 1) revert Common.CancellationNotAllowed();\r\n    } else {\r\n      if(_p.bigInt.currentPool > _p.bigInt.unit) revert Common.CancellationNotAllowed();\r\n    }\r\n    _p.stage = Common.Stage.CANCELED;\r\n    _callback(self, _shuffle(self, _p), self.indexes[unit]);\r\n    IBank(_p.addrs.bank).cancel(creator, _p.addrs.asset, _p.bigInt.unit, _p.bigInt.recordId);\r\n  }\r\n\r\n  function _isAdmin(\r\n    Data storage self,\r\n    uint256 unit,\r\n    address user\r\n  ) \r\n    internal\r\n    view\r\n  {\r\n    if(!self.slots[user][unit].isAdmin) revert Common.OnlyAdminIsAllowed();\r\n  }\r\n\r\n  /** @dev Update Contract variables\r\n    * @param self : Storage. \r\n    * @param assetAdmin : Asset manager contract.\r\n    * @param feeTo : Fee receiver.\r\n    * @param makerRate : Service fee.\r\n   */\r\n  function setContractData(\r\n    Data storage self,\r\n    IAssetClass assetAdmin,\r\n    address feeTo,\r\n    uint16 makerRate,\r\n    address safeFactory,\r\n    IERC20 colToken\r\n  ) \r\n    internal \r\n    returns(bool)\r\n  {\r\n    if(address(assetAdmin) != address(0)) self.pData.assetAdmin = assetAdmin;\r\n    if(safeFactory != address(0)) self.pData.safeFactory = safeFactory;\r\n    if(address(colToken) != address(0)) self.pData.collateralToken = colToken;\r\n    if(feeTo != address(0)) self.pData.feeTo = feeTo;\r\n    if(makerRate < type(uint16).max) self.pData.makerRate = makerRate;\r\n    return true;\r\n  }\r\n\r\n  ///@dev Returns epoches\r\n  function getEpoches(Data storage self) internal view returns(uint epoches) {\r\n    epoches = self.epoches.current();\r\n  }\r\n\r\n  ///@dev Returns epoches\r\n  function getRecordEpoches(Data storage self) internal view returns(uint epoches) {\r\n    epoches = self.pastEpoches.current();\r\n  }\r\n\r\n  /// @dev Return pool using unitId. @notice The correct unitId must be parsed.\r\n  function getData(Data storage self, uint uId) internal view returns(Common.ReadDataReturnValue memory rd) {\r\n    rd.pool = self.current[uId];\r\n    rd.cData = self.cData[rd.pool.lInt.cSlot];\r\n  }\r\n\r\n  /// @dev Return past pools using unitId. @notice The correct unitId must be parsed.\r\n  function getRecord(Data storage self, uint rId) internal view returns(Common.ReadDataReturnValue memory rd) {\r\n    rd.pool = self.records[rId];\r\n    rd.cData = self.cData[rd.pool.lInt.cSlot];\r\n  } \r\n\r\n  function getPoints(Data storage self, address user) internal view returns(Common.Point memory point) {\r\n    point = self.points[user];\r\n  }\r\n\r\n  function getSlot(Data storage self, address user, uint256 unit) internal view returns(Common.Slot memory slot) {\r\n    slot = self.slots[user][unit];\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// if(uId == 0) {\r\n//       self.epoches.increment();\r\n//       uId = self.epoches.current();\r\n//       self.indexes[unit] = uId;\r\n//     }\r\n\r\n\r\n  // /**\r\n  //  * @dev Return the different balances locked in an epoch\r\n  //  * @param self : Data ref\r\n  //  * @param unit : Unit contribution\r\n  //  */\r\n  // function _getBalancesInBank(\r\n  //   Data storage self,\r\n  //   uint256 unit\r\n  // )\r\n  //   internal\r\n  //   view\r\n  //   returns(Common.Balances memory balances) \r\n  // {\r\n\r\n  //   _isValidUnit(self, unit);\r\n  //   Common.Addresses memory addrs = _getCurrentPool(self, unit).data.addrs;\r\n  //   if(addrs.asset == address(0)){\r\n  //     balances = Common.Balances({\r\n  //       xfi: 0,\r\n  //       erc20: 0\r\n  //     });\r\n  //   } else {\r\n  //     balances = Common.Balances({\r\n  //       xfi: addrs.bank.balance,\r\n  //       erc20: IERC20(addrs.asset).balanceOf(addrs.bank)\r\n  //     });\r\n  //   }\r\n  // }"
    },
    "contracts/libraries/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @title Lib : Non-deployable contract\r\n * @author Simplifi\r\n */\r\n\r\nlibrary Lib {\r\n  error AddressIsZero();\r\n  error InsufficientBalance(uint256, uint256);\r\n\r\n  /**\r\n   * @dev Ensures that parameter parsed cannot be empty\r\n   * @param _a : Parameter of type address\r\n   */\r\n  function cannotBeEmptyAddress(address _a) internal pure {\r\n    if(_a == address(0)) {\r\n      revert AddressIsZero();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Invoking this function ensures parameter 'a' is greater than 'b'\r\n   * @param _a : Parameter of type uint256\r\n   * @param _b : Parameter of type uint256\r\n   */\r\n  function mustBeAbove(uint256 _a, uint256 _b) internal pure {\r\n    if(_a < _b) revert InsufficientBalance(_a, _b);\r\n  }\r\n\r\n  /**\r\n   * @dev Condition parsed to this function must be true\r\n   * @param condition : Expected condition\r\n   * @param errorMessage : Error message to return when assertion failed\r\n   */\r\n  function yes(bool condition, string memory errorMessage) internal pure {\r\n    require(condition, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Condition parsed to this function must evaluate to false\r\n   * @param condition : Expected condition\r\n   * @param errorMessage : Error errorMto return when assertion failed\r\n   */\r\n  function no(bool condition, string memory errorMessage) internal pure {\r\n    require(!condition, errorMessage);\r\n  }\r\n}"
    },
    "contracts/libraries/SafeCallERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nlibrary SafeCallERC20 {\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    unchecked {\r\n      uint256 oldAllowance = token.allowance(address(this), spender);\r\n      require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n      uint256 newAllowance = oldAllowance - value;\r\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n  }\r\n\r\n  /** Imported from Openzeppelin\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data);\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation failed\");\r\n    }\r\n  }\r\n}"
    },
    "contracts/libraries/Utils.sol": {
      "content": "  // SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { SafeMath } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\";\r\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport { Common } from \"../apis/Common.sol\";\r\n\r\nlibrary Utils {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    error InsufficientCollateral(uint256 actual, uint256 expected);\r\n    error CollateralCoverageCannotGoBelow_100();\r\n    error InvalidDenominator(string message);\r\n\r\n    ///@dev Requires all conditions to be true \r\n    function assertTrue_2(bool a, bool b, string memory errorMessage) internal pure {\r\n        require(a && b, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires single condition to be true \r\n    function assertTrue(bool condition, string memory errorMessage) internal pure {\r\n        require(condition, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires conditions to be true \r\n    function assertFalse(bool condition, string memory errorMessage) internal pure {\r\n        require(!condition, errorMessage);\r\n    }\r\n\r\n    /**     @dev Calculation of percentage.\r\n        *   This is how we calculate percentage to arrive at expected value with \r\n        *   precision.\r\n        *   We choose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set \r\n        *   her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \r\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \r\n        *   zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\r\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\r\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \r\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\r\n        *   @param interest : Interest rate. \r\n        *   \r\n        *   Rules\r\n        *   -----\r\n        *   - Principal cannot be less than base.\r\n        *   - Interest cannot be greater than (2 ^ 16) - 1\r\n    */\r\n    function _getPercentage(\r\n        uint principal, \r\n        uint16 interest\r\n    )\r\n        internal \r\n        pure \r\n        returns (uint _return) \r\n    {\r\n        uint16 base = _getBase(); \r\n        if(interest == 0 || principal == 0) return 0;\r\n        assertTrue(interest < type(uint16).max, \"Interest overflow\");\r\n        assertTrue(principal > base, \"Principal should be greater than 10000\");\r\n        _return = principal.mul(interest).div(base);\r\n    }\r\n\r\n    /**\r\n     * Percentage base\r\n     */\r\n    function _getBase() internal pure returns(uint16 base) {\r\n        base = 10000;\r\n    }\r\n    \r\n    function _decimals(address asset) internal view returns(uint8 decimals) {\r\n        decimals = IERC20Metadata(asset).decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Computes collateral on the requested loan amount\r\n     * @param ccr : Collateral ratio. Must be multiply by 100 before parsing as input i.e if raw ccr\r\n     *              is 1.2, it should be rendered as 1.2 * 100 = 120.\r\n     * @param price : Price of Collateral token base with decimals.\r\n     * @param loanReqInDecimals : Total requested contribution in USD\r\n     * @notice Based on Simplifi mvp, loans are collaterized in XFI until we add more pairs\r\n     *         in the future.\r\n     * Example: Alice, Bob and Joe formed a band to contribute $100 each where duration is for \r\n     * 10 days each. Alice being the admin set ccr to 1.5 equivalent to 150% of the total sum \r\n     * contribution of $300. If the price of XFI as at the time of GF is $0.5/XFI, where XFI decimals\r\n     * is in 18, we calculate the required XFI to stake as follows:   \r\n     *  \r\n     *                    totalContribution *  (10** XFIdecimals)   |                 raw ccr\r\n     *   totalLoanInXFI = --------------------------------------    |    actualCCR = (1.5 * 100) * 100 = 1500\r\n     *                        (xfiPriceIndecimals)                  |\r\n     * \r\n     *                     totalLoanInXFI * actualCCR\r\n     *        XFINeeded = ----------------------------\r\n     *                             _getBase()\r\n     * \r\n     *  Therefore, Alice is required to stake 900XFI to GF $300 for 10 days.\r\n     *   \r\n     */\r\n    function computeCollateral(\r\n        Common.Price memory price,\r\n        uint24 ccr,\r\n        uint loanReqInDecimals\r\n    ) \r\n        internal\r\n        pure \r\n        returns(uint256 expCol) \r\n    {\r\n        uint8 minCCR = 100;\r\n        if(ccr < minCCR) revert CollateralCoverageCannotGoBelow_100();\r\n        uint48 _ccr = uint48(uint(ccr).mul(100));\r\n        uint totalLoan = loanReqInDecimals.mul(10**price.decimals).div(price.price);\r\n        expCol = totalLoan.mul(_ccr).div(_getBase());\r\n    }\r\n\r\n    /**\r\n        @dev Computes maker fee.\r\n        @param makerRate : The amount of fee (in %) charged by the platform on the principal given to a borrower.\r\n            Note : Raw rate must multiply by 100 to get the expected value i.e\r\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\r\n            See `_getPercentage()`.\r\n        @param amount should be in decimals.\r\n    */\r\n    function computeFee(\r\n        uint amount, \r\n        uint16 makerRate\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint mFee) \r\n    {\r\n        mFee = _getPercentage(amount, makerRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Compute interest based on specified rate.\r\n     * @param rate : Interest rate.\r\n     * @param principal : Total expected contribution.\r\n     * @param fullDurationInSec : Total duration.\r\n     * \r\n     * Rules\r\n     * -----\r\n     * - Duration cannot exceed 30days i.e 2592000 seconds uint24 seconds\r\n     */\r\n    function computeInterestsBasedOnDuration(\r\n        uint principal,\r\n        uint16 rate,\r\n        uint24 fullDurationInSec\r\n    )\r\n        internal \r\n        pure \r\n        returns(Common.Interest memory _itr) \r\n    {\r\n        Common.Interest memory it;\r\n        require(fullDurationInSec <= _maxDurationInSec(), \"Utils: FullDur or DurOfChoice oerflow\");\r\n        it.fullInterest = _getPercentage(principal, rate); // Full interest for fullDurationInSec\r\n        if(it.fullInterest > 0) {\r\n            it.intPerSec = it.fullInterest.mul(1).div(fullDurationInSec);\r\n        }\r\n        _itr = it; \r\n    }\r\n\r\n    /**\r\n     * @dev Max duration : 30Days, presented in seconds\r\n     */\r\n    function _maxDurationInSec() internal pure returns(uint24 max) {\r\n        max = 2592000;\r\n    }\r\n\r\n    function notZeroAddress(address target) internal pure {\r\n        require(target != address(0), \"Zero address\");\r\n    }\r\n\r\n    function _now() internal view returns(uint64 date) {\r\n        date = uint64(block.timestamp);\r\n    }\r\n\r\n}"
    },
    "contracts/peripherals/FuncHandler.sol": {
      "content": ""
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "constantinople",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}