/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Common {
  export type UintsStruct = {
    quorum: BigNumberish;
    selector: BigNumberish;
    ccr: BigNumberish;
    duration: BigNumberish;
  };

  export type UintsStructOutput = [
    quorum: bigint,
    selector: bigint,
    ccr: bigint,
    duration: bigint
  ] & { quorum: bigint; selector: bigint; ccr: bigint; duration: bigint };

  export type Uint256sStruct = {
    unit: BigNumberish;
    currentPool: BigNumberish;
  };

  export type Uint256sStructOutput = [unit: bigint, currentPool: bigint] & {
    unit: bigint;
    currentPool: bigint;
  };

  export type AddressesStruct = { asset: AddressLike; lastPaid: AddressLike };

  export type AddressesStructOutput = [asset: string, lastPaid: string] & {
    asset: string;
    lastPaid: string;
  };

  export type PoolStruct = {
    uints: Common.UintsStruct;
    uint256s: Common.Uint256sStruct;
    addrs: Common.AddressesStruct;
    allGh: BigNumberish;
  };

  export type PoolStructOutput = [
    uints: Common.UintsStructOutput,
    uint256s: Common.Uint256sStructOutput,
    addrs: Common.AddressesStructOutput,
    allGh: bigint
  ] & {
    uints: Common.UintsStructOutput;
    uint256s: Common.Uint256sStructOutput;
    addrs: Common.AddressesStructOutput;
    allGh: bigint;
  };

  export type StrategyInfoStruct = {
    isMember: boolean;
    isAdmin: boolean;
    payDate: BigNumberish;
    turnTime: BigNumberish;
    owings: BigNumberish;
    colBals: BigNumberish;
    hasGH: boolean;
    id: AddressLike;
  };

  export type StrategyInfoStructOutput = [
    isMember: boolean,
    isAdmin: boolean,
    payDate: bigint,
    turnTime: bigint,
    owings: bigint,
    colBals: bigint,
    hasGH: boolean,
    id: string
  ] & {
    isMember: boolean;
    isAdmin: boolean;
    payDate: bigint;
    turnTime: bigint;
    owings: bigint;
    colBals: bigint;
    hasGH: boolean;
    id: string;
  };

  export type LiquidationStruct = {
    position: BigNumberish;
    target: AddressLike;
    expectedRepaymentTime: BigNumberish;
    debt: BigNumberish;
    colBalInToken: BigNumberish;
  };

  export type LiquidationStructOutput = [
    position: bigint,
    target: string,
    expectedRepaymentTime: bigint,
    debt: bigint,
    colBalInToken: bigint
  ] & {
    position: bigint;
    target: string;
    expectedRepaymentTime: bigint;
    debt: bigint;
    colBalInToken: bigint;
  };
}

export interface AbstractRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPermissionedPool"
      | "createPermissionlessPool"
      | "creationFee"
      | "currentPoolId"
      | "enquireLiquidation"
      | "getFinance"
      | "getPoolData"
      | "getRouterWithPoolId"
      | "isFunctionCallable"
      | "joinBand"
      | "liquidate"
      | "minContribution"
      | "owner"
      | "pause"
      | "paused"
      | "payback"
      | "performSetUp"
      | "removeBand"
      | "renounceOwnership"
      | "setVariables"
      | "strategyAdmin"
      | "totalPool"
      | "transferOwnership"
      | "unpause"
      | "updateMinContributionAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllGh"
      | "BandCreated"
      | "Cancellation"
      | "GetFinanced"
      | "Liquidated"
      | "NewMemberAdded"
      | "OwnershipTransferred"
      | "Paused"
      | "Payback"
      | "Rekeyed"
      | "RoundUp"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPermissionedPool",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermissionlessPool",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enquireLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterWithPoolId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionCallable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinBand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minContribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performSetUp",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVariables",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMinContributionAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPermissionedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPermissionlessPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enquireLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFinance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterWithPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionCallable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinBand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performSetUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeBand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinContributionAmount",
    data: BytesLike
  ): Result;
}

export namespace AllGhEvent {
  export type InputTuple = [poolId: BigNumberish, pool: Common.PoolStruct];
  export type OutputTuple = [poolId: bigint, pool: Common.PoolStructOutput];
  export interface OutputObject {
    poolId: bigint;
    pool: Common.PoolStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BandCreatedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    pool: Common.PoolStruct,
    info: Common.StrategyInfoStruct,
    position: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    pool: Common.PoolStructOutput,
    info: Common.StrategyInfoStructOutput,
    position: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    pool: Common.PoolStructOutput;
    info: Common.StrategyInfoStructOutput;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancellationEvent {
  export type InputTuple = [poolId: BigNumberish];
  export type OutputTuple = [poolId: bigint];
  export interface OutputObject {
    poolId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GetFinancedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    info: Common.StrategyInfoStruct
  ];
  export type OutputTuple = [
    poolId: bigint,
    info: Common.StrategyInfoStructOutput
  ];
  export interface OutputObject {
    poolId: bigint;
    info: Common.StrategyInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    info: Common.StrategyInfoStruct
  ];
  export type OutputTuple = [
    poolId: bigint,
    info: Common.StrategyInfoStructOutput
  ];
  export interface OutputObject {
    poolId: bigint;
    info: Common.StrategyInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMemberAddedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    info: Common.StrategyInfoStruct
  ];
  export type OutputTuple = [
    poolId: bigint,
    info: Common.StrategyInfoStructOutput
  ];
  export interface OutputObject {
    poolId: bigint;
    info: Common.StrategyInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaybackEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    info: Common.StrategyInfoStruct
  ];
  export type OutputTuple = [
    poolId: bigint,
    info: Common.StrategyInfoStructOutput
  ];
  export interface OutputObject {
    poolId: bigint;
    info: Common.StrategyInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RekeyedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: AddressLike];
  export type OutputTuple = [arg0: string, arg1: string];
  export interface OutputObject {
    arg0: string;
    arg1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundUpEvent {
  export type InputTuple = [arg0: BigNumberish, arg1: Common.PoolStruct];
  export type OutputTuple = [arg0: bigint, arg1: Common.PoolStructOutput];
  export interface OutputObject {
    arg0: bigint;
    arg1: Common.PoolStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AbstractRouter extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractRouter;
  waitForDeployment(): Promise<this>;

  interface: AbstractRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPermissionedPool: TypedContractMethod<
    [
      durationInHours: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: AddressLike,
      participants: AddressLike[]
    ],
    [boolean],
    "payable"
  >;

  createPermissionlessPool: TypedContractMethod<
    [
      quorum: BigNumberish,
      durationInHours: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: AddressLike
    ],
    [boolean],
    "payable"
  >;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  currentPoolId: TypedContractMethod<[], [bigint], "view">;

  enquireLiquidation: TypedContractMethod<
    [poolId: BigNumberish],
    [Common.LiquidationStructOutput],
    "view"
  >;

  getFinance: TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;

  getPoolData: TypedContractMethod<
    [poolId: BigNumberish],
    [Common.PoolStructOutput],
    "view"
  >;

  getRouterWithPoolId: TypedContractMethod<
    [poolId: BigNumberish],
    [string],
    "view"
  >;

  isFunctionCallable: TypedContractMethod<
    [poolId: BigNumberish, functionSelector: BigNumberish],
    [string],
    "view"
  >;

  joinBand: TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;

  liquidate: TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;

  minContribution: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payback: TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;

  performSetUp: TypedContractMethod<
    [
      makerRate: BigNumberish,
      _minContribution: BigNumberish,
      _bandCreationFee: BigNumberish,
      _token: AddressLike,
      _feeTo: AddressLike,
      _assetAdmin: AddressLike,
      _strategyAdmin: AddressLike,
      _trustee: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  removeBand: TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVariables: TypedContractMethod<
    [
      token: AddressLike,
      trustee: AddressLike,
      assetAdmin: AddressLike,
      makerRate: BigNumberish,
      _creationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  strategyAdmin: TypedContractMethod<[], [string], "view">;

  totalPool: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateMinContributionAmount: TypedContractMethod<
    [newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPermissionedPool"
  ): TypedContractMethod<
    [
      durationInHours: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: AddressLike,
      participants: AddressLike[]
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createPermissionlessPool"
  ): TypedContractMethod<
    [
      quorum: BigNumberish,
      durationInHours: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: AddressLike
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentPoolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enquireLiquidation"
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [Common.LiquidationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFinance"
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "getPoolData"
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [Common.PoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRouterWithPoolId"
  ): TypedContractMethod<[poolId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isFunctionCallable"
  ): TypedContractMethod<
    [poolId: BigNumberish, functionSelector: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinBand"
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "minContribution"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payback"
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "performSetUp"
  ): TypedContractMethod<
    [
      makerRate: BigNumberish,
      _minContribution: BigNumberish,
      _bandCreationFee: BigNumberish,
      _token: AddressLike,
      _feeTo: AddressLike,
      _assetAdmin: AddressLike,
      _strategyAdmin: AddressLike,
      _trustee: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBand"
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVariables"
  ): TypedContractMethod<
    [
      token: AddressLike,
      trustee: AddressLike,
      assetAdmin: AddressLike,
      makerRate: BigNumberish,
      _creationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinContributionAmount"
  ): TypedContractMethod<[newAmount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AllGh"
  ): TypedContractEvent<
    AllGhEvent.InputTuple,
    AllGhEvent.OutputTuple,
    AllGhEvent.OutputObject
  >;
  getEvent(
    key: "BandCreated"
  ): TypedContractEvent<
    BandCreatedEvent.InputTuple,
    BandCreatedEvent.OutputTuple,
    BandCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Cancellation"
  ): TypedContractEvent<
    CancellationEvent.InputTuple,
    CancellationEvent.OutputTuple,
    CancellationEvent.OutputObject
  >;
  getEvent(
    key: "GetFinanced"
  ): TypedContractEvent<
    GetFinancedEvent.InputTuple,
    GetFinancedEvent.OutputTuple,
    GetFinancedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "NewMemberAdded"
  ): TypedContractEvent<
    NewMemberAddedEvent.InputTuple,
    NewMemberAddedEvent.OutputTuple,
    NewMemberAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Payback"
  ): TypedContractEvent<
    PaybackEvent.InputTuple,
    PaybackEvent.OutputTuple,
    PaybackEvent.OutputObject
  >;
  getEvent(
    key: "Rekeyed"
  ): TypedContractEvent<
    RekeyedEvent.InputTuple,
    RekeyedEvent.OutputTuple,
    RekeyedEvent.OutputObject
  >;
  getEvent(
    key: "RoundUp"
  ): TypedContractEvent<
    RoundUpEvent.InputTuple,
    RoundUpEvent.OutputTuple,
    RoundUpEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AllGh(uint256,tuple)": TypedContractEvent<
      AllGhEvent.InputTuple,
      AllGhEvent.OutputTuple,
      AllGhEvent.OutputObject
    >;
    AllGh: TypedContractEvent<
      AllGhEvent.InputTuple,
      AllGhEvent.OutputTuple,
      AllGhEvent.OutputObject
    >;

    "BandCreated(uint256,tuple,tuple,uint16)": TypedContractEvent<
      BandCreatedEvent.InputTuple,
      BandCreatedEvent.OutputTuple,
      BandCreatedEvent.OutputObject
    >;
    BandCreated: TypedContractEvent<
      BandCreatedEvent.InputTuple,
      BandCreatedEvent.OutputTuple,
      BandCreatedEvent.OutputObject
    >;

    "Cancellation(uint256)": TypedContractEvent<
      CancellationEvent.InputTuple,
      CancellationEvent.OutputTuple,
      CancellationEvent.OutputObject
    >;
    Cancellation: TypedContractEvent<
      CancellationEvent.InputTuple,
      CancellationEvent.OutputTuple,
      CancellationEvent.OutputObject
    >;

    "GetFinanced(uint256,tuple)": TypedContractEvent<
      GetFinancedEvent.InputTuple,
      GetFinancedEvent.OutputTuple,
      GetFinancedEvent.OutputObject
    >;
    GetFinanced: TypedContractEvent<
      GetFinancedEvent.InputTuple,
      GetFinancedEvent.OutputTuple,
      GetFinancedEvent.OutputObject
    >;

    "Liquidated(uint256,tuple)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "NewMemberAdded(uint256,tuple)": TypedContractEvent<
      NewMemberAddedEvent.InputTuple,
      NewMemberAddedEvent.OutputTuple,
      NewMemberAddedEvent.OutputObject
    >;
    NewMemberAdded: TypedContractEvent<
      NewMemberAddedEvent.InputTuple,
      NewMemberAddedEvent.OutputTuple,
      NewMemberAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Payback(uint256,tuple)": TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;
    Payback: TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;

    "Rekeyed(address,address)": TypedContractEvent<
      RekeyedEvent.InputTuple,
      RekeyedEvent.OutputTuple,
      RekeyedEvent.OutputObject
    >;
    Rekeyed: TypedContractEvent<
      RekeyedEvent.InputTuple,
      RekeyedEvent.OutputTuple,
      RekeyedEvent.OutputObject
    >;

    "RoundUp(uint256,tuple)": TypedContractEvent<
      RoundUpEvent.InputTuple,
      RoundUpEvent.OutputTuple,
      RoundUpEvent.OutputObject
    >;
    RoundUp: TypedContractEvent<
      RoundUpEvent.InputTuple,
      RoundUpEvent.OutputTuple,
      RoundUpEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
