/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "AbstractFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractFactory__factory>;
    getContractFactory(
      name: "DIAOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DIAOracleV2__factory>;
    getContractFactory(
      name: "IDIAOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDIAOracleV2__factory>;
    getContractFactory(
      name: "OnlyOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyOwner__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "Common",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Common__factory>;
    getContractFactory(
      name: "IAssetClass",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAssetClass__factory>;
    getContractFactory(
      name: "IBank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBank__factory>;
    getContractFactory(
      name: "IBankFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBankFactory__factory>;
    getContractFactory(
      name: "IDIAOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDIAOracleV2__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "IOwnerShip",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnerShip__factory>;
    getContractFactory(
      name: "ISimplifi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISimplifi__factory>;
    getContractFactory(
      name: "AssetClass",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetClass__factory>;
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "OwnerShip",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerShip__factory>;
    getContractFactory(
      name: "Simplifi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Simplifi__factory>;
    getContractFactory(
      name: "SimpliToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpliToken__factory>;
    getContractFactory(
      name: "Bank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bank__factory>;
    getContractFactory(
      name: "BankFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BankFactory__factory>;
    getContractFactory(
      name: "TestBaseAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBaseAsset__factory>;
    getContractFactory(
      name: "Attorney",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attorney__factory>;
    getContractFactory(
      name: "ERC20Abstract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Abstract__factory>;
    getContractFactory(
      name: "Escape",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Escape__factory>;
    getContractFactory(
      name: "Reserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reserve__factory>;
    getContractFactory(
      name: "TokenDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenDistributor__factory>;
    getContractFactory(
      name: "TokenInteractor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenInteractor__factory>;
    getContractFactory(
      name: "Lib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lib__factory>;
    getContractFactory(
      name: "Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utils__factory>;
    getContractFactory(
      name: "Analytics",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Analytics__factory>;
    getContractFactory(
      name: "Contributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Contributor__factory>;
    getContractFactory(
      name: "CreatePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreatePool__factory>;
    getContractFactory(
      name: "Point",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Point__factory>;
    getContractFactory(
      name: "Pools",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pools__factory>;
    getContractFactory(
      name: "RatesAndFeeTo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RatesAndFeeTo__factory>;
    getContractFactory(
      name: "Safe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Safe__factory>;
    getContractFactory(
      name: "TokensInUse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokensInUse__factory>;

    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "AbstractFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractFactory>;
    getContractAt(
      name: "DIAOracleV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DIAOracleV2>;
    getContractAt(
      name: "IDIAOracleV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDIAOracleV2>;
    getContractAt(
      name: "OnlyOwner",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyOwner>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "Common",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Common>;
    getContractAt(
      name: "IAssetClass",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAssetClass>;
    getContractAt(
      name: "IBank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBank>;
    getContractAt(
      name: "IBankFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBankFactory>;
    getContractAt(
      name: "IDIAOracleV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDIAOracleV2>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "IOwnerShip",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnerShip>;
    getContractAt(
      name: "ISimplifi",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISimplifi>;
    getContractAt(
      name: "AssetClass",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetClass>;
    getContractAt(
      name: "Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "OwnerShip",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerShip>;
    getContractAt(
      name: "Simplifi",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Simplifi>;
    getContractAt(
      name: "SimpliToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpliToken>;
    getContractAt(
      name: "Bank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Bank>;
    getContractAt(
      name: "BankFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BankFactory>;
    getContractAt(
      name: "TestBaseAsset",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBaseAsset>;
    getContractAt(
      name: "Attorney",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Attorney>;
    getContractAt(
      name: "ERC20Abstract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Abstract>;
    getContractAt(
      name: "Escape",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Escape>;
    getContractAt(
      name: "Reserve",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Reserve>;
    getContractAt(
      name: "TokenDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenDistributor>;
    getContractAt(
      name: "TokenInteractor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenInteractor>;
    getContractAt(
      name: "Lib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lib>;
    getContractAt(
      name: "Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Utils>;
    getContractAt(
      name: "Analytics",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Analytics>;
    getContractAt(
      name: "Contributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Contributor>;
    getContractAt(
      name: "CreatePool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CreatePool>;
    getContractAt(
      name: "Point",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Point>;
    getContractAt(
      name: "Pools",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pools>;
    getContractAt(
      name: "RatesAndFeeTo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RatesAndFeeTo>;
    getContractAt(
      name: "Safe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Safe>;
    getContractAt(
      name: "TokensInUse",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokensInUse>;

    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AbstractFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbstractFactory>;
    deployContract(
      name: "DIAOracleV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DIAOracleV2>;
    deployContract(
      name: "IDIAOracleV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDIAOracleV2>;
    deployContract(
      name: "OnlyOwner",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OnlyOwner>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "Common",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Common>;
    deployContract(
      name: "IAssetClass",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAssetClass>;
    deployContract(
      name: "IBank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBank>;
    deployContract(
      name: "IBankFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBankFactory>;
    deployContract(
      name: "IDIAOracleV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDIAOracleV2>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFactory>;
    deployContract(
      name: "IOwnerShip",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnerShip>;
    deployContract(
      name: "ISimplifi",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISimplifi>;
    deployContract(
      name: "AssetClass",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AssetClass>;
    deployContract(
      name: "Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Factory>;
    deployContract(
      name: "OwnerShip",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnerShip>;
    deployContract(
      name: "Simplifi",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Simplifi>;
    deployContract(
      name: "SimpliToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpliToken>;
    deployContract(
      name: "Bank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Bank>;
    deployContract(
      name: "BankFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BankFactory>;
    deployContract(
      name: "TestBaseAsset",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestBaseAsset>;
    deployContract(
      name: "Attorney",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Attorney>;
    deployContract(
      name: "ERC20Abstract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Abstract>;
    deployContract(
      name: "Escape",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Escape>;
    deployContract(
      name: "Reserve",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Reserve>;
    deployContract(
      name: "TokenDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenDistributor>;
    deployContract(
      name: "TokenInteractor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenInteractor>;
    deployContract(
      name: "Lib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lib>;
    deployContract(
      name: "Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Utils>;
    deployContract(
      name: "Analytics",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Analytics>;
    deployContract(
      name: "Contributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Contributor>;
    deployContract(
      name: "CreatePool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreatePool>;
    deployContract(
      name: "Point",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Point>;
    deployContract(
      name: "Pools",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pools>;
    deployContract(
      name: "RatesAndFeeTo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RatesAndFeeTo>;
    deployContract(
      name: "Safe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Safe>;
    deployContract(
      name: "TokensInUse",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokensInUse>;

    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AbstractFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbstractFactory>;
    deployContract(
      name: "DIAOracleV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DIAOracleV2>;
    deployContract(
      name: "IDIAOracleV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDIAOracleV2>;
    deployContract(
      name: "OnlyOwner",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OnlyOwner>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "Common",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Common>;
    deployContract(
      name: "IAssetClass",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAssetClass>;
    deployContract(
      name: "IBank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBank>;
    deployContract(
      name: "IBankFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBankFactory>;
    deployContract(
      name: "IDIAOracleV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDIAOracleV2>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFactory>;
    deployContract(
      name: "IOwnerShip",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnerShip>;
    deployContract(
      name: "ISimplifi",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISimplifi>;
    deployContract(
      name: "AssetClass",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AssetClass>;
    deployContract(
      name: "Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Factory>;
    deployContract(
      name: "OwnerShip",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnerShip>;
    deployContract(
      name: "Simplifi",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Simplifi>;
    deployContract(
      name: "SimpliToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpliToken>;
    deployContract(
      name: "Bank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Bank>;
    deployContract(
      name: "BankFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BankFactory>;
    deployContract(
      name: "TestBaseAsset",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestBaseAsset>;
    deployContract(
      name: "Attorney",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Attorney>;
    deployContract(
      name: "ERC20Abstract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Abstract>;
    deployContract(
      name: "Escape",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Escape>;
    deployContract(
      name: "Reserve",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Reserve>;
    deployContract(
      name: "TokenDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenDistributor>;
    deployContract(
      name: "TokenInteractor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenInteractor>;
    deployContract(
      name: "Lib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lib>;
    deployContract(
      name: "Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Utils>;
    deployContract(
      name: "Analytics",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Analytics>;
    deployContract(
      name: "Contributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Contributor>;
    deployContract(
      name: "CreatePool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreatePool>;
    deployContract(
      name: "Point",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Point>;
    deployContract(
      name: "Pools",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pools>;
    deployContract(
      name: "RatesAndFeeTo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RatesAndFeeTo>;
    deployContract(
      name: "Safe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Safe>;
    deployContract(
      name: "TokensInUse",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokensInUse>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
