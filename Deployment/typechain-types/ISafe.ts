/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISafe {
  export type ViewDataStruct = {
    totalClients: BigNumberish;
    aggregateFee: BigNumberish;
  };

  export type ViewDataStructOutput = [
    totalClients: bigint,
    aggregateFee: bigint
  ] & { totalClients: bigint; aggregateFee: bigint };
}

export declare namespace Common {
  export type ContributorStruct = {
    paybackTime: BigNumberish;
    turnStartTime: BigNumberish;
    getFinanceTime: BigNumberish;
    loan: BigNumberish;
    colBals: BigNumberish;
    id: AddressLike;
    sentQuota: boolean;
  };

  export type ContributorStructOutput = [
    paybackTime: bigint,
    turnStartTime: bigint,
    getFinanceTime: bigint,
    loan: bigint,
    colBals: bigint,
    id: string,
    sentQuota: boolean
  ] & {
    paybackTime: bigint;
    turnStartTime: bigint;
    getFinanceTime: bigint;
    loan: bigint;
    colBals: bigint;
    id: string;
    sentQuota: boolean;
  };

  export type Payback_SafeStruct = {
    user: AddressLike;
    baseAsset: AddressLike;
    debt: BigNumberish;
    attestedInitialBal: BigNumberish;
    allGF: boolean;
    cData: Common.ContributorStruct[];
    isSwapped: boolean;
    defaulted: AddressLike;
    recordId: BigNumberish;
    collateralAsset: AddressLike;
  };

  export type Payback_SafeStructOutput = [
    user: string,
    baseAsset: string,
    debt: bigint,
    attestedInitialBal: bigint,
    allGF: boolean,
    cData: Common.ContributorStructOutput[],
    isSwapped: boolean,
    defaulted: string,
    recordId: bigint,
    collateralAsset: string
  ] & {
    user: string;
    baseAsset: string;
    debt: bigint;
    attestedInitialBal: bigint;
    allGF: boolean;
    cData: Common.ContributorStructOutput[];
    isSwapped: boolean;
    defaulted: string;
    recordId: bigint;
    collateralAsset: string;
  };
}

export interface ISafeInterface extends Interface {
  getFunction(
    nameOrSignature: "addUp" | "cancel" | "getData" | "getFinance" | "payback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFinance",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [Common.Payback_SafeStruct, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFinance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
}

export interface ISafe extends BaseContract {
  connect(runner?: ContractRunner | null): ISafe;
  waitForDeployment(): Promise<this>;

  interface: ISafeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addUp: TypedContractMethod<
    [user: AddressLike, recordId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  cancel: TypedContractMethod<
    [
      user: AddressLike,
      asset: AddressLike,
      unit: BigNumberish,
      recordId: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getData: TypedContractMethod<[], [ISafe.ViewDataStructOutput], "view">;

  getFinance: TypedContractMethod<
    [
      user: AddressLike,
      baseAsset: AddressLike,
      loan: BigNumberish,
      fee: BigNumberish,
      calculatedCol: BigNumberish,
      recordId: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  payback: TypedContractMethod<
    [arg0: Common.Payback_SafeStruct, unit: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addUp"
  ): TypedContractMethod<
    [user: AddressLike, recordId: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<
    [
      user: AddressLike,
      asset: AddressLike,
      unit: BigNumberish,
      recordId: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getData"
  ): TypedContractMethod<[], [ISafe.ViewDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getFinance"
  ): TypedContractMethod<
    [
      user: AddressLike,
      baseAsset: AddressLike,
      loan: BigNumberish,
      fee: BigNumberish,
      calculatedCol: BigNumberish,
      recordId: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payback"
  ): TypedContractMethod<
    [arg0: Common.Payback_SafeStruct, unit: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
