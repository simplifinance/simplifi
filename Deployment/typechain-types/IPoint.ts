/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Common {
  export type PointStruct = {
    contributor: BigNumberish;
    creator: BigNumberish;
    referrals: BigNumberish;
  };

  export type PointStructOutput = [
    contributor: bigint,
    creator: bigint,
    referrals: bigint
  ] & { contributor: bigint; creator: bigint; referrals: bigint };
}

export interface IPointInterface extends Interface {
  getFunction(
    nameOrSignature: "deductPoint" | "getPoint" | "setPoint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deductPoint",
    values: [AddressLike, Common.PointStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoint",
    values: [AddressLike, Common.PointStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "deductPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPoint", data: BytesLike): Result;
}

export interface IPoint extends BaseContract {
  connect(runner?: ContractRunner | null): IPoint;
  waitForDeployment(): Promise<this>;

  interface: IPointInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deductPoint: TypedContractMethod<
    [user: AddressLike, arg1: Common.PointStruct],
    [boolean],
    "nonpayable"
  >;

  getPoint: TypedContractMethod<
    [user: AddressLike],
    [Common.PointStructOutput],
    "view"
  >;

  setPoint: TypedContractMethod<
    [user: AddressLike, arg1: Common.PointStruct],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deductPoint"
  ): TypedContractMethod<
    [user: AddressLike, arg1: Common.PointStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPoint"
  ): TypedContractMethod<
    [user: AddressLike],
    [Common.PointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPoint"
  ): TypedContractMethod<
    [user: AddressLike, arg1: Common.PointStruct],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
