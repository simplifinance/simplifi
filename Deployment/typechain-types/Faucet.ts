/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface FaucetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseToken"
      | "baseTokenAmount"
      | "claimTestTokens"
      | "collateralToken"
      | "collateralTokenAmount"
      | "mintBatch"
      | "roleManager"
      | "sendTokens"
      | "setBaseAmount"
      | "setBaseToken"
      | "setCollateralAmount"
      | "setCollateralToken"
      | "setRoleManager"
      | "testers"
      | "testersMap"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTestTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "roleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testersMap",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTestTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testersMap", data: BytesLike): Result;
}

export interface Faucet extends BaseContract {
  connect(runner?: ContractRunner | null): Faucet;
  waitForDeployment(): Promise<this>;

  interface: FaucetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseToken: TypedContractMethod<[], [string], "view">;

  baseTokenAmount: TypedContractMethod<[], [bigint], "view">;

  claimTestTokens: TypedContractMethod<[], [boolean], "nonpayable">;

  collateralToken: TypedContractMethod<[], [string], "view">;

  collateralTokenAmount: TypedContractMethod<[], [bigint], "view">;

  mintBatch: TypedContractMethod<[tos: AddressLike[]], [boolean], "nonpayable">;

  roleManager: TypedContractMethod<[], [string], "view">;

  sendTokens: TypedContractMethod<[to: AddressLike], [boolean], "nonpayable">;

  setBaseAmount: TypedContractMethod<
    [newAmt: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setBaseToken: TypedContractMethod<
    [newToken: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setCollateralAmount: TypedContractMethod<
    [newAmt: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setCollateralToken: TypedContractMethod<
    [newToken: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setRoleManager: TypedContractMethod<
    [newManager: AddressLike],
    [boolean],
    "nonpayable"
  >;

  testers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  testersMap: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        lastColDispensed: bigint;
        lastBaseDispensed: bigint;
        isWhitelisted: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTestTokens"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<[tos: AddressLike[]], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "roleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendTokens"
  ): TypedContractMethod<[to: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseAmount"
  ): TypedContractMethod<[newAmt: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseToken"
  ): TypedContractMethod<[newToken: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralAmount"
  ): TypedContractMethod<[newAmt: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralToken"
  ): TypedContractMethod<[newToken: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoleManager"
  ): TypedContractMethod<[newManager: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "testers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "testersMap"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        lastColDispensed: bigint;
        lastBaseDispensed: bigint;
        isWhitelisted: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
