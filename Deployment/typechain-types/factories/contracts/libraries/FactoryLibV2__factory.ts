/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  FactoryLibV2,
  FactoryLibV2Interface,
} from "../../../contracts/libraries/FactoryLibV2";

const _abi = [
  {
    inputs: [],
    name: "APoolWithThisAmountExist",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidContributionAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "IvalidSlot",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "unitId",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "_value",
                type: "uint256",
              },
            ],
            internalType: "struct Counters.Counter",
            name: "userCount",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "quorum",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "selector",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "colCoverage",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "duration",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "intRate",
                type: "uint256",
              },
            ],
            internalType: "struct Common.Uints",
            name: "uints",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "fullInterest",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "intPerSec",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "unit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "currentPool",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "unitId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "rId",
                type: "uint256",
              },
            ],
            internalType: "struct Common.Uint256s",
            name: "uint256s",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "asset",
                type: "address",
              },
              {
                internalType: "address",
                name: "lastPaid",
                type: "address",
              },
              {
                internalType: "address",
                name: "bank",
                type: "address",
              },
              {
                internalType: "address",
                name: "admin",
                type: "address",
              },
            ],
            internalType: "struct Common.Addresses",
            name: "addrs",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "allGh",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "durOfChoice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expInterest",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "payDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "turnTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "loan",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "colBals",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "id",
                type: "address",
              },
              {
                internalType: "bool",
                name: "sentQuota",
                type: "bool",
              },
            ],
            internalType: "struct Common.Contributor[]",
            name: "cData",
            type: "tuple[]",
          },
          {
            internalType: "enum Common.Router",
            name: "router",
            type: "uint8",
          },
          {
            internalType: "enum Common.FuncTag",
            name: "stage",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Common.Pool",
        name: "pool",
        type: "tuple",
      },
    ],
    name: "AllGh",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f8fd9d6be1e3a47894e8b3881cab68bbd4ffbc255eb6cd33aa385a4c5c31fee64736f6c63430008180033";

type FactoryLibV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryLibV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FactoryLibV2__factory extends ContractFactory {
  constructor(...args: FactoryLibV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FactoryLibV2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FactoryLibV2__factory {
    return super.connect(runner) as FactoryLibV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryLibV2Interface {
    return new Interface(_abi) as FactoryLibV2Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FactoryLibV2 {
    return new Contract(address, _abi, runner) as unknown as FactoryLibV2;
  }
}
