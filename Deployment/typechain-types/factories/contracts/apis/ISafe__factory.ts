/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { ISafe, ISafeInterface } from "../../../contracts/apis/ISafe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "recordId",
        type: "uint256",
      },
    ],
    name: "addUp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "unit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "recordId",
        type: "uint256",
      },
    ],
    name: "cancel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalClients",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "aggregateFee",
            type: "uint256",
          },
        ],
        internalType: "struct ISafe.ViewData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "baseAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "loan",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "calculatedCol",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "recordId",
        type: "uint256",
      },
    ],
    name: "getFinance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "baseAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "debt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "attestedInitialBal",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "allGF",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "paybackTime",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "turnStartTime",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "getFinanceTime",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "loan",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "colBals",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "id",
                type: "address",
              },
              {
                internalType: "bool",
                name: "sentQuota",
                type: "bool",
              },
            ],
            internalType: "struct Common.Contributor[]",
            name: "cData",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isSwapped",
            type: "bool",
          },
          {
            internalType: "address",
            name: "defaulted",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "recordId",
            type: "uint96",
          },
          {
            internalType: "contract IERC20",
            name: "collateralAsset",
            type: "address",
          },
        ],
        internalType: "struct Common.Payback_Safe",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "unit",
        type: "uint256",
      },
    ],
    name: "payback",
    outputs: [
      {
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISafe__factory {
  static readonly abi = _abi;
  static createInterface(): ISafeInterface {
    return new Interface(_abi) as ISafeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ISafe {
    return new Contract(address, _abi, runner) as unknown as ISafe;
  }
}
