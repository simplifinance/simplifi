/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IFactory,
  IFactoryInterface,
} from "../../../contracts/apis/IFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "unit",
        type: "uint256",
      },
    ],
    name: "Cancellation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "maxQuorum",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "selector",
                type: "uint8",
              },
              {
                internalType: "uint24",
                name: "colCoverage",
                type: "uint24",
              },
              {
                internalType: "uint32",
                name: "duration",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "allGh",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "userCount",
                type: "uint8",
              },
            ],
            internalType: "struct Common.Low",
            name: "low",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "unit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "currentPool",
                type: "uint256",
              },
              {
                internalType: "uint96",
                name: "recordId",
                type: "uint96",
              },
              {
                internalType: "uint96",
                name: "unitId",
                type: "uint96",
              },
            ],
            internalType: "struct Common.Big",
            name: "big",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "colAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "lastPaid",
                type: "address",
              },
              {
                internalType: "address",
                name: "safe",
                type: "address",
              },
              {
                internalType: "address",
                name: "admin",
                type: "address",
              },
            ],
            internalType: "struct Common.Addresses",
            name: "addrs",
            type: "tuple",
          },
          {
            internalType: "enum Common.Router",
            name: "router",
            type: "uint8",
          },
          {
            internalType: "enum Common.Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "enum Common.Status",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Common.Pool",
        name: "",
        type: "tuple",
      },
    ],
    name: "GetFinanced",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "maxQuorum",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "selector",
                type: "uint8",
              },
              {
                internalType: "uint24",
                name: "colCoverage",
                type: "uint24",
              },
              {
                internalType: "uint32",
                name: "duration",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "allGh",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "userCount",
                type: "uint8",
              },
            ],
            internalType: "struct Common.Low",
            name: "low",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "unit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "currentPool",
                type: "uint256",
              },
              {
                internalType: "uint96",
                name: "recordId",
                type: "uint96",
              },
              {
                internalType: "uint96",
                name: "unitId",
                type: "uint96",
              },
            ],
            internalType: "struct Common.Big",
            name: "big",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "colAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "lastPaid",
                type: "address",
              },
              {
                internalType: "address",
                name: "safe",
                type: "address",
              },
              {
                internalType: "address",
                name: "admin",
                type: "address",
              },
            ],
            internalType: "struct Common.Addresses",
            name: "addrs",
            type: "tuple",
          },
          {
            internalType: "enum Common.Router",
            name: "router",
            type: "uint8",
          },
          {
            internalType: "enum Common.Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "enum Common.Status",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Common.Pool",
        name: "",
        type: "tuple",
      },
    ],
    name: "Liquidated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "maxQuorum",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "selector",
                type: "uint8",
              },
              {
                internalType: "uint24",
                name: "colCoverage",
                type: "uint24",
              },
              {
                internalType: "uint32",
                name: "duration",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "allGh",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "userCount",
                type: "uint8",
              },
            ],
            internalType: "struct Common.Low",
            name: "low",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "unit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "currentPool",
                type: "uint256",
              },
              {
                internalType: "uint96",
                name: "recordId",
                type: "uint96",
              },
              {
                internalType: "uint96",
                name: "unitId",
                type: "uint96",
              },
            ],
            internalType: "struct Common.Big",
            name: "big",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "colAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "lastPaid",
                type: "address",
              },
              {
                internalType: "address",
                name: "safe",
                type: "address",
              },
              {
                internalType: "address",
                name: "admin",
                type: "address",
              },
            ],
            internalType: "struct Common.Addresses",
            name: "addrs",
            type: "tuple",
          },
          {
            internalType: "enum Common.Router",
            name: "router",
            type: "uint8",
          },
          {
            internalType: "enum Common.Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "enum Common.Status",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Common.Pool",
        name: "",
        type: "tuple",
      },
    ],
    name: "NewContributorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "maxQuorum",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "selector",
                type: "uint8",
              },
              {
                internalType: "uint24",
                name: "colCoverage",
                type: "uint24",
              },
              {
                internalType: "uint32",
                name: "duration",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "allGh",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "userCount",
                type: "uint8",
              },
            ],
            internalType: "struct Common.Low",
            name: "low",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "unit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "currentPool",
                type: "uint256",
              },
              {
                internalType: "uint96",
                name: "recordId",
                type: "uint96",
              },
              {
                internalType: "uint96",
                name: "unitId",
                type: "uint96",
              },
            ],
            internalType: "struct Common.Big",
            name: "big",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "colAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "lastPaid",
                type: "address",
              },
              {
                internalType: "address",
                name: "safe",
                type: "address",
              },
              {
                internalType: "address",
                name: "admin",
                type: "address",
              },
            ],
            internalType: "struct Common.Addresses",
            name: "addrs",
            type: "tuple",
          },
          {
            internalType: "enum Common.Router",
            name: "router",
            type: "uint8",
          },
          {
            internalType: "enum Common.Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "enum Common.Status",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Common.Pool",
        name: "",
        type: "tuple",
      },
    ],
    name: "Payback",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "maxQuorum",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "selector",
                type: "uint8",
              },
              {
                internalType: "uint24",
                name: "colCoverage",
                type: "uint24",
              },
              {
                internalType: "uint32",
                name: "duration",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "allGh",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "userCount",
                type: "uint8",
              },
            ],
            internalType: "struct Common.Low",
            name: "low",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "unit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "currentPool",
                type: "uint256",
              },
              {
                internalType: "uint96",
                name: "recordId",
                type: "uint96",
              },
              {
                internalType: "uint96",
                name: "unitId",
                type: "uint96",
              },
            ],
            internalType: "struct Common.Big",
            name: "big",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "colAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "lastPaid",
                type: "address",
              },
              {
                internalType: "address",
                name: "safe",
                type: "address",
              },
              {
                internalType: "address",
                name: "admin",
                type: "address",
              },
            ],
            internalType: "struct Common.Addresses",
            name: "addrs",
            type: "tuple",
          },
          {
            internalType: "enum Common.Router",
            name: "router",
            type: "uint8",
          },
          {
            internalType: "enum Common.Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "enum Common.Status",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Common.Pool",
        name: "",
        type: "tuple",
      },
    ],
    name: "PoolCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint8",
                name: "maxQuorum",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "selector",
                type: "uint8",
              },
              {
                internalType: "uint24",
                name: "colCoverage",
                type: "uint24",
              },
              {
                internalType: "uint32",
                name: "duration",
                type: "uint32",
              },
              {
                internalType: "uint8",
                name: "allGh",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "userCount",
                type: "uint8",
              },
            ],
            internalType: "struct Common.Low",
            name: "low",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "unit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "currentPool",
                type: "uint256",
              },
              {
                internalType: "uint96",
                name: "recordId",
                type: "uint96",
              },
              {
                internalType: "uint96",
                name: "unitId",
                type: "uint96",
              },
            ],
            internalType: "struct Common.Big",
            name: "big",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "colAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "lastPaid",
                type: "address",
              },
              {
                internalType: "address",
                name: "safe",
                type: "address",
              },
              {
                internalType: "address",
                name: "admin",
                type: "address",
              },
            ],
            internalType: "struct Common.Addresses",
            name: "addrs",
            type: "tuple",
          },
          {
            internalType: "enum Common.Router",
            name: "router",
            type: "uint8",
          },
          {
            internalType: "enum Common.Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "enum Common.Status",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Common.Pool",
        name: "",
        type: "tuple",
      },
    ],
    name: "PoolEdited",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "slot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "earnStartDate",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "fullInterest",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "intPerSec",
                type: "uint256",
              },
            ],
            internalType: "struct Common.Interest",
            name: "accruals",
            type: "tuple",
          },
        ],
        internalType: "struct Common.Provider[]",
        name: "providers",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "unit",
        type: "uint256",
      },
    ],
    name: "contributeThroughProvider",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "recordId",
        type: "uint96",
      },
    ],
    name: "getContributorProviders",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "slot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "earnStartDate",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "fullInterest",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "intPerSec",
                type: "uint256",
              },
            ],
            internalType: "struct Common.Interest",
            name: "accruals",
            type: "tuple",
          },
        ],
        internalType: "struct Common.Provider[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IFactoryInterface {
    return new Interface(_abi) as IFactoryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IFactory {
    return new Contract(address, _abi, runner) as unknown as IFactory;
  }
}
