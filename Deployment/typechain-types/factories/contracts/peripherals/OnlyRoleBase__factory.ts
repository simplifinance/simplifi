/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  OnlyRoleBase,
  OnlyRoleBaseInterface,
} from "../../../contracts/peripherals/OnlyRoleBase";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "errorMsg",
        type: "string",
      },
    ],
    name: "ErrorOccurred",
    type: "error",
  },
  {
    inputs: [],
    name: "roleManager",
    outputs: [
      {
        internalType: "contract IRoleBase",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "setRoleManager",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class OnlyRoleBase__factory {
  static readonly abi = _abi;
  static createInterface(): OnlyRoleBaseInterface {
    return new Interface(_abi) as OnlyRoleBaseInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OnlyRoleBase {
    return new Contract(address, _abi, runner) as unknown as OnlyRoleBase;
  }
}
