/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Faucet,
  FaucetInterface,
} from "../../../../../contracts/standalone/tokens/test/Faucet";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRoleBase",
        name: "_roleManager",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_collateralToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_baseToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_baseTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_colTokenAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "errorMsg",
        type: "string",
      },
    ],
    name: "ErrorOccurred",
    type: "error",
  },
  {
    inputs: [],
    name: "baseToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimTestTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tos",
        type: "address[]",
      },
    ],
    name: "mintBatch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "roleManager",
    outputs: [
      {
        internalType: "contract IRoleBase",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "sendTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newAmt",
        type: "uint256",
      },
    ],
    name: "setBaseAmount",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "newToken",
        type: "address",
      },
    ],
    name: "setBaseToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newAmt",
        type: "uint256",
      },
    ],
    name: "setCollateralAmount",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "newToken",
        type: "address",
      },
    ],
    name: "setCollateralToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "setRoleManager",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "testers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "testersMap",
    outputs: [
      {
        internalType: "uint256",
        name: "lastColDispensed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastBaseDispensed",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isWhitelisted",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610dcc380380610dcc83398101604081905261002f91610138565b600080546001600160a01b0319166001600160a01b0387161790556004546001600160a01b039081169085160361009d5760408051808201909152601881527f436f6c6c61746572616c20746f6b656e206973207a65726f0000000000000000602082015261009d906100dc565b600480546001600160a01b039586166001600160a01b0319918216179091556005805494909516931692909217909255600191909155600255506101e5565b80511561012057806040517fcc8610630000000000000000000000000000000000000000000000000000000081526004016101179190610196565b60405180910390fd5b50565b6001600160a01b038116811461012057600080fd5b600080600080600060a0868803121561015057600080fd5b855161015b81610123565b602087015190955061016c81610123565b604087015190945061017d81610123565b6060870151608090970151959894975095949392505050565b60006020808352835180602085015260005b818110156101c4578581018301518582016040015282016101a8565b506000604082860101526040601f19601f8301168501019250505092915050565b610bd8806101f46000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c8063666181a911610097578063a8d7c20b11610066578063a8d7c20b14610219578063b2016bd414610222578063c55dae6314610235578063f1d588c51461024857600080fd5b8063666181a9146101cd578063837197b2146101e0578063927f59ba146101f3578063a2edf1731461020657600080fd5b8063224a7c6a116100d3578063224a7c6a146101545780633655eaad146101675780633d4f04ad146101545780634df760de146101b657600080fd5b8062435da5146100f957806310f00ae11461012957806316bb6c1314610141575b600080fd5b60005461010c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013161025b565b6040519015158152602001610120565b61013161014f36600461099d565b61026c565b6101316101623660046109c1565b6102e3565b61019961017536600461099d565b60066020526000908152604090208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610120565b6101bf60025481565b604051908152602001610120565b6101316101db36600461099d565b6102f6565b6101316101ee36600461099d565b61036e565b6101316102013660046109fb565b610389565b61010c6102143660046109c1565b6103d2565b6101bf60015481565b60045461010c906001600160a01b031681565b60055461010c906001600160a01b031681565b61013161025636600461099d565b6103fc565b600061026633610426565b50600190565b6000610276610869565b6005546001600160a01b038381169116148061029957506001600160a01b038216155b156102bf576102bf604051806060016040528060218152602001610b82602191396108e8565b50600580546001600160a01b0319166001600160a01b03831617905560015b919050565b60006102ed610869565b50600190815590565b6000610300610869565b6004546001600160a01b038381169116148061032357506001600160a01b038216155b1561034957610349604051806060016040528060218152602001610b82602191396108e8565b50600480546001600160a01b0383166001600160a01b03199091161790556001919050565b6000610378610869565b61038182610426565b506001919050565b6000610393610869565b60005b82518110156103c9576103c18382815181106103b4576103b4610ac0565b6020026020010151610426565b600101610396565b50600192915050565b600381815481106103e257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610406610869565b600080546001600160a01b0319166001600160a01b038416179055610381565b60028054600180546001600160a01b03851660009081526006602090815260409182902082516060810184528154815294810154918501919091529094015460ff16151593820193909352909190821561062157600480546040516370a0823160e01b81526001600160a01b0387811693820193909352600092909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610ad6565b905080158015610515575081516105089062015180610aef565b4267ffffffffffffffff16115b1561061f57600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190610ad6565b905084811061061d574267ffffffffffffffff1683526004805460405163a9059cbb60e01b81526001600160a01b03898116938201939093526024810188905291169063a9059cbb906044016020604051808303816000875af11580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610b10565b505b505b505b81156107c8576005546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190610ad6565b9050801580156106c0575060208201516106b39062015180610aef565b4267ffffffffffffffff16115b156107c6576005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190610ad6565b90508381106107c4574267ffffffffffffffff16602084015260055460405163a9059cbb60e01b81526001600160a01b038881166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af115801561079e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c29190610b10565b505b505b505b8060400151610822576001604082018190526003805491820181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b0393909316600090815260066020908152604091829020855181559085015160018201559301516002909301805460ff1916931515939093179092555050565b6000546001600160a01b0316806108aa576108aa6040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b8152506108e8565b6108b333610913565b6108e5576108e56040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b8152506108e8565b50565b8051156108e5578060405163cc86106360e01b815260040161090a9190610b32565b60405180910390fd5b60008054604051633f784de560e11b81526001600160a01b03848116600483015290911690637ef09bca90602401602060405180830381865afa15801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190610b10565b92915050565b6001600160a01b03811681146108e557600080fd5b6000602082840312156109af57600080fd5b81356109ba81610988565b9392505050565b6000602082840312156109d357600080fd5b5035919050565b80356102de81610988565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610a0e57600080fd5b823567ffffffffffffffff80821115610a2657600080fd5b818501915085601f830112610a3a57600080fd5b813581811115610a4c57610a4c6109e5565b8060051b604051601f19603f83011681018181108582111715610a7157610a716109e5565b604052918252848201925083810185019188831115610a8f57600080fd5b938501935b82851015610ab457610aa5856109da565b84529385019392850192610a94565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610ae857600080fd5b5051919050565b8082018082111561098257634e487b7160e01b600052601160045260246000fd5b600060208284031215610b2257600080fd5b815180151581146109ba57600080fd5b60006020808352835180602085015260005b81811015610b6057858101830151858201604001528201610b44565b506000604082860101526040601f19601f830116850101925050509291505056fe4e657720546f6b656e20697320746865206578697374696e67206f72207a65726fa2646970667358221220a09895fac63b9431b3ab842a06892d23cb656f40ce7145b2bff5de56ec637de564736f6c63430008180033";

type FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Faucet__factory extends ContractFactory {
  constructor(...args: FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _roleManager: AddressLike,
    _collateralToken: AddressLike,
    _baseToken: AddressLike,
    _baseTokenAmount: BigNumberish,
    _colTokenAmount: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _roleManager,
      _collateralToken,
      _baseToken,
      _baseTokenAmount,
      _colTokenAmount,
      overrides || {}
    );
  }
  override deploy(
    _roleManager: AddressLike,
    _collateralToken: AddressLike,
    _baseToken: AddressLike,
    _baseTokenAmount: BigNumberish,
    _colTokenAmount: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _roleManager,
      _collateralToken,
      _baseToken,
      _baseTokenAmount,
      _colTokenAmount,
      overrides || {}
    ) as Promise<
      Faucet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Faucet__factory {
    return super.connect(runner) as Faucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetInterface {
    return new Interface(_abi) as FaucetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Faucet {
    return new Contract(address, _abi, runner) as unknown as Faucet;
  }
}
