/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  OnlyOwner,
  OnlyOwnerInterface,
} from "../../../contracts/abstracts/OnlyOwner";

const _abi = [
  {
    inputs: [],
    name: "ManagerAddressIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPermittedToCall",
    type: "error",
  },
  {
    inputs: [],
    name: "ownershipManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "setOwnershipManager",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class OnlyOwner__factory {
  static readonly abi = _abi;
  static createInterface(): OnlyOwnerInterface {
    return new Interface(_abi) as OnlyOwnerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OnlyOwner {
    return new Contract(address, _abi, runner) as unknown as OnlyOwner;
  }
}
