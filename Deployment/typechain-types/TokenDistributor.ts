/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace TokenDistributor {
  export type RequestStruct = {
    amount: BigNumberish;
    recipient: AddressLike;
    delay: BigNumberish;
    executors: AddressLike[];
    status: BigNumberish;
    txType: BigNumberish;
  };

  export type RequestStructOutput = [
    amount: bigint,
    recipient: string,
    delay: bigint,
    executors: string[],
    status: bigint,
    txType: bigint
  ] & {
    amount: bigint;
    recipient: string;
    delay: bigint;
    executors: string[];
    status: bigint;
    txType: bigint;
  };
}

export interface TokenDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delay"
      | "executeTransaction"
      | "getExecutors"
      | "getTransactionRequest"
      | "initiateTransaction"
      | "ownershipManager"
      | "quorum"
      | "setOwnershipManager"
      | "setToken"
      | "signTransaction"
      | "token"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Requested" | "Signer"): EventFragment;

  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTransaction",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOwnershipManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOwnershipManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace RequestedEvent {
  export type InputTuple = [reqId: BigNumberish, from: AddressLike];
  export type OutputTuple = [reqId: bigint, from: string];
  export interface OutputObject {
    reqId: bigint;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerEvent {
  export type InputTuple = [reqId: BigNumberish, from: AddressLike];
  export type OutputTuple = [reqId: bigint, from: string];
  export interface OutputObject {
    reqId: bigint;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): TokenDistributor;
  waitForDeployment(): Promise<this>;

  interface: TokenDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delay: TypedContractMethod<[], [bigint], "view">;

  executeTransaction: TypedContractMethod<
    [reqId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getExecutors: TypedContractMethod<[], [string[]], "view">;

  getTransactionRequest: TypedContractMethod<
    [reqId: BigNumberish],
    [TokenDistributor.RequestStructOutput],
    "view"
  >;

  initiateTransaction: TypedContractMethod<
    [
      _recipient: AddressLike,
      _amount: BigNumberish,
      _delayInHours: BigNumberish,
      _type: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  ownershipManager: TypedContractMethod<[], [string], "view">;

  quorum: TypedContractMethod<[], [bigint], "view">;

  setOwnershipManager: TypedContractMethod<
    [newManager: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setToken: TypedContractMethod<[newToken: AddressLike], [void], "nonpayable">;

  signTransaction: TypedContractMethod<
    [reqId: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[reqId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getExecutors"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionRequest"
  ): TypedContractMethod<
    [reqId: BigNumberish],
    [TokenDistributor.RequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateTransaction"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _amount: BigNumberish,
      _delayInHours: BigNumberish,
      _type: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ownershipManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quorum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setOwnershipManager"
  ): TypedContractMethod<[newManager: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[newToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signTransaction"
  ): TypedContractMethod<[reqId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Requested"
  ): TypedContractEvent<
    RequestedEvent.InputTuple,
    RequestedEvent.OutputTuple,
    RequestedEvent.OutputObject
  >;
  getEvent(
    key: "Signer"
  ): TypedContractEvent<
    SignerEvent.InputTuple,
    SignerEvent.OutputTuple,
    SignerEvent.OutputObject
  >;

  filters: {
    "Requested(uint256,address)": TypedContractEvent<
      RequestedEvent.InputTuple,
      RequestedEvent.OutputTuple,
      RequestedEvent.OutputObject
    >;
    Requested: TypedContractEvent<
      RequestedEvent.InputTuple,
      RequestedEvent.OutputTuple,
      RequestedEvent.OutputObject
    >;

    "Signer(uint256,address)": TypedContractEvent<
      SignerEvent.InputTuple,
      SignerEvent.OutputTuple,
      SignerEvent.OutputObject
    >;
    Signer: TypedContractEvent<
      SignerEvent.InputTuple,
      SignerEvent.OutputTuple,
      SignerEvent.OutputObject
    >;
  };
}
