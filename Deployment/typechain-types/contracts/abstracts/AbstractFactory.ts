/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Counters {
  export type CounterStruct = { _value: BigNumberish };

  export type CounterStructOutput = [_value: bigint] & { _value: bigint };
}

export declare namespace Common {
  export type UintsStruct = {
    quorum: BigNumberish;
    selector: BigNumberish;
    colCoverage: BigNumberish;
    duration: BigNumberish;
    intRate: BigNumberish;
  };

  export type UintsStructOutput = [
    quorum: bigint,
    selector: bigint,
    colCoverage: bigint,
    duration: bigint,
    intRate: bigint
  ] & {
    quorum: bigint;
    selector: bigint;
    colCoverage: bigint;
    duration: bigint;
    intRate: bigint;
  };

  export type Uint256sStruct = {
    fullInterest: BigNumberish;
    intPerSec: BigNumberish;
    unit: BigNumberish;
    currentPool: BigNumberish;
    unitId: BigNumberish;
    rId: BigNumberish;
  };

  export type Uint256sStructOutput = [
    fullInterest: bigint,
    intPerSec: bigint,
    unit: bigint,
    currentPool: bigint,
    unitId: bigint,
    rId: bigint
  ] & {
    fullInterest: bigint;
    intPerSec: bigint;
    unit: bigint;
    currentPool: bigint;
    unitId: bigint;
    rId: bigint;
  };

  export type AddressesStruct = {
    asset: AddressLike;
    lastPaid: AddressLike;
    bank: AddressLike;
    admin: AddressLike;
  };

  export type AddressesStructOutput = [
    asset: string,
    lastPaid: string,
    bank: string,
    admin: string
  ] & { asset: string; lastPaid: string; bank: string; admin: string };

  export type ContributorStruct = {
    durOfChoice: BigNumberish;
    expInterest: BigNumberish;
    payDate: BigNumberish;
    turnTime: BigNumberish;
    loan: BigNumberish;
    colBals: BigNumberish;
    id: AddressLike;
    sentQuota: boolean;
  };

  export type ContributorStructOutput = [
    durOfChoice: bigint,
    expInterest: bigint,
    payDate: bigint,
    turnTime: bigint,
    loan: bigint,
    colBals: bigint,
    id: string,
    sentQuota: boolean
  ] & {
    durOfChoice: bigint;
    expInterest: bigint;
    payDate: bigint;
    turnTime: bigint;
    loan: bigint;
    colBals: bigint;
    id: string;
    sentQuota: boolean;
  };

  export type PoolStruct = {
    userCount: Counters.CounterStruct;
    uints: Common.UintsStruct;
    uint256s: Common.Uint256sStruct;
    addrs: Common.AddressesStruct;
    allGh: BigNumberish;
    cData: Common.ContributorStruct[];
    router: BigNumberish;
    stage: BigNumberish;
  };

  export type PoolStructOutput = [
    userCount: Counters.CounterStructOutput,
    uints: Common.UintsStructOutput,
    uint256s: Common.Uint256sStructOutput,
    addrs: Common.AddressesStructOutput,
    allGh: bigint,
    cData: Common.ContributorStructOutput[],
    router: bigint,
    stage: bigint
  ] & {
    userCount: Counters.CounterStructOutput;
    uints: Common.UintsStructOutput;
    uint256s: Common.Uint256sStructOutput;
    addrs: Common.AddressesStructOutput;
    allGh: bigint;
    cData: Common.ContributorStructOutput[];
    router: bigint;
    stage: bigint;
  };

  export type CreatePoolReturnValueStruct = {
    pool: Common.PoolStruct;
    cData: Common.ContributorStruct;
  };

  export type CreatePoolReturnValueStructOutput = [
    pool: Common.PoolStructOutput,
    cData: Common.ContributorStructOutput
  ] & { pool: Common.PoolStructOutput; cData: Common.ContributorStructOutput };

  export type CommonEventDataStruct = {
    pool: Common.PoolStruct;
    debtBal: BigNumberish;
    colBal: BigNumberish;
  };

  export type CommonEventDataStructOutput = [
    pool: Common.PoolStructOutput,
    debtBal: bigint,
    colBal: bigint
  ] & { pool: Common.PoolStructOutput; debtBal: bigint; colBal: bigint };

  export type SlotStruct = {
    value: BigNumberish;
    isMember: boolean;
    isAdmin: boolean;
  };

  export type SlotStructOutput = [
    value: bigint,
    isMember: boolean,
    isAdmin: boolean
  ] & { value: bigint; isMember: boolean; isAdmin: boolean };

  export type BalancesStruct = { xfi: BigNumberish; erc20: BigNumberish };

  export type BalancesStructOutput = [xfi: bigint, erc20: bigint] & {
    xfi: bigint;
    erc20: bigint;
  };

  export type PointStruct = {
    contributor: BigNumberish;
    creator: BigNumberish;
  };

  export type PointStructOutput = [contributor: bigint, creator: bigint] & {
    contributor: bigint;
    creator: bigint;
  };

  export type UnitStruct = { isInitialized: boolean; status: BigNumberish };

  export type UnitStructOutput = [isInitialized: boolean, status: bigint] & {
    isInitialized: boolean;
    status: bigint;
  };
}

export declare namespace IFactory {
  export type AnalyticsStruct = {
    tvlInXFI: BigNumberish;
    tvlInUsd: BigNumberish;
    totalPermissioned: BigNumberish;
    totalPermissionless: BigNumberish;
  };

  export type AnalyticsStructOutput = [
    tvlInXFI: bigint,
    tvlInUsd: bigint,
    totalPermissioned: bigint,
    totalPermissionless: bigint
  ] & {
    tvlInXFI: bigint;
    tvlInUsd: bigint;
    totalPermissioned: bigint;
    totalPermissionless: bigint;
  };

  export type ContractDataStruct = {
    feeTo: AddressLike;
    assetAdmin: AddressLike;
    makerRate: BigNumberish;
    bankFactory: AddressLike;
  };

  export type ContractDataStructOutput = [
    feeTo: string,
    assetAdmin: string,
    makerRate: bigint,
    bankFactory: string
  ] & {
    feeTo: string;
    assetAdmin: string;
    makerRate: bigint;
    bankFactory: string;
  };

  export type ViewFactoryDataStruct = {
    analytics: IFactory.AnalyticsStruct;
    contractData: IFactory.ContractDataStruct;
    currentEpoches: BigNumberish;
    recordEpoches: BigNumberish;
  };

  export type ViewFactoryDataStructOutput = [
    analytics: IFactory.AnalyticsStructOutput,
    contractData: IFactory.ContractDataStructOutput,
    currentEpoches: bigint,
    recordEpoches: bigint
  ] & {
    analytics: IFactory.AnalyticsStructOutput;
    contractData: IFactory.ContractDataStructOutput;
    currentEpoches: bigint;
    recordEpoches: bigint;
  };
}

export interface AbstractFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "analytics"
      | "createPermissionedPool"
      | "createPermissionlessPool"
      | "creationFee"
      | "enquireLiquidation"
      | "getBalances"
      | "getCollaterlQuote"
      | "getCurrentDebt"
      | "getEpoches"
      | "getFactoryData"
      | "getFinance"
      | "getPoint"
      | "getPoolData"
      | "getProfile"
      | "getRecord"
      | "getRecordEpoches"
      | "getSlot"
      | "getStatus"
      | "joinAPool"
      | "liquidate"
      | "minContribution"
      | "ownershipManager"
      | "pause"
      | "paused"
      | "payback"
      | "performSetUp"
      | "removeLiquidityPool"
      | "setContractData"
      | "setMinimumLiquidityPerProvider"
      | "setOwnershipManager"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BandCreated"
      | "Cancellation"
      | "GetFinanced"
      | "Liquidated"
      | "NewMemberAdded"
      | "Paused"
      | "Payback"
      | "Rekeyed"
      | "RoundUp"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "analytics", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPermissionedPool",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermissionlessPool",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enquireLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollaterlQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDebt",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSlot",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinAPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performSetUp",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractData",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLiquidityPerProvider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnershipManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "analytics", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPermissionedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPermissionlessPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enquireLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollaterlQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpoches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFinance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecordEpoches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinAPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performSetUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLiquidityPerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnershipManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BandCreatedEvent {
  export type InputTuple = [arg0: Common.CreatePoolReturnValueStruct];
  export type OutputTuple = [arg0: Common.CreatePoolReturnValueStructOutput];
  export interface OutputObject {
    arg0: Common.CreatePoolReturnValueStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancellationEvent {
  export type InputTuple = [epochId: BigNumberish];
  export type OutputTuple = [epochId: bigint];
  export interface OutputObject {
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GetFinancedEvent {
  export type InputTuple = [arg0: Common.CommonEventDataStruct];
  export type OutputTuple = [arg0: Common.CommonEventDataStructOutput];
  export interface OutputObject {
    arg0: Common.CommonEventDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [arg0: Common.CommonEventDataStruct];
  export type OutputTuple = [arg0: Common.CommonEventDataStructOutput];
  export interface OutputObject {
    arg0: Common.CommonEventDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMemberAddedEvent {
  export type InputTuple = [arg0: Common.CommonEventDataStruct];
  export type OutputTuple = [arg0: Common.CommonEventDataStructOutput];
  export interface OutputObject {
    arg0: Common.CommonEventDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaybackEvent {
  export type InputTuple = [arg0: Common.CommonEventDataStruct];
  export type OutputTuple = [arg0: Common.CommonEventDataStructOutput];
  export interface OutputObject {
    arg0: Common.CommonEventDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RekeyedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: AddressLike];
  export type OutputTuple = [arg0: string, arg1: string];
  export interface OutputObject {
    arg0: string;
    arg1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundUpEvent {
  export type InputTuple = [arg0: BigNumberish, arg1: Common.PoolStruct];
  export type OutputTuple = [arg0: bigint, arg1: Common.PoolStructOutput];
  export interface OutputObject {
    arg0: bigint;
    arg1: Common.PoolStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AbstractFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractFactory;
  waitForDeployment(): Promise<this>;

  interface: AbstractFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  analytics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        tvlInXFI: bigint;
        tvlInUsd: bigint;
        totalPermissioned: bigint;
        totalPermissionless: bigint;
      }
    ],
    "view"
  >;

  createPermissionedPool: TypedContractMethod<
    [
      intRate: BigNumberish,
      durationInHours: BigNumberish,
      colCoverage: BigNumberish,
      unitLiquidity: BigNumberish,
      liquidAsset: AddressLike,
      contributors: AddressLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  createPermissionlessPool: TypedContractMethod<
    [
      intRate: BigNumberish,
      quorum: BigNumberish,
      durationInHours: BigNumberish,
      colCoverage: BigNumberish,
      unitLiquidity: BigNumberish,
      liquidAsset: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  enquireLiquidation: TypedContractMethod<
    [unit: BigNumberish],
    [
      [
        Common.ContributorStructOutput,
        boolean,
        bigint,
        Common.SlotStructOutput,
        string
      ]
    ],
    "view"
  >;

  getBalances: TypedContractMethod<
    [unit: BigNumberish],
    [Common.BalancesStructOutput],
    "view"
  >;

  getCollaterlQuote: TypedContractMethod<
    [unit: BigNumberish],
    [[bigint, bigint] & { collateral: bigint; colCoverage: bigint }],
    "view"
  >;

  getCurrentDebt: TypedContractMethod<
    [unit: BigNumberish, target: AddressLike],
    [bigint],
    "view"
  >;

  getEpoches: TypedContractMethod<[], [bigint], "view">;

  getFactoryData: TypedContractMethod<
    [],
    [IFactory.ViewFactoryDataStructOutput],
    "view"
  >;

  getFinance: TypedContractMethod<
    [unit: BigNumberish, daysOfUseInHr: BigNumberish],
    [boolean],
    "payable"
  >;

  getPoint: TypedContractMethod<
    [user: AddressLike],
    [Common.PointStructOutput],
    "view"
  >;

  getPoolData: TypedContractMethod<
    [unitId: BigNumberish],
    [Common.PoolStructOutput],
    "view"
  >;

  getProfile: TypedContractMethod<
    [unit: BigNumberish, user: AddressLike],
    [Common.ContributorStructOutput],
    "view"
  >;

  getRecord: TypedContractMethod<
    [uId: BigNumberish],
    [Common.PoolStructOutput],
    "view"
  >;

  getRecordEpoches: TypedContractMethod<[], [bigint], "view">;

  getSlot: TypedContractMethod<
    [user: AddressLike, unit: BigNumberish],
    [Common.SlotStructOutput],
    "view"
  >;

  getStatus: TypedContractMethod<
    [unit: BigNumberish],
    [Common.UnitStructOutput],
    "view"
  >;

  joinAPool: TypedContractMethod<[unit: BigNumberish], [boolean], "nonpayable">;

  liquidate: TypedContractMethod<[unit: BigNumberish], [boolean], "nonpayable">;

  minContribution: TypedContractMethod<[], [bigint], "view">;

  ownershipManager: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payback: TypedContractMethod<[unit: BigNumberish], [boolean], "nonpayable">;

  performSetUp: TypedContractMethod<
    [
      serviceRate: BigNumberish,
      _minContribution: BigNumberish,
      feeTo: AddressLike,
      assetClass: AddressLike,
      strategyManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  removeLiquidityPool: TypedContractMethod<
    [unit: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setContractData: TypedContractMethod<
    [
      feeTo: AddressLike,
      assetAdmin: AddressLike,
      serviceRate: BigNumberish,
      bankFactory: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  setMinimumLiquidityPerProvider: TypedContractMethod<
    [minLiquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwnershipManager: TypedContractMethod<
    [newManager: AddressLike],
    [boolean],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "analytics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        tvlInXFI: bigint;
        tvlInUsd: bigint;
        totalPermissioned: bigint;
        totalPermissionless: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createPermissionedPool"
  ): TypedContractMethod<
    [
      intRate: BigNumberish,
      durationInHours: BigNumberish,
      colCoverage: BigNumberish,
      unitLiquidity: BigNumberish,
      liquidAsset: AddressLike,
      contributors: AddressLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPermissionlessPool"
  ): TypedContractMethod<
    [
      intRate: BigNumberish,
      quorum: BigNumberish,
      durationInHours: BigNumberish,
      colCoverage: BigNumberish,
      unitLiquidity: BigNumberish,
      liquidAsset: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enquireLiquidation"
  ): TypedContractMethod<
    [unit: BigNumberish],
    [
      [
        Common.ContributorStructOutput,
        boolean,
        bigint,
        Common.SlotStructOutput,
        string
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<
    [unit: BigNumberish],
    [Common.BalancesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollaterlQuote"
  ): TypedContractMethod<
    [unit: BigNumberish],
    [[bigint, bigint] & { collateral: bigint; colCoverage: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentDebt"
  ): TypedContractMethod<
    [unit: BigNumberish, target: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFactoryData"
  ): TypedContractMethod<[], [IFactory.ViewFactoryDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getFinance"
  ): TypedContractMethod<
    [unit: BigNumberish, daysOfUseInHr: BigNumberish],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getPoint"
  ): TypedContractMethod<
    [user: AddressLike],
    [Common.PointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolData"
  ): TypedContractMethod<
    [unitId: BigNumberish],
    [Common.PoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [unit: BigNumberish, user: AddressLike],
    [Common.ContributorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecord"
  ): TypedContractMethod<
    [uId: BigNumberish],
    [Common.PoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecordEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSlot"
  ): TypedContractMethod<
    [user: AddressLike, unit: BigNumberish],
    [Common.SlotStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<
    [unit: BigNumberish],
    [Common.UnitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinAPool"
  ): TypedContractMethod<[unit: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<[unit: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "minContribution"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownershipManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payback"
  ): TypedContractMethod<[unit: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "performSetUp"
  ): TypedContractMethod<
    [
      serviceRate: BigNumberish,
      _minContribution: BigNumberish,
      feeTo: AddressLike,
      assetClass: AddressLike,
      strategyManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityPool"
  ): TypedContractMethod<[unit: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractData"
  ): TypedContractMethod<
    [
      feeTo: AddressLike,
      assetAdmin: AddressLike,
      serviceRate: BigNumberish,
      bankFactory: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumLiquidityPerProvider"
  ): TypedContractMethod<[minLiquidity: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwnershipManager"
  ): TypedContractMethod<[newManager: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BandCreated"
  ): TypedContractEvent<
    BandCreatedEvent.InputTuple,
    BandCreatedEvent.OutputTuple,
    BandCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Cancellation"
  ): TypedContractEvent<
    CancellationEvent.InputTuple,
    CancellationEvent.OutputTuple,
    CancellationEvent.OutputObject
  >;
  getEvent(
    key: "GetFinanced"
  ): TypedContractEvent<
    GetFinancedEvent.InputTuple,
    GetFinancedEvent.OutputTuple,
    GetFinancedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "NewMemberAdded"
  ): TypedContractEvent<
    NewMemberAddedEvent.InputTuple,
    NewMemberAddedEvent.OutputTuple,
    NewMemberAddedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Payback"
  ): TypedContractEvent<
    PaybackEvent.InputTuple,
    PaybackEvent.OutputTuple,
    PaybackEvent.OutputObject
  >;
  getEvent(
    key: "Rekeyed"
  ): TypedContractEvent<
    RekeyedEvent.InputTuple,
    RekeyedEvent.OutputTuple,
    RekeyedEvent.OutputObject
  >;
  getEvent(
    key: "RoundUp"
  ): TypedContractEvent<
    RoundUpEvent.InputTuple,
    RoundUpEvent.OutputTuple,
    RoundUpEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BandCreated(tuple)": TypedContractEvent<
      BandCreatedEvent.InputTuple,
      BandCreatedEvent.OutputTuple,
      BandCreatedEvent.OutputObject
    >;
    BandCreated: TypedContractEvent<
      BandCreatedEvent.InputTuple,
      BandCreatedEvent.OutputTuple,
      BandCreatedEvent.OutputObject
    >;

    "Cancellation(uint256)": TypedContractEvent<
      CancellationEvent.InputTuple,
      CancellationEvent.OutputTuple,
      CancellationEvent.OutputObject
    >;
    Cancellation: TypedContractEvent<
      CancellationEvent.InputTuple,
      CancellationEvent.OutputTuple,
      CancellationEvent.OutputObject
    >;

    "GetFinanced(tuple)": TypedContractEvent<
      GetFinancedEvent.InputTuple,
      GetFinancedEvent.OutputTuple,
      GetFinancedEvent.OutputObject
    >;
    GetFinanced: TypedContractEvent<
      GetFinancedEvent.InputTuple,
      GetFinancedEvent.OutputTuple,
      GetFinancedEvent.OutputObject
    >;

    "Liquidated(tuple)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "NewMemberAdded(tuple)": TypedContractEvent<
      NewMemberAddedEvent.InputTuple,
      NewMemberAddedEvent.OutputTuple,
      NewMemberAddedEvent.OutputObject
    >;
    NewMemberAdded: TypedContractEvent<
      NewMemberAddedEvent.InputTuple,
      NewMemberAddedEvent.OutputTuple,
      NewMemberAddedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Payback(tuple)": TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;
    Payback: TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;

    "Rekeyed(address,address)": TypedContractEvent<
      RekeyedEvent.InputTuple,
      RekeyedEvent.OutputTuple,
      RekeyedEvent.OutputObject
    >;
    Rekeyed: TypedContractEvent<
      RekeyedEvent.InputTuple,
      RekeyedEvent.OutputTuple,
      RekeyedEvent.OutputObject
    >;

    "RoundUp(uint256,tuple)": TypedContractEvent<
      RoundUpEvent.InputTuple,
      RoundUpEvent.OutputTuple,
      RoundUpEvent.OutputObject
    >;
    RoundUp: TypedContractEvent<
      RoundUpEvent.InputTuple,
      RoundUpEvent.OutputTuple,
      RoundUpEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
