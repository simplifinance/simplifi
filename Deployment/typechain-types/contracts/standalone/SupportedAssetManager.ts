/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SupportedAssetManager {
  export type SupportedAssetStruct = {
    id: AddressLike;
    name: string;
    symbol: string;
  };

  export type SupportedAssetStructOutput = [
    id: string,
    name: string,
    symbol: string
  ] & { id: string; name: string; symbol: string };
}

export interface SupportedAssetManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDefaultSupportedCollateralAsset"
      | "getSupportedAssets"
      | "isSupportedAsset"
      | "listed"
      | "roleManager"
      | "setRoleManager"
      | "supportAsset"
      | "unsupportAsset"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDefaultSupportedCollateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "listed", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "roleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsupportAsset",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDefaultSupportedCollateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsupportAsset",
    data: BytesLike
  ): Result;
}

export interface SupportedAssetManager extends BaseContract {
  connect(runner?: ContractRunner | null): SupportedAssetManager;
  waitForDeployment(): Promise<this>;

  interface: SupportedAssetManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDefaultSupportedCollateralAsset: TypedContractMethod<[], [string], "view">;

  getSupportedAssets: TypedContractMethod<
    [],
    [SupportedAssetManager.SupportedAssetStructOutput[]],
    "view"
  >;

  isSupportedAsset: TypedContractMethod<
    [_asset: AddressLike],
    [boolean],
    "view"
  >;

  listed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  roleManager: TypedContractMethod<[], [string], "view">;

  setRoleManager: TypedContractMethod<
    [newManager: AddressLike],
    [boolean],
    "nonpayable"
  >;

  supportAsset: TypedContractMethod<
    [_asset: AddressLike],
    [void],
    "nonpayable"
  >;

  unsupportAsset: TypedContractMethod<
    [newAsset: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDefaultSupportedCollateralAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSupportedAssets"
  ): TypedContractMethod<
    [],
    [SupportedAssetManager.SupportedAssetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupportedAsset"
  ): TypedContractMethod<[_asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "roleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRoleManager"
  ): TypedContractMethod<[newManager: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "supportAsset"
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsupportAsset"
  ): TypedContractMethod<[newAsset: AddressLike], [void], "nonpayable">;

  filters: {};
}
