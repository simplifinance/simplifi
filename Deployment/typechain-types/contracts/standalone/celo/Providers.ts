/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Common {
  export type InterestStruct = {
    fullInterest: BigNumberish;
    intPerSec: BigNumberish;
  };

  export type InterestStructOutput = [
    fullInterest: bigint,
    intPerSec: bigint
  ] & { fullInterest: bigint; intPerSec: bigint };

  export type ProviderStruct = {
    slot: BigNumberish;
    amount: BigNumberish;
    rate: BigNumberish;
    earnStartDate: BigNumberish;
    account: AddressLike;
    accruals: Common.InterestStruct;
  };

  export type ProviderStructOutput = [
    slot: bigint,
    amount: bigint,
    rate: bigint,
    earnStartDate: bigint,
    account: string,
    accruals: Common.InterestStructOutput
  ] & {
    slot: bigint;
    amount: bigint;
    rate: bigint;
    earnStartDate: bigint;
    account: string;
    accruals: Common.InterestStructOutput;
  };
}

export interface ProvidersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assetManager"
      | "baseAsset"
      | "borrow"
      | "flexpoolFactory"
      | "getProviders"
      | "minimumLiquidity"
      | "pause"
      | "paused"
      | "provideLiquidity"
      | "removeLiquidity"
      | "roleManager"
      | "safeFactory"
      | "setMinimumLiquidity"
      | "setRoleManager"
      | "slots"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrowed"
      | "LiquidityProvided"
      | "LiquidityRemoved"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assetManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flexpoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "slots", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "assetManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flexpoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    providers: Common.ProviderStruct[],
    borrower: AddressLike
  ];
  export type OutputTuple = [
    providers: Common.ProviderStructOutput[],
    borrower: string
  ];
  export interface OutputObject {
    providers: Common.ProviderStructOutput[];
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityProvidedEvent {
  export type InputTuple = [arg0: Common.ProviderStruct];
  export type OutputTuple = [arg0: Common.ProviderStructOutput];
  export interface OutputObject {
    arg0: Common.ProviderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [arg0: Common.ProviderStruct];
  export type OutputTuple = [arg0: Common.ProviderStructOutput];
  export interface OutputObject {
    arg0: Common.ProviderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Providers extends BaseContract {
  connect(runner?: ContractRunner | null): Providers;
  waitForDeployment(): Promise<this>;

  interface: ProvidersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetManager: TypedContractMethod<[], [string], "view">;

  baseAsset: TypedContractMethod<[], [string], "view">;

  borrow: TypedContractMethod<
    [providersSlots: BigNumberish[], amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  flexpoolFactory: TypedContractMethod<[], [string], "view">;

  getProviders: TypedContractMethod<
    [],
    [Common.ProviderStructOutput[]],
    "view"
  >;

  minimumLiquidity: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  provideLiquidity: TypedContractMethod<
    [rate: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  removeLiquidity: TypedContractMethod<[], [boolean], "nonpayable">;

  roleManager: TypedContractMethod<[], [string], "view">;

  safeFactory: TypedContractMethod<[], [string], "view">;

  setMinimumLiquidity: TypedContractMethod<
    [_minLiquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoleManager: TypedContractMethod<
    [newManager: AddressLike],
    [boolean],
    "nonpayable"
  >;

  slots: TypedContractMethod<
    [provider: AddressLike],
    [[bigint, boolean] & { id: bigint; hasIndex: boolean }],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assetManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [providersSlots: BigNumberish[], amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flexpoolFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProviders"
  ): TypedContractMethod<[], [Common.ProviderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "minimumLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "provideLiquidity"
  ): TypedContractMethod<[rate: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "roleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMinimumLiquidity"
  ): TypedContractMethod<[_minLiquidity: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoleManager"
  ): TypedContractMethod<[newManager: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "slots"
  ): TypedContractMethod<
    [provider: AddressLike],
    [[bigint, boolean] & { id: bigint; hasIndex: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityProvided"
  ): TypedContractEvent<
    LiquidityProvidedEvent.InputTuple,
    LiquidityProvidedEvent.OutputTuple,
    LiquidityProvidedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Borrowed(tuple[],address)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "LiquidityProvided(tuple)": TypedContractEvent<
      LiquidityProvidedEvent.InputTuple,
      LiquidityProvidedEvent.OutputTuple,
      LiquidityProvidedEvent.OutputObject
    >;
    LiquidityProvided: TypedContractEvent<
      LiquidityProvidedEvent.InputTuple,
      LiquidityProvidedEvent.OutputTuple,
      LiquidityProvidedEvent.OutputObject
    >;

    "LiquidityRemoved(tuple)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
