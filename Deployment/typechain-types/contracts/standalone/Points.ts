/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Common {
  export type PointStruct = {
    contributor: BigNumberish;
    creator: BigNumberish;
    referrals: BigNumberish;
    user: AddressLike;
    phase: BigNumberish;
  };

  export type PointStructOutput = [
    contributor: bigint,
    creator: bigint,
    referrals: bigint,
    user: string,
    phase: bigint
  ] & {
    contributor: bigint;
    creator: bigint;
    referrals: bigint;
    user: string;
    phase: bigint;
  };

  export type PointsReturnValueStruct = {
    key: string;
    value: Common.PointStruct[];
  };

  export type PointsReturnValueStructOutput = [
    key: string,
    value: Common.PointStructOutput[]
  ] & { key: string; value: Common.PointStructOutput[] };
}

export interface PointsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deductPoint"
      | "getPhase"
      | "getPoint"
      | "getPoints"
      | "phase"
      | "registerToEarnPoints"
      | "roleManager"
      | "setPoint"
      | "setRoleManager"
      | "switchPhase"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deductPoint",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPhase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPoints", values?: undefined): string;
  encodeFunctionData(functionFragment: "phase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerToEarnPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPoint",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchPhase",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deductPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPhase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerToEarnPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchPhase",
    data: BytesLike
  ): Result;
}

export interface Points extends BaseContract {
  connect(runner?: ContractRunner | null): Points;
  waitForDeployment(): Promise<this>;

  interface: PointsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deductPoint: TypedContractMethod<
    [
      user: AddressLike,
      contributor: BigNumberish,
      creator: BigNumberish,
      referrals: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getPhase: TypedContractMethod<[], [string], "view">;

  getPoint: TypedContractMethod<
    [user: AddressLike, _phase: BigNumberish],
    [Common.PointStructOutput],
    "view"
  >;

  getPoints: TypedContractMethod<
    [],
    [Common.PointsReturnValueStructOutput[]],
    "view"
  >;

  phase: TypedContractMethod<[], [bigint], "view">;

  registerToEarnPoints: TypedContractMethod<[], [void], "nonpayable">;

  roleManager: TypedContractMethod<[], [string], "view">;

  setPoint: TypedContractMethod<
    [
      user: AddressLike,
      contributor: BigNumberish,
      creator: BigNumberish,
      referrals: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  setRoleManager: TypedContractMethod<
    [newManager: AddressLike],
    [boolean],
    "nonpayable"
  >;

  switchPhase: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deductPoint"
  ): TypedContractMethod<
    [
      user: AddressLike,
      contributor: BigNumberish,
      creator: BigNumberish,
      referrals: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPhase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPoint"
  ): TypedContractMethod<
    [user: AddressLike, _phase: BigNumberish],
    [Common.PointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoints"
  ): TypedContractMethod<[], [Common.PointsReturnValueStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "phase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerToEarnPoints"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPoint"
  ): TypedContractMethod<
    [
      user: AddressLike,
      contributor: BigNumberish,
      creator: BigNumberish,
      referrals: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoleManager"
  ): TypedContractMethod<[newManager: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "switchPhase"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  filters: {};
}
