/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addUp"
      | "mapAsset"
      | "setClaim"
      | "swapProvider"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mapAsset",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaim",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapProvider",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): IStrategy;
  waitForDeployment(): Promise<this>;

  interface: IStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addUp: TypedContractMethod<
    [user: AddressLike, epochId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  mapAsset: TypedContractMethod<
    [epochId: BigNumberish, assetInUse: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setClaim: TypedContractMethod<
    [
      claim: BigNumberish,
      fee: BigNumberish,
      credit: BigNumberish,
      epochId: BigNumberish,
      user: AddressLike,
      feeTo: AddressLike,
      allHasGF: boolean,
      txType: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  swapProvider: TypedContractMethod<
    [epochId: BigNumberish, newProv: AddressLike, oldProv: AddressLike],
    [boolean],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [epochId: BigNumberish, user: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addUp"
  ): TypedContractMethod<
    [user: AddressLike, epochId: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mapAsset"
  ): TypedContractMethod<
    [epochId: BigNumberish, assetInUse: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaim"
  ): TypedContractMethod<
    [
      claim: BigNumberish,
      fee: BigNumberish,
      credit: BigNumberish,
      epochId: BigNumberish,
      user: AddressLike,
      feeTo: AddressLike,
      allHasGF: boolean,
      txType: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapProvider"
  ): TypedContractMethod<
    [epochId: BigNumberish, newProv: AddressLike, oldProv: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [epochId: BigNumberish, user: AddressLike],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
