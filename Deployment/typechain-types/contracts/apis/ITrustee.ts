/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ITrusteeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimContribution"
      | "claimable"
      | "registerBeneficiaries"
      | "transferOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimContribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBeneficiaries",
    values: [AddressLike[], BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOut",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOut",
    data: BytesLike
  ): Result;
}

export interface ITrustee extends BaseContract {
  connect(runner?: ContractRunner | null): ITrustee;
  waitForDeployment(): Promise<this>;

  interface: ITrusteeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimContribution: TypedContractMethod<
    [poolId: BigNumberish],
    [boolean],
    "payable"
  >;

  claimable: TypedContractMethod<[poolId: BigNumberish], [bigint], "view">;

  registerBeneficiaries: TypedContractMethod<
    [
      beneficiaries: AddressLike[],
      amount: BigNumberish,
      poolId: BigNumberish,
      asset: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  transferOut: TypedContractMethod<
    [
      asset: AddressLike,
      strategy: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimContribution"
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "claimable"
  ): TypedContractMethod<[poolId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerBeneficiaries"
  ): TypedContractMethod<
    [
      beneficiaries: AddressLike[],
      amount: BigNumberish,
      poolId: BigNumberish,
      asset: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOut"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      strategy: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
