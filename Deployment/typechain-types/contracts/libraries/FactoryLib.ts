/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace Counters {
  export type CounterStruct = { _value: BigNumberish };

  export type CounterStructOutput = [_value: bigint] & { _value: bigint };
}

export declare namespace Common {
  export type UintsStruct = {
    quorum: BigNumberish;
    selector: BigNumberish;
    colCoverage: BigNumberish;
    duration: BigNumberish;
    intRate: BigNumberish;
  };

  export type UintsStructOutput = [
    quorum: bigint,
    selector: bigint,
    colCoverage: bigint,
    duration: bigint,
    intRate: bigint
  ] & {
    quorum: bigint;
    selector: bigint;
    colCoverage: bigint;
    duration: bigint;
    intRate: bigint;
  };

  export type Uint256sStruct = {
    fullInterest: BigNumberish;
    intPerSec: BigNumberish;
    unit: BigNumberish;
    currentPool: BigNumberish;
    epochId: BigNumberish;
  };

  export type Uint256sStructOutput = [
    fullInterest: bigint,
    intPerSec: bigint,
    unit: bigint,
    currentPool: bigint,
    epochId: bigint
  ] & {
    fullInterest: bigint;
    intPerSec: bigint;
    unit: bigint;
    currentPool: bigint;
    epochId: bigint;
  };

  export type AddressesStruct = {
    asset: AddressLike;
    lastPaid: AddressLike;
    strategy: AddressLike;
    admin: AddressLike;
  };

  export type AddressesStructOutput = [
    asset: string,
    lastPaid: string,
    strategy: string,
    admin: string
  ] & { asset: string; lastPaid: string; strategy: string; admin: string };

  export type ContributorStruct = {
    durOfChoice: BigNumberish;
    expInterest: BigNumberish;
    payDate: BigNumberish;
    turnTime: BigNumberish;
    loan: BigNumberish;
    colBals: BigNumberish;
    id: AddressLike;
  };

  export type ContributorStructOutput = [
    durOfChoice: bigint,
    expInterest: bigint,
    payDate: bigint,
    turnTime: bigint,
    loan: bigint,
    colBals: bigint,
    id: string
  ] & {
    durOfChoice: bigint;
    expInterest: bigint;
    payDate: bigint;
    turnTime: bigint;
    loan: bigint;
    colBals: bigint;
    id: string;
  };

  export type RankStruct = { admin: boolean; member: boolean };

  export type RankStructOutput = [admin: boolean, member: boolean] & {
    admin: boolean;
    member: boolean;
  };

  export type ContributorDataStruct = {
    cData: Common.ContributorStruct;
    rank: Common.RankStruct;
    slot: BigNumberish;
  };

  export type ContributorDataStructOutput = [
    cData: Common.ContributorStructOutput,
    rank: Common.RankStructOutput,
    slot: bigint
  ] & {
    cData: Common.ContributorStructOutput;
    rank: Common.RankStructOutput;
    slot: bigint;
  };

  export type PoolStruct = {
    userCount: Counters.CounterStruct;
    uints: Common.UintsStruct;
    uint256s: Common.Uint256sStruct;
    addrs: Common.AddressesStruct;
    allGh: BigNumberish;
    isPermissionless: boolean;
    cData: Common.ContributorDataStruct[];
    stage: BigNumberish;
  };

  export type PoolStructOutput = [
    userCount: Counters.CounterStructOutput,
    uints: Common.UintsStructOutput,
    uint256s: Common.Uint256sStructOutput,
    addrs: Common.AddressesStructOutput,
    allGh: bigint,
    isPermissionless: boolean,
    cData: Common.ContributorDataStructOutput[],
    stage: bigint
  ] & {
    userCount: Counters.CounterStructOutput;
    uints: Common.UintsStructOutput;
    uint256s: Common.Uint256sStructOutput;
    addrs: Common.AddressesStructOutput;
    allGh: bigint;
    isPermissionless: boolean;
    cData: Common.ContributorDataStructOutput[];
    stage: bigint;
  };
}

export interface FactoryLibInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "AllGh"): EventFragment;
}

export namespace AllGhEvent {
  export type InputTuple = [epochId: BigNumberish, pool: Common.PoolStruct];
  export type OutputTuple = [epochId: bigint, pool: Common.PoolStructOutput];
  export interface OutputObject {
    epochId: bigint;
    pool: Common.PoolStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FactoryLib extends BaseContract {
  connect(runner?: ContractRunner | null): FactoryLib;
  waitForDeployment(): Promise<this>;

  interface: FactoryLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AllGh"
  ): TypedContractEvent<
    AllGhEvent.InputTuple,
    AllGhEvent.OutputTuple,
    AllGhEvent.OutputObject
  >;

  filters: {
    "AllGh(uint256,tuple)": TypedContractEvent<
      AllGhEvent.InputTuple,
      AllGhEvent.OutputTuple,
      AllGhEvent.OutputObject
    >;
    AllGh: TypedContractEvent<
      AllGhEvent.InputTuple,
      AllGhEvent.OutputTuple,
      AllGhEvent.OutputObject
    >;
  };
}
