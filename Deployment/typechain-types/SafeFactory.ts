/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SafeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "feeTo"
      | "getSafe"
      | "pingSafe"
      | "roleManager"
      | "setFeeTo"
      | "setRoleManager"
      | "totalSafes"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSafe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pingSafe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSafes",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSafe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pingSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSafes", data: BytesLike): Result;
}

export interface SafeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SafeFactory;
  waitForDeployment(): Promise<this>;

  interface: SafeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  feeTo: TypedContractMethod<[], [string], "view">;

  getSafe: TypedContractMethod<[unit: BigNumberish], [string], "view">;

  pingSafe: TypedContractMethod<[unit: BigNumberish], [string], "nonpayable">;

  roleManager: TypedContractMethod<[], [string], "view">;

  setFeeTo: TypedContractMethod<[newFeeTo: AddressLike], [void], "nonpayable">;

  setRoleManager: TypedContractMethod<
    [newManager: AddressLike],
    [boolean],
    "nonpayable"
  >;

  totalSafes: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "feeTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSafe"
  ): TypedContractMethod<[unit: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pingSafe"
  ): TypedContractMethod<[unit: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "roleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFeeTo"
  ): TypedContractMethod<[newFeeTo: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoleManager"
  ): TypedContractMethod<[newManager: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSafes"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
