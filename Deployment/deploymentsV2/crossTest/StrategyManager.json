{
  "address": "0xbBcFe9aECacee498FFC00b652b7e3dDA34565c0d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ownershipManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "createStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setOwnershipManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd7d6a150d7debe2961f274f51ad0def3080f2bd784a1422bbf052e23a592ddf3",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xbBcFe9aECacee498FFC00b652b7e3dDA34565c0d",
    "transactionIndex": 0,
    "gasUsed": "1451689",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2c67d80c3b7d21015dd09718fb1eded50aad29eeab767577b8b296dada9e0324",
    "transactionHash": "0xd7d6a150d7debe2961f274f51ad0def3080f2bd784a1422bbf052e23a592ddf3",
    "logs": [],
    "blockNumber": 6935396,
    "cumulativeGasUsed": "1451689",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe09e23F8a8032BB39326098802c970f9b48D726C"
  ],
  "numDeployments": 6,
  "solcInputHash": "2fed8b31c5d065153d6a744af0eb5c90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownershipManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"createStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setOwnershipManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createStrategy(address)\":{\"details\":\"Create a new strategy.\"},\"getStrategy(address)\":{\"params\":{\"user\":\": User Address\"}},\"setOwnershipManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}}},\"stateVariables\":{\"strategies\":{\"details\":\"List of Strategies and their keys \"},\"strategyMap\":{\"details\":\"Mapping of addresses to strategies. Also used as reverse map of strategies to status.\"}},\"title\":\"SmartStrategyAdmin: A standalone contract that manages strategy creation,  deletion, read and write data. Author: Simplifinance\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createStrategy(address)\":{\"notice\":\"'user' should not own a strategy before now.          only address with owner permission can call.\"},\"getStrategy(address)\":{\"notice\":\"Returns strategy of 'user'\"},\"setOwnershipManager(address)\":{\"notice\":\"Set Ownership manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/strategies/StrategyManager.sol\":\"StrategyManager\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d\",\"license\":\"MIT\"},\"contracts/abstracts/OnlyOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { MsgSender, OwnerShip } from \\\"../implementations/OwnerShip.sol\\\";\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n\\r\\nabstract contract OnlyOwner is MsgSender {\\r\\n    address public ownershipManager;\\r\\n\\r\\n    constructor(address _ownershipManager)\\r\\n    {\\r\\n        _setOwnershipManager(_ownershipManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     * @param errorMessage : Custom error message\\r\\n     */\\r\\n    modifier onlyOwner(string memory errorMessage) {\\r\\n        address mgr = ownershipManager;\\r\\n        require(mgr != address(0), \\\"OnlyOwner: Manager not set\\\");\\r\\n        require(IOwnerShip(mgr).isOwner(_msgSender()), errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setOwnershipManager(\\r\\n        address newManager\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        ownershipManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Ownership manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setOwnershipManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyOwner(\\\"OnlyOwner: Not permitted\\\")\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setOwnershipManager(newManager);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x69c663365e2cf43d13d18b4926714078df66472a2d0aca7988dae04b61feafb6\",\"license\":\"MIT\"},\"contracts/apis/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport { Counters } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\\\";\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface Common {\\r\\n  /**\\r\\n   * @dev Tags/Placeholders for functions available in the implementation contract.\\r\\n   */\\r\\n  enum FuncTag {\\r\\n    JOIN, \\r\\n    GET, \\r\\n    PAYBACK, \\r\\n    WITHDRAW,\\r\\n    ENDED\\r\\n  }\\r\\n\\r\\n  enum TransactionType { NATIVE, ERC20 }\\r\\n\\r\\n  /**\\r\\n   *  @dev Data for each pool. \\r\\n   *    Note: We use the term `allGh` to denote when every participant in a \\r\\n   *    group had get financed.\\r\\n   *  @param isMember : Whether user is a member or not\\r\\n   *  @param isAdmin: Whether user is an admin or not i.e the initiator.\\r\\n   *  @param payDate: The data in future on which the borrowed fund must be retured\\r\\n   *  @param turnTime : This is a period or interval between the last received and the next.\\r\\n   *  @param owings: Total debts owed by the last fund recipient.\\r\\n   *  @param colBals: Collateral balances of the last recipient.\\r\\n   *  @param hasGH : Whether an user/current msg.sender has received or not.\\r\\n   *  @param id : Address of the last recipient.  \\r\\n   */\\r\\n  struct Contributor {\\r\\n    uint durOfChoice;\\r\\n    uint expInterest;\\r\\n    uint payDate;\\r\\n    uint turnTime;\\r\\n    uint loan;\\r\\n    uint colBals;\\r\\n    address id;\\r\\n    bool sentQuota;\\r\\n  }\\r\\n\\r\\n  struct Rank {\\r\\n    bool admin;\\r\\n    bool member;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @dev Pool data\\r\\n   *  @param uints : Structured data of all unsigned integers type uint8.\\r\\n   *  @param uint256s: Structured data of all unsigned integers type uint256.\\r\\n   *  @param addrs : Structured data of all address type\\r\\n   *  @param allGh : Total members already got financed.\\r\\n   *  @param isPermissionless : A tag for each pool showing whether permissionless or otherwise.\\r\\n   *  @param cData : Participants i.e Providers and Borrowers.\\r\\n   */\\r\\n  struct Pool {\\r\\n    Counters.Counter userCount;\\r\\n    Uints uints;\\r\\n    Uint256s uint256s;\\r\\n    Addresses addrs;\\r\\n    uint allGh;\\r\\n    bool isPermissionless;\\r\\n    ContributorData[] cData;\\r\\n    FuncTag stage;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Structured data types to convey parameters to avoid Stack too deep error.\\r\\n    @param quorum : The maximum number of users that can form a contribution group.\\r\\n    @param duration : The number of days the contribution contract will expires. It should be \\r\\n                      specified in hour.\\r\\n    @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \\r\\n                  in order to be able to get financed. This should be specified in percentage i.e \\r\\n                  if raw ccr is 1.2 , actual ccr should be 1.2 * 100 = 120. It is pertinent to be\\r\\n                  mindful how this works in our protocol. Even if ccr is 1 indicating that contributor\\r\\n                  must hold at least 100% of collateral in their wallet before they can GF, it must \\r\\n                  be rendered in input section as 1 * 100. 100 is the minimum admins of bands\\r\\n                  can give as collateral coverage ratio.\\r\\n    @param value : The total value of pooled fund.\\r\\n    @param members : List of members in a group.\\r\\n    @param intRate : The rate of interest to charge for the duration of use of the fund.\\r\\n    @param asset : The contract address of an approved assets in this group. \\r\\n                    @notice The pooled asset of this group is denominated in this currency. \\r\\n  */\\r\\n  struct CreatePoolParam {\\r\\n    uint16 intRate;\\r\\n    uint8 quorum;\\r\\n    uint16 duration;\\r\\n    uint24 colCoverage; \\r\\n    uint unitContribution;\\r\\n    address[] members;\\r\\n    address asset;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice Structured types - uint256\\r\\n   *  @param unit : Unit contribution.\\r\\n   *  @param currentPool : Total contributed to date.\\r\\n   */\\r\\n  struct Uint256s {\\r\\n    uint fullInterest;\\r\\n    uint intPerSec;\\r\\n    uint256 unit;\\r\\n    uint256 currentPool;\\r\\n    uint epochId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice Structured types - unit less than uint124\\r\\n   *  @param intRate : Rate of interest per duration. \\r\\n   *  @param quorum : The maximum number of users that can form a contribution group.\\r\\n   *  @param selector : This is like the hand or ticker of a clock that is used to select\\r\\n   *                    the next contributor to get finance.\\r\\n   *  @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \\r\\n                  in order to be able to get financed.\\r\\n      @param duration : The number of days the contribution contract will expires.\\r\\n   */\\r\\n  struct Uints {\\r\\n    uint quorum;\\r\\n    uint selector;\\r\\n    uint colCoverage;\\r\\n    uint duration;\\r\\n    uint intRate;\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n   * @notice Structured types - Address\\r\\n   * @param asset : Contract address of the asset in use.\\r\\n   * @param lastPaid: Last contributor who got finance.\\r\\n   * @param strategy : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n   * @param admin : Pool creator.\\r\\n   * \\r\\n   */\\r\\n  struct Addresses {\\r\\n    address asset;\\r\\n    address lastPaid;\\r\\n    address strategy;\\r\\n    address admin;\\r\\n  }\\r\\n  \\r\\n  struct AddTobandParam {\\r\\n    uint epochId;\\r\\n    bool isPermissioned;\\r\\n  }\\r\\n\\r\\n  struct CreatePoolReturnValue {\\r\\n    Pool pool; \\r\\n    ContributorData cData; \\r\\n    // uint epochId;\\r\\n  }\\r\\n\\r\\n  struct PaybackParam {\\r\\n    uint epochId;\\r\\n    address user;\\r\\n  }\\r\\n\\r\\n  struct UpdateMemberDataParam {\\r\\n    uint24 durOfChoice;\\r\\n    address expected;\\r\\n    uint epochId; \\r\\n    uint fee;\\r\\n    uint msgValue;\\r\\n    uint xfiUSDPriceInDecimals;\\r\\n    Pool pool;\\r\\n  }\\r\\n\\r\\n  struct InterestReturn {\\r\\n    uint fullInterest;\\r\\n    uint intPerSec;\\r\\n    uint intPerChoiceOfDur;\\r\\n  }\\r\\n\\r\\n  struct CommonEventData {\\r\\n    Pool pool;\\r\\n    uint debtBal;\\r\\n    uint colBal;\\r\\n  }\\r\\n\\r\\n  struct ContributorData {\\r\\n    Contributor cData;\\r\\n    Rank rank;\\r\\n    uint8 slot;\\r\\n  }\\r\\n\\r\\n  struct Balances {\\r\\n    uint xfi;\\r\\n    uint erc20;\\r\\n  }\\r\\n\\r\\n  struct DebtReturnValue {\\r\\n    uint debt;\\r\\n    uint slot;\\r\\n  }\\r\\n\\r\\n  struct SetClaimParam {\\r\\n    uint amount;\\r\\n    uint epochId;\\r\\n    uint fee;\\r\\n    uint debt;\\r\\n    uint value;\\r\\n    address contributor;\\r\\n    address strategy;\\r\\n    address feeTo;\\r\\n    bool allHasGF;\\r\\n    TransactionType txType;\\r\\n  }\\r\\n\\r\\n  error UpdateStrategyError();\\r\\n  error CollateralCoverageCannotGoBelow_100(uint24 ccr);\\r\\n\\r\\n}\",\"keccak256\":\"0x445dbcc0c2d0671e0ecef6a9a480df145cc88731d12e780df3d9febce1d29170\",\"license\":\"MIT\"},\"contracts/apis/IOwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IOwnerShip \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IOwnerShip {\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xe21511940e88a7e8036b4b6adfde25125f7f3d49cde2732bffd219847b3ed6c0\",\"license\":\"MIT\"},\"contracts/apis/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n  error ContractBalanceTooLow();\\r\\n  error InsufficientNativeBalanceInContract(uint);\\r\\n  error InsufficientCredit(uint, uint);\\r\\n  \\r\\n  /**\\r\\n   * @dev Add contributor to the list\\r\\n   * @param user : Contributor address\\r\\n   * @param epochId : Epoch Id\\r\\n   */\\r\\n  function addUp(\\r\\n    address user,\\r\\n    uint epochId\\r\\n  ) \\r\\n    external\\r\\n    returns(bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Map assetInUse to epoch Id in Strategy.\\r\\n   * @param epochId: Epoch Id otherwise known as pool Id.\\r\\n   * @param assetInUse: Contract address of the ERC20 token the contribution is based on.\\r\\n   * @return success\\r\\n   */\\r\\n  function mapAsset(\\r\\n    uint epochId, \\r\\n    address assetInUse\\r\\n  ) \\r\\n    external \\r\\n    returns(bool success);\\r\\n\\r\\n  /**\\r\\n   * @dev Utility to activate claim for a contributor.\\r\\n   * @param epochId: Epoch Id otherwise known as pool Id.\\r\\n   * @param claim: withdrawable amount.\\r\\n   * @param fee: Amount charged as fee.\\r\\n   * @param user: User address.\\r\\n   * @param feeTo: Fee receiver.\\r\\n   * @param txType : The type of transaction to perform in the call.\\r\\n   *                Can be either ERC20 or native transaction.\\r\\n  *  @param allHasGF : A boolean flag indicating whether the epoch should end or not.\\r\\n   * @return actualClaim\\r\\n   */\\r\\n  function setClaim(\\r\\n    uint claim,\\r\\n    uint fee,\\r\\n    uint credit,\\r\\n    uint epochId,\\r\\n    address user,\\r\\n    address feeTo,\\r\\n    bool allHasGF,\\r\\n    Common.TransactionType txType\\r\\n  ) \\r\\n    external\\r\\n    payable\\r\\n    returns(uint actualClaim);\\r\\n\\r\\n  function swapProvider(\\r\\n    uint epochId, \\r\\n    address newProv, \\r\\n    address oldProv\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function withdraw(\\r\\n    uint epochId,\\r\\n    address user\\r\\n  )\\r\\n    external\\r\\n    returns(uint xfiBalances);\\r\\n}\",\"keccak256\":\"0x187d7c5f85f91c42d4c0da6aade41df11de9ac25653e1b0dc9b27e6ec67eb5c5\",\"license\":\"MIT\"},\"contracts/apis/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title Interface of the Strateg manager\\r\\n * @author : Simplifinance\\r\\n */\\r\\ninterface IStrategyManager {\\r\\n  error ZeroAddress(address);\\r\\n  \\r\\n  /**\\r\\n   * Query strategy for user\\r\\n   * @param user : Address to get strategy for\\r\\n   * @return A strategy if none was found, it returns address(0).\\r\\n   */\\r\\n  function getStrategy(address user) external view returns(address);\\r\\n\\r\\n/**\\r\\n * Clones and return a new strategy\\r\\n * @param user : Target address for whom to create strategy\\r\\n */\\r\\n  function createStrategy(address user) external returns(address strategy);\\r\\n\\r\\n  /**\\r\\n   * Strategy struct map\\r\\n   * key: user address { EOA }\\r\\n   * value: Strategy { Contract } \\r\\n   */\\r\\n  struct StrategyData {\\r\\n    address key;\\r\\n    address value;\\r\\n  }\\r\\n  \\r\\n}\",\"keccak256\":\"0x20da1705fec8cdf769524bf21e1520387245b184d153bff962b516ea42ae9e82\",\"license\":\"MIT\"},\"contracts/implementations/OwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title OwnerShip \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Standalone contract for managing ownership in Simplifi protocol.\\r\\n */\\r\\ncontract OwnerShip is IOwnerShip, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of owners.\\r\\n     */\\r\\n    uint public ownersCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with ownership permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _isOwner;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of ownersCount to addresses.\\r\\n     * A valid id will return a mapped owner.\\r\\n     */\\r\\n    mapping (uint => address) public owners;\\r\\n\\r\\n    /**\\r\\n     * @dev Only owner is allowed.\\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        require(_isOwner[_msgSender()], \\\"Oop! Caller is not recognized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     */\\r\\n    function _getOwner(uint ownerId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _owner) \\r\\n    {\\r\\n        _owner = owners[ownerId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as owner.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setOwner(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"Simplifi OwnerShip: 'target' parameter is empty\\\");\\r\\n        add? (_isOwner[target] = true, ownersCount ++) : (_isOwner[target] = false, ownersCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new owner address\\r\\n     * @param newOwners: New owners\\r\\n     * @notice Only address with owner permission can add another owner.\\r\\n     */\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < newOwners.length; r++) {\\r\\n            _setOwner(newOwners[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as owner.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with owner permission can remove another owner.\\r\\n     */\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setOwner(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An owner can renounce their ownership. This however will not leave the\\r\\n     * contract empty without an owner. There must be at least one owner left.\\r\\n     * @notice Only address with owner permission can renounce ownership.\\r\\n     */\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(ownersCount > 1, \\\"At least 2 owners is required to leave\\\"); \\r\\n        _setOwner(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param ownerId : Owner Id. \\r\\n     */\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getOwner(ownerId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an owner.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _isOwner[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xecca6e7a2c2684e193fcb16ac131d1b2895f981862969101d96d94616db70c0c\",\"license\":\"MIT\"},\"contracts/implementations/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { SafeMath } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\\\";\\r\\nimport { SafeCallERC20, IERC20 } from \\\"../../libraries/SafeCallERC20.sol\\\";\\r\\nimport { IStrategy } from \\\"../../apis/IStrategy.sol\\\";\\r\\nimport { Common } from \\\"../../apis/Common.sol\\\";\\r\\nimport { OnlyOwner } from \\\"../../abstracts/OnlyOwner.sol\\\";\\r\\n\\r\\ncontract Strategy is IStrategy, OnlyOwner {\\r\\n  using SafeMath for uint;\\r\\n\\r\\n  /**\\r\\n   * @dev Approvals in native coin i.e XFI \\r\\n   * mapping of providera to balances.\\r\\n   */\\r\\n  mapping(address => mapping (uint => uint)) private nativeApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev mapping of epoch Id to assets.\\r\\n   * Each epoch might use different asset as constribution base i.e\\r\\n   * A band creator might want to contribute in USDT while another \\r\\n   * might choose USDC. The base point is that any asset in use must\\r\\n   * conform to ERC20 standard.\\r\\n   */\\r\\n  mapping (uint => address) public assets;\\r\\n\\r\\n  /**\\r\\n   * @notice Mapping of epoches to list of contributors.\\r\\n   */\\r\\n  mapping (uint => address[]) public contributors;\\r\\n\\r\\n  /**\\r\\n   * @notice Every loan repayment is recorded here\\r\\n   * Mapping of epochId to credit balances.\\r\\n   * Using this method to track amortization records will enables us \\r\\n   * to properly account for loans and interests payments from all \\r\\n   * contributors in an epoch. \\r\\n   */\\r\\n  mapping (uint => uint) public credits;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes state variables.\\r\\n   * OnlyOwner function.\\r\\n   */\\r\\n  constructor (address _ownershipManager) OnlyOwner(_ownershipManager)  {}\\r\\n\\r\\n  receive() external payable onlyOwner(\\\"Strategy: Not received - Not permitted\\\") {}\\r\\n\\r\\n  /**\\r\\n   * @dev Implementation of IStrategy.addUp\\r\\n   * See IStrategy.addUp for doc\\r\\n  */\\r\\n  function addUp(\\r\\n    address user,\\r\\n    uint epochId\\r\\n  ) \\r\\n    external\\r\\n    onlyOwner(\\\"Strategy - addUp: Not permitted\\\")\\r\\n    returns(bool)\\r\\n  {\\r\\n    contributors[epochId].push(user);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Implementation of IStrategy.mapAsset\\r\\n   * See IStrategy.mapAsset for doc\\r\\n   */\\r\\n  function mapAsset(\\r\\n    uint epochId, \\r\\n    address assetInUse\\r\\n  ) \\r\\n    external\\r\\n    onlyOwner(\\\"Strategy - mapAsset: Not permitted\\\")\\r\\n    returns(bool) \\r\\n  {\\r\\n    assets[epochId] = assetInUse;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Return outstanding allowance\\r\\n   * @param asset : Asset in use\\r\\n   * @param user : provider\\r\\n   */\\r\\n  function _prevAllowance(\\r\\n    address asset, \\r\\n    address user\\r\\n  ) \\r\\n    internal \\r\\n    view returns(uint allowance) \\r\\n  {\\r\\n    allowance = IERC20(asset).allowance(address(this), user);\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n   * @dev Implementation of IStrategy.setClaim\\r\\n   * See IStrategy.setClaim for doc.\\r\\n   * @notice 'credit' should only be set if borrower is returning the borrowed fund.\\r\\n  */ \\r\\n  function setClaim(\\r\\n    uint claim,\\r\\n    uint fee,\\r\\n    uint credit,\\r\\n    uint epochId,\\r\\n    address user,\\r\\n    address feeTo, \\r\\n    bool allHasGF,\\r\\n    Common.TransactionType txType\\r\\n  ) \\r\\n    external\\r\\n    payable\\r\\n    onlyOwner(\\\"Strategy - setClaim: Not permitted\\\")\\r\\n    returns(uint actualClaim)\\r\\n  {\\r\\n    address asset = assets[epochId];\\r\\n    if(txType == Common.TransactionType.ERC20) {\\r\\n      actualClaim = claim > fee? claim - fee : claim;\\r\\n      _setAllowance(user, asset, actualClaim);\\r\\n      if(fee > 0) {\\r\\n        IERC20(asset).transfer(feeTo, fee);\\r\\n      }\\r\\n    } else {\\r\\n      nativeApprovals[user][epochId] += claim;\\r\\n      if(credit > 0) credits[epochId] += credit;\\r\\n      if(allHasGF) {\\r\\n        _roundUp(epochId, assets[epochId]); //-------------------------------------hetr\\r\\n      }\\r\\n    }\\r\\n    return actualClaim;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Closes the current epoch and set claims for all contributors \\r\\n   *          of this epoch.\\r\\n   * @param epochId : Epoch Id.\\r\\n   * @param asset : Asset in use\\r\\n   */\\r\\n  function _roundUp(\\r\\n    uint epochId,\\r\\n    address asset\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    uint credit = credits[epochId];\\r\\n    address[] memory providers = contributors[epochId];\\r\\n    // credits[epochId] = credit.sub(credit);\\r\\n    credits[epochId] = 0;\\r\\n    uint size = providers.length;\\r\\n    // if(credit < size) revert InsufficientCredit(credit, size);\\r\\n    assert(credit > size);\\r\\n    uint allowance = credit.div(size);\\r\\n    for(uint i = 0; i < size; i++){\\r\\n      _setAllowance(providers[i], asset, allowance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve spender contributor 'to' to spend from contract's balance\\r\\n   * @param to : Contributor\\r\\n   * @param asset : Currency in use\\r\\n   * @param amount : Value\\r\\n   */\\r\\n  function _setAllowance(\\r\\n    address to, \\r\\n    address asset, \\r\\n    uint256 amount\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    uint prevAllow = _prevAllowance(asset, to);\\r\\n    IERC20(asset).approve(to, prevAllow > 0? amount + prevAllow : amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @dev Withdraw Native coin. \\r\\n   */\\r\\n  function withdraw(\\r\\n    uint epochId,\\r\\n    address user\\r\\n  ) \\r\\n    external \\r\\n    onlyOwner(\\\"Strategy: Not Permitted\\\")\\r\\n    returns(uint xfiBalances) \\r\\n  {\\r\\n    xfiBalances = nativeApprovals[user][epochId];\\r\\n    nativeApprovals[user][epochId] = 0;\\r\\n    require(xfiBalances > 0, \\\"No claim\\\");\\r\\n    if(address(this).balance == 0) {\\r\\n      revert InsufficientNativeBalanceInContract(address(this).balance);\\r\\n    }\\r\\n    payable(user).transfer(xfiBalances);\\r\\n    // (bool sent,) = sender.call{value: balance}(\\\"\\\");\\r\\n    // require(sent,\\\"Op failed\\\");\\r\\n    return xfiBalances;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Swaps addresses. Only during liquidation. We attemp to replace\\r\\n   *  the defaulted party with the liquidated.\\r\\n   * @param epochId : EpochId.\\r\\n   * @param newProv : New address.\\r\\n   * @param oldProv : Old address.\\r\\n   */\\r\\n  function swapProvider(\\r\\n    uint epochId, \\r\\n    address newProv, \\r\\n    address oldProv\\r\\n  ) \\r\\n    external \\r\\n    onlyOwner(\\\"Strategy - swapProvider: Not permitted\\\")\\r\\n    returns(bool success) \\r\\n  {\\r\\n    address[] memory addrs = contributors[epochId]; \\r\\n    uint slot;\\r\\n    for(uint i = 0; i < addrs.length; i++) {\\r\\n      if(addrs[i] == oldProv) {\\r\\n        slot = i;\\r\\n        success = true;\\r\\n      }\\r\\n    }\\r\\n    if(success) {\\r\\n      contributors[epochId][slot] = newProv;\\r\\n    }\\r\\n    return success;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0xc879f16822445f2153962972bf3d910bcf4358b15553eb478b8f187a30c0f8b8\",\"license\":\"MIT\"},\"contracts/implementations/strategies/StrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IStrategyManager } from \\\"../../apis/IStrategyManager.sol\\\";\\r\\nimport { Strategy } from \\\"./Strategy.sol\\\";\\r\\nimport { OnlyOwner } from \\\"../../abstracts/OnlyOwner.sol\\\";\\r\\n\\r\\n/**@title SmartStrategyAdmin: A standalone contract that manages strategy creation, \\r\\n   deletion, read and write data.\\r\\n\\r\\n   Author: Simplifinance\\r\\n */\\r\\ncontract StrategyManager is IStrategyManager, OnlyOwner {\\r\\n  // using Clones for address;\\r\\n\\r\\n  // Strategy count \\r\\n  uint public totalStrategies;\\r\\n\\r\\n/**\\r\\n * @dev List of Strategies and their keys \\r\\n */\\r\\n  StrategyData[] private strategies;\\r\\n\\r\\n /**\\r\\n * @dev Mapping of addresses to strategies.\\r\\n * Also used as reverse map of strategies to status.\\r\\n */\\r\\n  mapping(address => address) private strategyMap;\\r\\n\\r\\n  constructor (\\r\\n    address _ownershipManager\\r\\n  ) OnlyOwner(_ownershipManager) {}\\r\\n\\r\\n  receive() \\r\\n    external \\r\\n    payable \\r\\n  {\\r\\n    revert();\\r\\n  }\\r\\n  \\r\\n  /**@dev Return if account owns a strategy or not\\r\\n  */\\r\\n  function _hasStrategy(\\r\\n    address user\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n    returns (bool) \\r\\n  {\\r\\n    return strategyMap[user] != address(0);\\r\\n  }\\r\\n\\r\\n  // Returns smartStrategy for 'user'\\r\\n  function _getStrategy(\\r\\n    address user\\r\\n  ) \\r\\n    internal \\r\\n    view returns(address) \\r\\n  { \\r\\n    return strategyMap[user];\\r\\n  }\\r\\n  \\r\\n  /**@dev Create a new strategy.\\r\\n   * @notice 'user' should not own a strategy before now.\\r\\n   *          only address with owner permission can call.\\r\\n  */\\r\\n  function createStrategy(\\r\\n    address user\\r\\n  )\\r\\n    external\\r\\n    onlyOwner(\\\"StrategyMgr - createStrategy: Not permitted\\\")\\r\\n    returns(address _strategy) \\r\\n  {\\r\\n    if(!_hasStrategy(user)){\\r\\n      _strategy = _createStrategy(user);\\r\\n    } else {\\r\\n      _strategy = _getStrategy(user);\\r\\n    }\\r\\n    return _strategy;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Create strategy - private function\\r\\n    * @param caller : msg.sender\\r\\n   * \\r\\n   * @notice Even if user is trying to rekey or upgrade smartstrategy, same amount of fee is required\\r\\n   * for successful upgrade.\\r\\n   */\\r\\n  function _createStrategy(\\r\\n    address caller\\r\\n  ) \\r\\n    private \\r\\n    returns(address strategy) \\r\\n  {\\r\\n    totalStrategies ++;\\r\\n    // address ssi = instance;\\r\\n    // strategy = ssi.cloneDeterministic(keccak256(abi.encodePacked(totalStrategies, caller)));\\r\\n    strategy = address(new Strategy(ownershipManager));\\r\\n    _updateStrategy(caller, strategy);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Update storage with the new Strategy instance : {internal}\\r\\n   * @param user : User/Caller address \\r\\n   * @param strategy : New Strategy address\\r\\n   */\\r\\n  function _updateStrategy(\\r\\n    address user, \\r\\n    address strategy\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    strategyMap[user] = strategy;\\r\\n  }\\r\\n\\r\\n  /// Returns strategy of 'user'\\r\\n  /// @param user : User Address\\r\\n  function getStrategy(\\r\\n    address user\\r\\n  ) \\r\\n    external \\r\\n    view \\r\\n    returns(address) \\r\\n  { \\r\\n    return _getStrategy(user);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xade39c8c5999e220a224cc9dcf212eab3368eb1cd72ab4adc1f8546996014fa8\",\"license\":\"MIT\"},\"contracts/libraries/SafeCallERC20.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nlibrary SafeCallERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    unchecked {\\r\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n      uint256 newAllowance = oldAllowance - value;\\r\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** Imported from Openzeppelin\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data);\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation failed\\\");\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0x830e1648c71241b0d5272ba942c8898c38a3ce195e230c5f6d66a64aaff12a92\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161197038038061197083398101604081905261002f91610050565b600080546001600160a01b0319166001600160a01b03831617905550610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b6118e18061008f6000396000f3fe60806040526004361061004e5760003560e01c806361737d621461005d5780637316bcd114610092578063b88a3915146100ca578063f8806a13146100ea578063f96d7b801461012357600080fd5b3661005857600080fd5b600080fd5b34801561006957600080fd5b5061007d610078366004610498565b610147565b60405190151581526020015b60405180910390f35b34801561009e57600080fd5b506100b26100ad366004610498565b61029c565b6040516001600160a01b039091168152602001610089565b3480156100d657600080fd5b506000546100b2906001600160a01b031681565b3480156100f657600080fd5b506100b2610105366004610498565b6001600160a01b039081166000908152600360205260409020541690565b34801561012f57600080fd5b5061013960015481565b604051908152602001610089565b60408051808201909152601881527f4f6e6c794f776e65723a204e6f74207065726d697474656400000000000000006020820152600080549091906001600160a01b0316806101dd5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c794f776e65723a204d616e61676572206e6f742073657400000000000060448201526064015b60405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906104c8565b82906102745760405162461bcd60e51b81526004016101d491906104ea565b50600080546001600160a01b0319166001600160a01b038616179055600192505b5050919050565b60006040518060600160405280602b8152602001611881602b91396000546001600160a01b0316806103105760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c794f776e65723a204d616e61676572206e6f742073657400000000000060448201526064016101d4565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038891906104c8565b82906103a75760405162461bcd60e51b81526004016101d491906104ea565b506001600160a01b03808516600090815260036020526040902054166103d7576103d0846103f8565b9250610295565b5050506001600160a01b039081166000908152600360205260409020541690565b600180546000918261040983610539565b90915550506000546040516001600160a01b03909116906104299061048b565b6001600160a01b039091168152602001604051809103906000f080158015610455573d6000803e3d6000fd5b506001600160a01b03808416600090815260036020526040902080546001600160a01b0319169183169190911790559050919050565b6113208061056183390190565b6000602082840312156104aa57600080fd5b81356001600160a01b03811681146104c157600080fd5b9392505050565b6000602082840312156104da57600080fd5b815180151581146104c157600080fd5b60006020808352835180602085015260005b81811015610518578581018301518582016040015282016104fc565b506000604082860101526040601f19601f8301168501019250505092915050565b60006001820161055957634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161132038038061132083398101604081905261002f91610050565b600080546001600160a01b0319166001600160a01b03831617905550610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b6112918061008f6000396000f3fe6080604052600436106100945760003560e01c806354346b661161005957806354346b661461024557806361737d621461027d5780636d6ccde11461029d578063b88a3915146102bd578063cf35bdd0146102dd57600080fd5b8062f714ce14610182578063036a1c22146101b55780633be42320146101e257806341a8d7ce14610212578063527846641461023257600080fd5b3661017d576040518060600160405280602681526020016111cc602691396000546001600160a01b0316806100e45760405162461bcd60e51b81526004016100db90610ed5565b60405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610f1d565b829061017b5760405162461bcd60e51b81526004016100db9190610f3a565b005b600080fd5b34801561018e57600080fd5b506101a261019d366004610fa5565b610313565b6040519081526020015b60405180910390f35b3480156101c157600080fd5b506101a26101d0366004610fd1565b60046020526000908152604090205481565b3480156101ee57600080fd5b506102026101fd366004610fa5565b6104d2565b60405190151581526020016101ac565b34801561021e57600080fd5b5061020261022d366004610fea565b6105e3565b6101a2610240366004611014565b610722565b34801561025157600080fd5b50610265610260366004611099565b61096d565b6040516001600160a01b0390911681526020016101ac565b34801561028957600080fd5b506102026102983660046110bb565b6109a5565b3480156102a957600080fd5b506102026102b83660046110d6565b610ac3565b3480156102c957600080fd5b50600054610265906001600160a01b031681565b3480156102e957600080fd5b506102656102f8366004610fd1565b6002602052600090815260409020546001600160a01b031681565b60408051808201909152601781527f53747261746567793a204e6f74205065726d69747465640000000000000000006020820152600080549091906001600160a01b0316806103745760405162461bcd60e51b81526004016100db90610ed5565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190610f1d565b829061040b5760405162461bcd60e51b81526004016100db9190610f3a565b506001600160a01b03841660009081526001602090815260408083208884529091528120805491905592508261046e5760405162461bcd60e51b81526020600482015260086024820152674e6f20636c61696d60c01b60448201526064016100db565b303160000361049357604051638817231760e01b8152303160048201526024016100db565b6040516001600160a01b0385169084156108fc029085906000818181858888f193505050501580156104c9573d6000803e3d6000fd5b50505092915050565b600060405180606001604052806022815260200161123a602291396000546001600160a01b0316806105165760405162461bcd60e51b81526004016100db90610ed5565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610f1d565b82906105ad5760405162461bcd60e51b81526004016100db9190610f3a565b50600085815260026020526040902080546001600160a01b0386166001600160a01b031990911617905560019250505092915050565b60408051808201909152601f81527f5374726174656779202d2061646455703a204e6f74207065726d6974746564006020820152600080549091906001600160a01b0316806106445760405162461bcd60e51b81526004016100db90610ed5565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc9190610f1d565b82906106db5760405162461bcd60e51b81526004016100db9190610f3a565b5060008481526003602090815260408220805460018181018355918452919092200180546001600160a01b0388166001600160a01b03199091161790559250505092915050565b6000604051806060016040528060228152602001611218602291396000546001600160a01b0316806107665760405162461bcd60e51b81526004016100db90610ed5565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610f1d565b82906107fd5760405162461bcd60e51b81526004016100db9190610f3a565b506000888152600260205260409020546001600160a01b0316600185600181111561082a5761082a611112565b036108d3578a8c1161083c578b610846565b6108468b8d61113e565b9350610853888286610cbd565b8a156108ce5760405163a9059cbb60e01b81526001600160a01b038881166004830152602482018d905282169063a9059cbb906044016020604051808303816000875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190610f1d565b505b61095e565b6001600160a01b03881660009081526001602090815260408083208c8452909152812080548e9290610906908490611151565b9091555050891561093557600089815260046020526040812080548c929061092f908490611151565b90915550505b851561095e5760008981526002602052604090205461095e908a906001600160a01b0316610d69565b50505098975050505050505050565b6003602052816000526040600020818154811061098957600080fd5b6000918252602090912001546001600160a01b03169150829050565b60408051808201909152601881527f4f6e6c794f776e65723a204e6f74207065726d697474656400000000000000006020820152600080549091906001600160a01b031680610a065760405162461bcd60e51b81526004016100db90610ed5565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7e9190610f1d565b8290610a9d5760405162461bcd60e51b81526004016100db9190610f3a565b50600080546001600160a01b0319166001600160a01b0386161790555060019392505050565b60006040518060600160405280602681526020016111f2602691396000546001600160a01b031680610b075760405162461bcd60e51b81526004016100db90610ed5565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190610f1d565b8290610b9e5760405162461bcd60e51b81526004016100db9190610f3a565b50600086815260036020908152604080832080548251818502810185019093528083529192909190830182828015610bff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610be1575b50505050509050600080600090505b8251811015610c5957866001600160a01b0316838281518110610c3357610c33611164565b60200260200101516001600160a01b031603610c5157809150600195505b600101610c0e565b508415610cb2576000888152600360205260409020805488919083908110610c8357610c83611164565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b505050509392505050565b6000610cc98385610e48565b9050826001600160a01b031663095ea7b38560008411610ce95784610cf3565b610cf38486611151565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d629190610f1d565b5050505050565b600082815260046020908152604080832054600383528184208054835181860281018601909452808452919493909190830182828015610dd257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db4575b50505060008781526004602052604081205550508051909150808311610dfa57610dfa61117a565b6000610e068483610ec3565b905060005b82811015610e3f57610e37848281518110610e2857610e28611164565b60200260200101518784610cbd565b600101610e0b565b50505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190611190565b9392505050565b6000610ebc82846111a9565b92915050565b6020808252601a908201527f4f6e6c794f776e65723a204d616e61676572206e6f7420736574000000000000604082015260600190565b8015158114610f1a57600080fd5b50565b600060208284031215610f2f57600080fd5b8151610ebc81610f0c565b60006020808352835180602085015260005b81811015610f6857858101830151858201604001528201610f4c565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610fa057600080fd5b919050565b60008060408385031215610fb857600080fd5b82359150610fc860208401610f89565b90509250929050565b600060208284031215610fe357600080fd5b5035919050565b60008060408385031215610ffd57600080fd5b61100683610f89565b946020939093013593505050565b600080600080600080600080610100898b03121561103157600080fd5b8835975060208901359650604089013595506060890135945061105660808a01610f89565b935061106460a08a01610f89565b925060c089013561107481610f0c565b915060e08901356002811061108857600080fd5b809150509295985092959890939650565b600080604083850312156110ac57600080fd5b50508035926020909101359150565b6000602082840312156110cd57600080fd5b610ebc82610f89565b6000806000606084860312156110eb57600080fd5b833592506110fb60208501610f89565b915061110960408501610f89565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610ecf57610ecf611128565b80820180821115610ecf57610ecf611128565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b6000602082840312156111a257600080fd5b5051919050565b6000826111c657634e487b7160e01b600052601260045260246000fd5b50049056fe53747261746567793a204e6f74207265636569766564202d204e6f74207065726d69747465645374726174656779202d207377617050726f76696465723a204e6f74207065726d69747465645374726174656779202d20736574436c61696d3a204e6f74207065726d69747465645374726174656779202d206d617041737365743a204e6f74207065726d6974746564a2646970667358221220fccd9a35e92d06b53170331a8f25600f006ae53951f3718a9ec50297d914a46c64736f6c6343000818003353747261746567794d6772202d2063726561746553747261746567793a204e6f74207065726d6974746564a2646970667358221220d0405516dfd8c4400c916f2a600d987f42b656480841845619685ee7aa804d7e64736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createStrategy(address)": {
        "details": "Create a new strategy."
      },
      "getStrategy(address)": {
        "params": {
          "user": ": User Address"
        }
      },
      "setOwnershipManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      }
    },
    "stateVariables": {
      "strategies": {
        "details": "List of Strategies and their keys "
      },
      "strategyMap": {
        "details": "Mapping of addresses to strategies. Also used as reverse map of strategies to status."
      }
    },
    "title": "SmartStrategyAdmin: A standalone contract that manages strategy creation,  deletion, read and write data. Author: Simplifinance",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createStrategy(address)": {
        "notice": "'user' should not own a strategy before now.          only address with owner permission can call."
      },
      "getStrategy(address)": {
        "notice": "Returns strategy of 'user'"
      },
      "setOwnershipManager(address)": {
        "notice": "Set Ownership manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1654,
        "contract": "contracts/implementations/strategies/StrategyManager.sol:StrategyManager",
        "label": "ownershipManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3709,
        "contract": "contracts/implementations/strategies/StrategyManager.sol:StrategyManager",
        "label": "totalStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3714,
        "contract": "contracts/implementations/strategies/StrategyManager.sol:StrategyManager",
        "label": "strategies",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(StrategyData)2617_storage)dyn_storage"
      },
      {
        "astId": 3719,
        "contract": "contracts/implementations/strategies/StrategyManager.sol:StrategyManager",
        "label": "strategyMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StrategyData)2617_storage)dyn_storage": {
        "base": "t_struct(StrategyData)2617_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyManager.StrategyData[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(StrategyData)2617_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyManager.StrategyData",
        "members": [
          {
            "astId": 2614,
            "contract": "contracts/implementations/strategies/StrategyManager.sol:StrategyManager",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2616,
            "contract": "contracts/implementations/strategies/StrategyManager.sol:StrategyManager",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}