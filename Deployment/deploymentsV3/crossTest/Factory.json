{
  "address": "0x256BEd54b0843740481853fc781E7a5EC38b1575",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "serviceRate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "setUpFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetClass",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownerShipManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllMemberIsPaid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "ccr",
          "type": "uint24"
        }
      ],
      "name": "CollateralCoverageCannotGoBelow_100",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipManagerIsNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuorumIsInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UnSupportedAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UpdateStrategyError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Counters.Counter",
                  "name": "userCount",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "quorum",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "selector",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colCoverage",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uints",
                  "name": "uints",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "fullInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intPerSec",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "unit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPool",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "epochId",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uint256s",
                  "name": "uint256s",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "asset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lastPaid",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "admin",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Common.Addresses",
                  "name": "addrs",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "allGh",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isPermissionless",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "durOfChoice",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "expInterest",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "payDate",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "turnTime",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "loan",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "colBals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address",
                          "name": "id",
                          "type": "address"
                        },
                        {
                          "internalType": "bool",
                          "name": "sentQuota",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Contributor",
                      "name": "cData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bool",
                          "name": "admin",
                          "type": "bool"
                        },
                        {
                          "internalType": "bool",
                          "name": "member",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Rank",
                      "name": "rank",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "slot",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.ContributorData[]",
                  "name": "cData",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum Common.FuncTag",
                  "name": "stage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "durOfChoice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payDate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "turnTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "loan",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colBals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "id",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "sentQuota",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Contributor",
                  "name": "cData",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "admin",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "member",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Rank",
                  "name": "rank",
                  "type": "tuple"
                },
                {
                  "internalType": "uint8",
                  "name": "slot",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.ContributorData",
              "name": "cData",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.CreatePoolReturnValue",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "BandCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "Cancellation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Counters.Counter",
                  "name": "userCount",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "quorum",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "selector",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colCoverage",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uints",
                  "name": "uints",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "fullInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intPerSec",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "unit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPool",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "epochId",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uint256s",
                  "name": "uint256s",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "asset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lastPaid",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "admin",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Common.Addresses",
                  "name": "addrs",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "allGh",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isPermissionless",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "durOfChoice",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "expInterest",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "payDate",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "turnTime",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "loan",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "colBals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address",
                          "name": "id",
                          "type": "address"
                        },
                        {
                          "internalType": "bool",
                          "name": "sentQuota",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Contributor",
                      "name": "cData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bool",
                          "name": "admin",
                          "type": "bool"
                        },
                        {
                          "internalType": "bool",
                          "name": "member",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Rank",
                      "name": "rank",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "slot",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.ContributorData[]",
                  "name": "cData",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum Common.FuncTag",
                  "name": "stage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "debtBal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colBal",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.CommonEventData",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "GetFinanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Counters.Counter",
                  "name": "userCount",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "quorum",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "selector",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colCoverage",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uints",
                  "name": "uints",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "fullInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intPerSec",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "unit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPool",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "epochId",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uint256s",
                  "name": "uint256s",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "asset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lastPaid",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "admin",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Common.Addresses",
                  "name": "addrs",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "allGh",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isPermissionless",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "durOfChoice",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "expInterest",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "payDate",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "turnTime",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "loan",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "colBals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address",
                          "name": "id",
                          "type": "address"
                        },
                        {
                          "internalType": "bool",
                          "name": "sentQuota",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Contributor",
                      "name": "cData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bool",
                          "name": "admin",
                          "type": "bool"
                        },
                        {
                          "internalType": "bool",
                          "name": "member",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Rank",
                      "name": "rank",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "slot",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.ContributorData[]",
                  "name": "cData",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum Common.FuncTag",
                  "name": "stage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "debtBal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colBal",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.CommonEventData",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Counters.Counter",
                  "name": "userCount",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "quorum",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "selector",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colCoverage",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uints",
                  "name": "uints",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "fullInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intPerSec",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "unit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPool",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "epochId",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uint256s",
                  "name": "uint256s",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "asset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lastPaid",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "admin",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Common.Addresses",
                  "name": "addrs",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "allGh",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isPermissionless",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "durOfChoice",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "expInterest",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "payDate",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "turnTime",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "loan",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "colBals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address",
                          "name": "id",
                          "type": "address"
                        },
                        {
                          "internalType": "bool",
                          "name": "sentQuota",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Contributor",
                      "name": "cData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bool",
                          "name": "admin",
                          "type": "bool"
                        },
                        {
                          "internalType": "bool",
                          "name": "member",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Rank",
                      "name": "rank",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "slot",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.ContributorData[]",
                  "name": "cData",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum Common.FuncTag",
                  "name": "stage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "debtBal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colBal",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.CommonEventData",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "NewMemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Counters.Counter",
                  "name": "userCount",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "quorum",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "selector",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colCoverage",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uints",
                  "name": "uints",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "fullInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intPerSec",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "unit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPool",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "epochId",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Uint256s",
                  "name": "uint256s",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "asset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lastPaid",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "admin",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Common.Addresses",
                  "name": "addrs",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "allGh",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isPermissionless",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "durOfChoice",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "expInterest",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "payDate",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "turnTime",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "loan",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "colBals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address",
                          "name": "id",
                          "type": "address"
                        },
                        {
                          "internalType": "bool",
                          "name": "sentQuota",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Contributor",
                      "name": "cData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bool",
                          "name": "admin",
                          "type": "bool"
                        },
                        {
                          "internalType": "bool",
                          "name": "member",
                          "type": "bool"
                        }
                      ],
                      "internalType": "struct Common.Rank",
                      "name": "rank",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "slot",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.ContributorData[]",
                  "name": "cData",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum Common.FuncTag",
                  "name": "stage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "debtBal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colBal",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.CommonEventData",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "Payback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Rekeyed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Counters.Counter",
              "name": "userCount",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "quorum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "selector",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "colCoverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intRate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Uints",
              "name": "uints",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "epochId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Uint256s",
              "name": "uint256s",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "allGh",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPermissionless",
              "type": "bool"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "durOfChoice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payDate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "turnTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "loan",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colBals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "id",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "sentQuota",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Contributor",
                  "name": "cData",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "admin",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "member",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Rank",
                  "name": "rank",
                  "type": "tuple"
                },
                {
                  "internalType": "uint8",
                  "name": "slot",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.ContributorData[]",
              "name": "cData",
              "type": "tuple[]"
            },
            {
              "internalType": "enum Common.FuncTag",
              "name": "stage",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "RoundUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "analytics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvlInXFI",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tvlInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPermissioned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPermissionless",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "intRate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "durationInHours",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "colCoverage",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "unitLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "liquidAsset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "contributors",
          "type": "address[]"
        }
      ],
      "name": "createPermissionedPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "intRate",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "quorum",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "durationInHours",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "colCoverage",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "unitLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "liquidAsset",
          "type": "address"
        }
      ],
      "name": "createPermissionlessPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "enquireLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "durOfChoice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "payDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "turnTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "loan",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "colBals",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "id",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "sentQuota",
                  "type": "bool"
                }
              ],
              "internalType": "struct Common.Contributor",
              "name": "cData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "admin",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "member",
                  "type": "bool"
                }
              ],
              "internalType": "struct Common.Rank",
              "name": "rank",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "slot",
              "type": "uint8"
            }
          ],
          "internalType": "struct Common.ContributorData",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "xfi",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "erc20",
              "type": "uint256"
            }
          ],
          "internalType": "struct Common.Balances",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "getCollaterlQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "colCoverage",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "feeTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetAdmin",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "makerRate",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "strategyManager",
              "type": "address"
            }
          ],
          "internalType": "struct IFactory.ContractData",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "getCurrentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "daysOfUseInHr",
          "type": "uint8"
        }
      ],
      "name": "getFinance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "getPoolData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Counters.Counter",
              "name": "userCount",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "quorum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "selector",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "colCoverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intRate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Uints",
              "name": "uints",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "epochId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Uint256s",
              "name": "uint256s",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "allGh",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPermissionless",
              "type": "bool"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "durOfChoice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payDate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "turnTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "loan",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colBals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "id",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "sentQuota",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Contributor",
                  "name": "cData",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "admin",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "member",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Rank",
                  "name": "rank",
                  "type": "tuple"
                },
                {
                  "internalType": "uint8",
                  "name": "slot",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.ContributorData[]",
              "name": "cData",
              "type": "tuple[]"
            },
            {
              "internalType": "enum Common.FuncTag",
              "name": "stage",
              "type": "uint8"
            }
          ],
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolFromAllEpoches",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Counters.Counter",
              "name": "userCount",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "quorum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "selector",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "colCoverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intRate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Uints",
              "name": "uints",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "epochId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Uint256s",
              "name": "uint256s",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "allGh",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPermissionless",
              "type": "bool"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "durOfChoice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payDate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "turnTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "loan",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colBals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "id",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "sentQuota",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Contributor",
                  "name": "cData",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "admin",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "member",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Rank",
                  "name": "rank",
                  "type": "tuple"
                },
                {
                  "internalType": "uint8",
                  "name": "slot",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.ContributorData[]",
              "name": "cData",
              "type": "tuple[]"
            },
            {
              "internalType": "enum Common.FuncTag",
              "name": "stage",
              "type": "uint8"
            }
          ],
          "internalType": "struct Common.Pool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "durOfChoice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "payDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "turnTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "loan",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "colBals",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "id",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "sentQuota",
                  "type": "bool"
                }
              ],
              "internalType": "struct Common.Contributor",
              "name": "cData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "admin",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "member",
                  "type": "bool"
                }
              ],
              "internalType": "struct Common.Rank",
              "name": "rank",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "slot",
              "type": "uint8"
            }
          ],
          "internalType": "struct Common.ContributorData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "joinAPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "payback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "serviceRate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "setUpFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetClass",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategyManager",
          "type": "address"
        }
      ],
      "name": "performSetUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routers",
      "outputs": [
        {
          "internalType": "enum IFactory.Router",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetAdmin",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "serviceRate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_creationFee",
          "type": "uint256"
        }
      ],
      "name": "setContractData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        }
      ],
      "name": "setMinimumLiquidityPerProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setOwnershipManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawXFI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x25befc55bc63c134df5c5e1040169e088e2d2128b11f7c832e0d27f864a616e7",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0x256BEd54b0843740481853fc781E7a5EC38b1575",
    "transactionIndex": 0,
    "gasUsed": "5425544",
    "logsBloom": "0x
    "blockHash": "0x6415ebbebb934811d155e5eba6afa18748c9291e73bda6d56f594d8874044225",
    "transactionHash": "0x25befc55bc63c134df5c5e1040169e088e2d2128b11f7c832e0d27f864a616e7",
    "logs": [],
    "blockNumber": 6952408,
    "cumulativeGasUsed": "5425544",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    1000000000000000,
    0,
    "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "0xFd648e8975DD9905f9449F3450DAB7bCa63565c4",
    "0x4963bA955DAF279A1D97a84A2a5fC9348Fdf5513",
    "0xe09e23F8a8032BB39326098802c970f9b48D726C"
  ],
  "numDeployments": 10,
  "solcInputHash": "b72ce8f9312592f75af14fbad28ae673",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"serviceRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setUpFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerShipManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllMemberIsPaid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"ccr\",\"type\":\"uint24\"}],\"name\":\"CollateralCoverageCannotGoBelow_100\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipManagerIsNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuorumIsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UnSupportedAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateStrategyError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData\",\"name\":\"cData\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Common.CreatePoolReturnValue\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"BandCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"Cancellation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"debtBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBal\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Common.CommonEventData\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"GetFinanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"debtBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBal\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Common.CommonEventData\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"debtBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBal\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Common.CommonEventData\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NewMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"debtBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBal\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Common.CommonEventData\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"Payback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Rekeyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"RoundUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"analytics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvlInXFI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tvlInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPermissioned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPermissionless\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"intRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"durationInHours\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"unitLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidAsset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contributors\",\"type\":\"address[]\"}],\"name\":\"createPermissionedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"intRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"quorum\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"durationInHours\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"unitLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidAsset\",\"type\":\"address\"}],\"name\":\"createPermissionlessPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"enquireLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"xfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Balances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"getCollaterlQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAdmin\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"makerRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"strategyManager\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.ContractData\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getCurrentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"daysOfUseInHr\",\"type\":\"uint8\"}],\"name\":\"getFinance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolFromAllEpoches\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"userCount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData[]\",\"name\":\"cData\",\"type\":\"tuple[]\"},{\"internalType\":\"enum Common.FuncTag\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"durOfChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"cData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"admin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Rank\",\"name\":\"rank\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.ContributorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"joinAPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"serviceRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setUpFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyManager\",\"type\":\"address\"}],\"name\":\"performSetUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"enum IFactory.Router\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAdmin\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"serviceRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_creationFee\",\"type\":\"uint256\"}],\"name\":\"setContractData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"}],\"name\":\"setMinimumLiquidityPerProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setOwnershipManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawXFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Simplifinance - (Bobeu) \",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes state variables.\",\"params\":{\"assetClass\":\": Asset manager contract.\",\"feeTo\":\": Account to receive fees.\",\"minContribution\":\": Minimum contribution amount.\",\"ownerShipManager\":\": Accessibility manager contract\",\"serviceRate\":\": Platform fee in %\",\"setUpFee\":\": Amount to charge for setting a liquidity pool.\",\"strategyManager\":\": Strategy manager contract.\"}},\"createPermissionedPool(uint16,uint16,uint24,uint256,address,address[])\":{\"details\":\"Create permissioned pool See AbstractFactory.sol \"},\"createPermissionlessPool(uint16,uint8,uint16,uint24,uint256,address)\":{\"details\":\"Create permissionless See AbstractFactory.sol\"},\"enquireLiquidation(uint256)\":{\"details\":\"See FactoryLib.enquireLiquidation\"},\"epoches()\":{\"details\":\"Return current epoch.  This is also total epoches generated to date \"},\"getBalances(uint256)\":{\"details\":\"Returns both ERC20 and Native balances locked in an epoch\",\"params\":{\"epochId\":\": Epoch Id\"}},\"getCollaterlQuote(uint256)\":{\"details\":\"Returns collaterl quote for the epoch.\",\"params\":{\"epochId\":\": EpochId\"},\"returns\":{\"colCoverage\":\"Collateral coverage\",\"collateral\":\"Collateral\"}},\"getCurrentDebt(uint256,address)\":{\"params\":{\"epochId\":\": Epoch Id\",\"target\":\": Target user.\"}},\"getFinance(uint256,uint8)\":{\"details\":\"Providers borrow from their pool provided the citeria are met.\",\"params\":{\"daysOfUseInHr\":\": The time in hours the borrower wishes to retain the loan before paying back.\",\"epochId\":\": Epoh Id user wants to borrow from. \"}},\"getPoolData(uint256)\":{\"details\":\"Returns a single pool for 'epochId'\",\"params\":{\"epochId\":\": Epoch id.\"}},\"getPoolFromAllEpoches()\":{\"details\":\"Returns pool from all epoched array \"},\"getProfile(uint256,address)\":{\"details\":\"Returns the profile of user\",\"params\":{\"epochId\":\": Epoch Id\",\"user\":\": User\"}},\"getRouter(uint256)\":{\"details\":\"Return the router for an epochId. \"},\"joinAPool(uint256)\":{\"details\":\"See AbstractFactory.sol \"},\"liquidate(uint256)\":{\"details\":\"Liquidate defaulter. Note: The expected repayment time for last paid contributor must have passed. See FactoryLib.liquidate() for more details.\",\"params\":{\"epochId\":\": Epoch Id\"}},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payback(uint256)\":{\"details\":\"Return borrowed fund.\",\"params\":{\"epochId\":\": Pool number. See FactoryLib.payback().\"}},\"performSetUp(uint16,uint256,uint256,address,address,address)\":{\"details\":\"See _setUp() for doc.\"},\"removeLiquidityPool(uint256)\":{\"details\":\"Remove liquidity pool\",\"params\":{\"epochId\":\": Epoch/Poool id\"}},\"setContractData(address,address,uint16,uint256)\":{\"details\":\"Set state variables.\",\"params\":{\"assetAdmin\":\": AssetAdmin contract.\",\"feeTo\":\": Fee receiver.\",\"serviceRate\":\": fee in %. - Only-owner function.\"}},\"setMinimumLiquidityPerProvider(uint256)\":{\"details\":\"Updates minimum liquidity of a pool.   Note: Only Owner function.\",\"params\":{\"minLiquidity\":\": Minimum contribution.\"}},\"setOwnershipManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused.\"},\"withdrawCollateral(uint256)\":{\"details\":\"Withdraws Collateral balance if any\",\"params\":{\"epochId\":\": Epoch Id\"}},\"withdrawXFI(uint256)\":{\"details\":\"Withdraws XFI balances of this contract if any. OnlyOwner function\",\"params\":{\"value\":\": Amount to withdraw\"}}},\"title\":\"Factory : Main contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCurrentDebt(uint256,address)\":{\"notice\":\"Returns the current debt of target user.\"},\"getFinance(uint256,uint8)\":{\"notice\":\"Users can be members of multiple epoches. This enlarges the volume of funds they can access.  - This is a payable function since borrowers are required to stake XFI before they can access funds in epoches. - The contract must be in a usable state i.e not paused. - For the selected epoch, the getFinance() must already be unlocked. Unlocking  is automated soon as the required quorum for the epoch is achieved i.e the  numbers of providers equals the set quorum.\"},\"permits(uint256,address)\":{\"notice\":\"Mapping of epochId to permit Permit is used to give instructions to the child contract who can withdraw from an epoch. Only one provider can withdraw at a time in an apoch.\"},\"setOwnershipManager(address)\":{\"notice\":\"Set Ownership manager\"}},\"notice\":\"  A multi p2p lending and borrowing structure where liquidity providers are borrowers. We bring together users form different  parts of the world to form a liquidity synergy, where the pooled fund moved round them from the first to the last on the list in form of borrowed fund.The permissionless model allows users to create liquidity pool for anyone to participate while the  permissioned structure restricts participation only to the known members known as band.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/Factory.sol\":\"Factory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d\",\"license\":\"MIT\"},\"contracts/abstracts/AbstractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport { FactoryLib, Data } from \\\"../libraries/FactoryLib.sol\\\";\\r\\nimport { FuncHandler } from \\\"../peripherals/FuncHandler.sol\\\";\\r\\nimport { IFactory } from \\\"../apis/IFactory.sol\\\";\\r\\nimport { IAssetClass } from \\\"../apis/IAssetClass.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**@title Abstract Factory contract\\r\\n * Non deployable.\\r\\n*/\\r\\n\\r\\nabstract contract AbstractFactory is\\r\\n    IFactory,\\r\\n    FuncHandler,\\r\\n    ReentrancyGuard\\r\\n{\\r\\n    using FactoryLib for Data;\\r\\n\\r\\n    Data private data;\\r\\n\\r\\n    // Creation fee\\r\\n    uint public creationFee;\\r\\n\\r\\n    // Minimum amount that can be contributed\\r\\n    uint public minContribution;\\r\\n\\r\\n    Analytics public analytics;\\r\\n\\r\\n    modifier validateEpochId(uint epochId) {\\r\\n        data.verifyEpochId(epochId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only supported assets are allowed.\\r\\n     * Note: Asset must be supported by the AssetClass contract.\\r\\n     * @param _asset : Input asset contract address\\r\\n     */\\r\\n    modifier onlySupportedAsset(address _asset) {\\r\\n        if (!IAssetClass(data.pData.assetAdmin).isSupportedAsset(_asset)) {\\r\\n            revert IAssetClass.UnSupportedAsset(_asset);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * See _setUp() for doc\\r\\n     */\\r\\n    constructor(\\r\\n        uint16 serviceRate,\\r\\n        uint _minContribution,\\r\\n        uint setUpFee,\\r\\n        address feeTo,\\r\\n        address assetClass,\\r\\n        address strategyManager,\\r\\n        address _ownershipManager\\r\\n    ) FuncHandler(_ownershipManager){\\r\\n        _setUp(\\r\\n            serviceRate, \\r\\n            _minContribution, \\r\\n            setUpFee, \\r\\n            feeTo, \\r\\n            assetClass, \\r\\n            strategyManager\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@dev Fallback\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws XFI balances of this contract if any. OnlyOwner function\\r\\n     * @param value : Amount to withdraw\\r\\n     */\\r\\n    function withdrawXFI(\\r\\n        uint value\\r\\n    )\\r\\n        public\\r\\n        onlyOwner(\\\"Factory - withdrawXFI not permitted\\\")\\r\\n    {\\r\\n        require(value > 0 && address(this).balance >= value, \\\"Value is 0 || 0 balalnce\\\");\\r\\n        (bool success,) = data.pData.feeTo.call{value: value}('');\\r\\n        require(success,\\\"Withdrawal Failed\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    /** @dev See _setUp() for doc.\\r\\n     */\\r\\n    function performSetUp(\\r\\n        uint16 serviceRate,\\r\\n        uint _minContribution,\\r\\n        uint setUpFee,\\r\\n        address feeTo,\\r\\n        address assetClass,\\r\\n        address strategyManager\\r\\n    ) public onlyOwner(\\\"Factory - performSetUp not permitted\\\") {\\r\\n        _setUp(\\r\\n            serviceRate, \\r\\n            _minContribution, \\r\\n            setUpFee, \\r\\n            feeTo, \\r\\n            assetClass, \\r\\n            strategyManager\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Can be used to initialize and reinitialized state variables.\\r\\n     * @notice Only address with owner role can call. Check Ownable.sol to see \\r\\n     * how we manage ownership (different from OZ pattern). \\r\\n     * @param serviceRate : Platform fee\\r\\n     * @param _minContribution : Minimum acceptable unit in liquidity pool.\\r\\n     * @param setUpFee : Amount charged for setting up a liquidity pool.\\r\\n     * @param feeTo : Fee recipient.\\r\\n     * @param assetClass : Asset manager contract.\\r\\n     * @param strategyManager : Strategy manager contract.\\r\\n     */\\r\\n    function _setUp(\\r\\n        uint16 serviceRate,\\r\\n        uint _minContribution,\\r\\n        uint setUpFee,\\r\\n        address feeTo,\\r\\n        address assetClass,\\r\\n        address strategyManager\\r\\n    ) private {\\r\\n        minContribution = _minContribution;\\r\\n        data.pData = ContractData(feeTo, assetClass, serviceRate, strategyManager);\\r\\n        creationFee = setUpFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Launch a liquidity pool. Based on router, it could be permissioned or permissionless.\\r\\n      @param intRate : Rate of interest to charge on loans.\\r\\n      @param quorum: The Required number of contributors to form a band. \\r\\n      @param durationInHours: The maximum time limit (from when turn time begins) with which a contributor\\r\\n                            will take custody of the loan before repayment. Should be specified in hours.\\r\\n      @param colCoverage - Collateral factor - Collateral determinant for contributors to borrow.\\r\\n                            This is expressed as a multiplier index in the total loanable amount.\\r\\n      @param unitLiquidity - Unit contribution.\\r\\n      @param liquidAsset - Liquidity asset. This will often be an ERC20 compatible asset.\\r\\n      @param contributors : Array contributors addresses\\r\\n      @param router : We use this to determine which pool to launch. Router can either be permissioned\\r\\n                    or permissionless.\\r\\n        - asset must be supported by AssetClass.sol\\r\\n    */\\r\\n    function _createPool(\\r\\n        uint16 intRate,\\r\\n        uint8 quorum,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage,\\r\\n        uint unitLiquidity,\\r\\n        address liquidAsset,\\r\\n        address[] memory contributors,\\r\\n        Router router\\r\\n    )\\r\\n        internal \\r\\n        whenNotPaused\\r\\n        onlySupportedAsset(liquidAsset)\\r\\n        returns (uint)\\r\\n    {\\r\\n        bool isPermissionless = router == Router.PERMISSIONLESS;\\r\\n        isPermissionless? require(quorum > 1, \\\"Router: Quorum is invalid\\\") : require(contributors.length > 1, \\\"Min of 2 members\\\");\\r\\n        CreatePoolParam memory cpp = \\r\\n            CreatePoolParam(\\r\\n                {\\r\\n                    intRate: intRate,\\r\\n                    quorum: quorum,\\r\\n                    duration: durationInHours,\\r\\n                    colCoverage: colCoverage, \\r\\n                    unitContribution: unitLiquidity,\\r\\n                    members: contributors,\\r\\n                    asset: liquidAsset\\r\\n                }\\r\\n            );\\r\\n        CreatePoolReturnValue memory crp = !isPermissionless ? data\\r\\n            .createPermissionedPool(cpp)\\r\\n                : data.createPermissionlessPool(cpp);\\r\\n        Analytics memory alt = analytics;\\r\\n        analytics = Analytics(\\r\\n            alt.tvlInXFI, \\r\\n            alt.tvlInUsd + unitLiquidity, \\r\\n            isPermissionless? alt.totalPermissioned : alt.totalPermissioned + 1,\\r\\n            isPermissionless? alt.totalPermissionless + 1 : alt.totalPermissionless\\r\\n        );\\r\\n        \\r\\n        emit BandCreated(crp);\\r\\n        return crp.pool.uint256s.epochId;\\r\\n    } \\r\\n\\r\\n    /** @dev Return current epoch. \\r\\n     * This is also total epoches generated to date \\r\\n    */\\r\\n    function epoches() \\r\\n        external \\r\\n        view \\r\\n        returns(uint)\\r\\n    {\\r\\n        return data._getEpoches();\\r\\n        // return _epoches == 0? 0 : _epoches - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        *   @dev Updates minimum liquidity of a pool.\\r\\n        *   Note: Only Owner function.\\r\\n        *   @param minLiquidity : Minimum contribution.\\r\\n  */\\r\\n    function setMinimumLiquidityPerProvider(\\r\\n        uint256 minLiquidity\\r\\n    ) \\r\\n        public \\r\\n        onlyOwner(\\\"Factory - setMinimumLiquidityPerProvider not permitted\\\")\\r\\n    {\\r\\n        minContribution = minLiquidity;\\r\\n    }\\r\\n\\r\\n    /**@dev Add contributor.\\r\\n      @param epochId : Epoch id.\\r\\n      @param isPermissioned : Whether pool is permissioned or not\\r\\n   */\\r\\n    function _joinEpoch(\\r\\n        uint epochId,\\r\\n        bool isPermissioned\\r\\n    )\\r\\n        internal\\r\\n        returns(bool)\\r\\n    {\\r\\n        CommonEventData memory ced =  data.addToBand(AddTobandParam(epochId, isPermissioned));\\r\\n        emit NewMemberAdded(ced);\\r\\n        unchecked {\\r\\n            analytics.tvlInUsd += ced.pool.uint256s.unit;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** @dev Providers borrow from their pool provided the citeria are met.\\r\\n        @param epochId : Epoh Id user wants to borrow from. \\r\\n        @notice Users can be members of multiple epoches. This enlarges the\\r\\n        volume of funds they can access. \\r\\n\\r\\n        - This is a payable function since borrowers are required to stake XFI\\r\\n        before they can access funds in epoches.\\r\\n        - The contract must be in a usable state i.e not paused.\\r\\n        - For the selected epoch, the getFinance() must already be unlocked. Unlocking \\r\\n        is automated soon as the required quorum for the epoch is achieved i.e the \\r\\n        numbers of providers equals the set quorum.\\r\\n        @param daysOfUseInHr : The time in hours the borrower wishes to retain the loan\\r\\n        before paying back.\\r\\n  */\\r\\n    function getFinance(\\r\\n        uint epochId,\\r\\n        uint8 daysOfUseInHr\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        whenNotPaused\\r\\n        validateEpochId(epochId)\\r\\n        returns (bool)\\r\\n    {\\r\\n        (CommonEventData memory ced) = data.getFinance(epochId, msg.value, daysOfUseInHr, _getXFIPriceInUSD);\\r\\n        emit GetFinanced(ced);\\r\\n        Analytics memory atl = analytics;\\r\\n        unchecked {\\r\\n            atl.tvlInXFI += msg.value;\\r\\n            atl.tvlInUsd -= ced.pool.uint256s.currentPool;\\r\\n        }\\r\\n        analytics = atl;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Return borrowed fund.\\r\\n      @param epochId : Pool number.\\r\\n     See FactoryLib.payback().\\r\\n   */\\r\\n    function payback(\\r\\n        uint epochId\\r\\n    )\\r\\n        external\\r\\n        whenNotPaused\\r\\n        validateEpochId(epochId)\\r\\n        returns (bool)\\r\\n    {\\r\\n        CommonEventData memory ced = data.payback(\\r\\n            PaybackParam(\\r\\n                epochId,\\r\\n                _msgSender()\\r\\n            ),\\r\\n            _setPermit\\r\\n        );\\r\\n        emit Payback(ced);\\r\\n        analytics.tvlInUsd += ced.debtBal;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n  @dev Liquidate defaulter.\\r\\n    Note: The expected repayment time for last paid contributor must have passed.\\r\\n    See FactoryLib.liquidate() for more details.\\r\\n    @param epochId : Epoch Id\\r\\n  */\\r\\n    function liquidate(\\r\\n        uint epochId\\r\\n    ) \\r\\n        external \\r\\n        whenNotPaused \\r\\n        validateEpochId(epochId)\\r\\n        returns (bool) \\r\\n    {\\r\\n        CommonEventData memory ced = data.liquidate(epochId, _setPermit);\\r\\n        emit Payback(ced);\\r\\n        Analytics memory atl = analytics;\\r\\n        unchecked {\\r\\n            atl.tvlInXFI -= ced.colBal;\\r\\n            atl.tvlInUsd += ced.debtBal;\\r\\n        }\\r\\n        analytics = atl;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See FactoryLib.enquireLiquidation\\r\\n     */\\r\\n    function enquireLiquidation(\\r\\n        uint epochId\\r\\n    ) \\r\\n        external\\r\\n        view \\r\\n        validateEpochId(epochId)\\r\\n        returns (ContributorData memory, bool, uint) \\r\\n    {\\r\\n        return data._enquireLiquidation(epochId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws Collateral balance if any\\r\\n     * @param epochId : Epoch Id\\r\\n     */\\r\\n    function withdrawCollateral(uint epochId)\\r\\n        external\\r\\n        validateEpochId(epochId)\\r\\n        checkPermit(epochId, FuncTag.WITHDRAW)\\r\\n        returns(bool)\\r\\n    {\\r\\n        uint bal = data.withdrawCollateral(epochId);\\r\\n        console.log(\\\"analytics.tvlInXFI\\\", analytics.tvlInXFI);\\r\\n        console.log(\\\"Bal\\\", bal);\\r\\n        unchecked {\\r\\n            analytics.tvlInXFI -= bal;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns collaterl quote for the epoch.\\r\\n     * @param epochId : EpochId\\r\\n     * @return collateral Collateral\\r\\n     * @return colCoverage Collateral coverage\\r\\n     */\\r\\n    function getCollaterlQuote(\\r\\n        uint epochId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        validateEpochId(epochId)\\r\\n        returns(uint collateral, uint24 colCoverage)\\r\\n    {\\r\\n        Pool memory pool = data._fetchPool(epochId);\\r\\n        (collateral, colCoverage) = (FactoryLib._computeCollateral(\\r\\n            pool.uint256s.currentPool,\\r\\n            0,\\r\\n            uint24(pool.uints.colCoverage),\\r\\n            _getXFIPriceInUSD()\\r\\n        ), uint24(pool.uints.colCoverage));\\r\\n        return (collateral, colCoverage);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt of target user.\\r\\n     * @param epochId : Epoch Id\\r\\n     * @param target : Target user.\\r\\n     */\\r\\n    function getCurrentDebt(\\r\\n        uint epochId,\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        view \\r\\n        validateEpochId(epochId)\\r\\n        returns (uint) \\r\\n    {\\r\\n        return data._getCurrentDebt(epochId, target).debt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the profile of user\\r\\n     * @param epochId : Epoch Id\\r\\n     * @param user : User\\r\\n     */\\r\\n    function getProfile(\\r\\n        uint epochId,\\r\\n        address user\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        validateEpochId(epochId)\\r\\n        returns(ContributorData memory) \\r\\n    {\\r\\n        return data.getProfile(user, epochId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set state variables.\\r\\n     * @param feeTo : Fee receiver.\\r\\n     * @param assetAdmin : AssetAdmin contract.\\r\\n     * @param serviceRate : fee in %.\\r\\n     * - Only-owner function.\\r\\n     */\\r\\n    function setContractData(\\r\\n        address feeTo,\\r\\n        address assetAdmin,\\r\\n        uint16 serviceRate,\\r\\n        uint256 _creationFee\\r\\n    ) \\r\\n        public\\r\\n        onlyOwner(\\\"Factory - setContractData not permitted\\\")\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(creationFee == 0) {\\r\\n            creationFee = _creationFee;\\r\\n        }\\r\\n        return data.setContractData(assetAdmin, feeTo, serviceRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns both ERC20 and Native balances locked in an epoch\\r\\n     * @param epochId : Epoch Id\\r\\n     */\\r\\n    function getBalances(\\r\\n        uint epochId\\r\\n    )   \\r\\n        external\\r\\n        view\\r\\n        validateEpochId(epochId)\\r\\n        returns(Balances memory)\\r\\n    {\\r\\n        return data._getBalancesOfStrategy(epochId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See FactoryLib._cancelBand()\\r\\n     */\\r\\n    function _removeLiquidityPool(\\r\\n        uint epochId,\\r\\n        bool isPermissionLess\\r\\n    ) \\r\\n        internal \\r\\n        whenNotPaused \\r\\n        validateEpochId(epochId)\\r\\n        returns (bool)\\r\\n    {\\r\\n        analytics.tvlInUsd -= data.cancelBand(\\r\\n            epochId, \\r\\n            isPermissionLess,\\r\\n            _setPermit\\r\\n        ); \\r\\n        emit Cancellation(epochId);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a single pool for 'epochId'\\r\\n     * @param epochId : Epoch id.\\r\\n     */\\r\\n    function getPoolData(\\r\\n        uint epochId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        validateEpochId(epochId)\\r\\n        returns(Pool memory) \\r\\n    {\\r\\n        return data._fetchPool(epochId);\\r\\n    }\\r\\n\\r\\n    /**@dev Returns pool from all epoched array */\\r\\n    function getPoolFromAllEpoches() \\r\\n        public\\r\\n        view \\r\\n        returns(Pool[] memory pools) \\r\\n    {\\r\\n        return data.fetchPools();\\r\\n    }\\r\\n\\r\\n    function getContractData()\\r\\n        public\\r\\n        view\\r\\n        returns(ContractData memory result)\\r\\n    {\\r\\n        result = data.pData; \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get price of SIMT in USD.\\r\\n     * @notice from price oracle\\r\\n     * Assuming the price of XFI is 0.5$\\r\\n     */\\r\\n    function _getXFIPriceInUSD() \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint _price) \\r\\n    {\\r\\n        _price = 9900000000000000000; // ================================================> We use oracle here\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2cf93e44b075ce8b4660a67df72a7d408ddd143efbe227ca49ef0822b6e4c946\",\"license\":\"MIT\"},\"contracts/abstracts/OnlyOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { MsgSender, OwnerShip } from \\\"../implementations/OwnerShip.sol\\\";\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n\\r\\nabstract contract OnlyOwner is MsgSender {\\r\\n    address public ownershipManager;\\r\\n\\r\\n    constructor(address _ownershipManager)\\r\\n    {\\r\\n        _setOwnershipManager(_ownershipManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     * @param errorMessage : Custom error message\\r\\n     */\\r\\n    modifier onlyOwner(string memory errorMessage) {\\r\\n        address mgr = ownershipManager;\\r\\n        require(mgr != address(0), \\\"OnlyOwner: Manager not set\\\");\\r\\n        require(IOwnerShip(mgr).isOwner(_msgSender()), errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setOwnershipManager(\\r\\n        address newManager\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        ownershipManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Ownership manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setOwnershipManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyOwner(\\\"OnlyOwner: Not permitted\\\")\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setOwnershipManager(newManager);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x69c663365e2cf43d13d18b4926714078df66472a2d0aca7988dae04b61feafb6\",\"license\":\"MIT\"},\"contracts/abstracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { OnlyOwner } from \\\"./OnlyOwner.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n * \\r\\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\\r\\n * Thanks to the OZ team.\\r\\n */\\r\\nabstract contract Pausable is OnlyOwner {\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is paused.\\r\\n     */\\r\\n    error EnforcedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is not paused.\\r\\n     */\\r\\n    error ExpectedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor(\\r\\n        address _ownershipManager\\r\\n    ) OnlyOwner(_ownershipManager) {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view {\\r\\n        if (paused()) {\\r\\n            revert EnforcedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        if (!paused()) {\\r\\n            revert ExpectedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * Only owner role can call.\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function pause() \\r\\n        public \\r\\n        onlyOwner(\\\"Pausable: OnlyOwner can pause\\\") \\r\\n        whenNotPaused \\r\\n    {\\r\\n        _paused = true; \\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Only owner role can call.\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function unpause() \\r\\n        public \\r\\n        onlyOwner(\\\"Pausable: OnlyOwner can unpause\\\") \\r\\n        whenPaused \\r\\n    {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa21000674bfa511085e8210f457434b5af95b1e82f968b35ab9a4fab75483b6\",\"license\":\"MIT\"},\"contracts/apis/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport { Counters } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\\\";\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface Common {\\r\\n  /**\\r\\n   * @dev Tags/Placeholders for functions available in the implementation contract.\\r\\n   */\\r\\n  enum FuncTag {\\r\\n    JOIN, \\r\\n    GET, \\r\\n    PAYBACK, \\r\\n    WITHDRAW,\\r\\n    ENDED\\r\\n  }\\r\\n\\r\\n  enum TransactionType { NATIVE, ERC20 }\\r\\n\\r\\n  /**\\r\\n   *  @dev Data for each pool. \\r\\n   *    Note: We use the term `allGh` to denote when every participant in a \\r\\n   *    group had get financed.\\r\\n   *  @param isMember : Whether user is a member or not\\r\\n   *  @param isAdmin: Whether user is an admin or not i.e the initiator.\\r\\n   *  @param payDate: The data in future on which the borrowed fund must be retured\\r\\n   *  @param turnTime : This is a period or interval between the last received and the next.\\r\\n   *  @param owings: Total debts owed by the last fund recipient.\\r\\n   *  @param colBals: Collateral balances of the last recipient.\\r\\n   *  @param hasGH : Whether an user/current msg.sender has received or not.\\r\\n   *  @param id : Address of the last recipient.  \\r\\n   */\\r\\n  struct Contributor {\\r\\n    uint durOfChoice;\\r\\n    uint expInterest;\\r\\n    uint payDate;\\r\\n    uint turnTime;\\r\\n    uint loan;\\r\\n    uint colBals;\\r\\n    address id;\\r\\n    bool sentQuota;\\r\\n  }\\r\\n\\r\\n  struct Rank {\\r\\n    bool admin;\\r\\n    bool member;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @dev Pool data\\r\\n   *  @param uints : Structured data of all unsigned integers type uint8.\\r\\n   *  @param uint256s: Structured data of all unsigned integers type uint256.\\r\\n   *  @param addrs : Structured data of all address type\\r\\n   *  @param allGh : Total members already got financed.\\r\\n   *  @param isPermissionless : A tag for each pool showing whether permissionless or otherwise.\\r\\n   *  @param cData : Participants i.e Providers and Borrowers.\\r\\n   */\\r\\n  struct Pool {\\r\\n    Counters.Counter userCount;\\r\\n    Uints uints;\\r\\n    Uint256s uint256s;\\r\\n    Addresses addrs;\\r\\n    uint allGh;\\r\\n    bool isPermissionless;\\r\\n    ContributorData[] cData;\\r\\n    FuncTag stage;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Structured data types to convey parameters to avoid Stack too deep error.\\r\\n    @param quorum : The maximum number of users that can form a contribution group.\\r\\n    @param duration : The number of days the contribution contract will expires. It should be \\r\\n                      specified in hour.\\r\\n    @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \\r\\n                  in order to be able to get financed. This should be specified in percentage i.e \\r\\n                  if raw ccr is 1.2 , actual ccr should be 1.2 * 100 = 120. It is pertinent to be\\r\\n                  mindful how this works in our protocol. Even if ccr is 1 indicating that contributor\\r\\n                  must hold at least 100% of collateral in their wallet before they can GF, it must \\r\\n                  be rendered in input section as 1 * 100. 100 is the minimum admins of bands\\r\\n                  can give as collateral coverage ratio.\\r\\n    @param value : The total value of pooled fund.\\r\\n    @param members : List of members in a group.\\r\\n    @param intRate : The rate of interest to charge for the duration of use of the fund.\\r\\n    @param asset : The contract address of an approved assets in this group. \\r\\n                    @notice The pooled asset of this group is denominated in this currency. \\r\\n  */\\r\\n  struct CreatePoolParam {\\r\\n    uint16 intRate;\\r\\n    uint8 quorum;\\r\\n    uint16 duration;\\r\\n    uint24 colCoverage; \\r\\n    uint unitContribution;\\r\\n    address[] members;\\r\\n    address asset;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice Structured types - uint256\\r\\n   *  @param unit : Unit contribution.\\r\\n   *  @param currentPool : Total contributed to date.\\r\\n   */\\r\\n  struct Uint256s {\\r\\n    uint fullInterest;\\r\\n    uint intPerSec;\\r\\n    uint256 unit;\\r\\n    uint256 currentPool;\\r\\n    uint epochId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice Structured types - unit less than uint124\\r\\n   *  @param intRate : Rate of interest per duration. \\r\\n   *  @param quorum : The maximum number of users that can form a contribution group.\\r\\n   *  @param selector : This is like the hand or ticker of a clock that is used to select\\r\\n   *                    the next contributor to get finance.\\r\\n   *  @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \\r\\n                  in order to be able to get financed.\\r\\n      @param duration : The number of days the contribution contract will expires.\\r\\n   */\\r\\n  struct Uints {\\r\\n    uint quorum;\\r\\n    uint selector;\\r\\n    uint colCoverage;\\r\\n    uint duration;\\r\\n    uint intRate;\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n   * @notice Structured types - Address\\r\\n   * @param asset : Contract address of the asset in use.\\r\\n   * @param lastPaid: Last contributor who got finance.\\r\\n   * @param strategy : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n   * @param admin : Pool creator.\\r\\n   * \\r\\n   */\\r\\n  struct Addresses {\\r\\n    address asset;\\r\\n    address lastPaid;\\r\\n    address strategy;\\r\\n    address admin;\\r\\n  }\\r\\n  \\r\\n  struct AddTobandParam {\\r\\n    uint epochId;\\r\\n    bool isPermissioned;\\r\\n  }\\r\\n\\r\\n  struct CreatePoolReturnValue {\\r\\n    Pool pool; \\r\\n    ContributorData cData; \\r\\n    // uint epochId;\\r\\n  }\\r\\n\\r\\n  struct PaybackParam {\\r\\n    uint epochId;\\r\\n    address user;\\r\\n  }\\r\\n\\r\\n  struct UpdateMemberDataParam {\\r\\n    uint24 durOfChoice;\\r\\n    address expected;\\r\\n    uint epochId; \\r\\n    uint fee;\\r\\n    uint msgValue;\\r\\n    uint xfiUSDPriceInDecimals;\\r\\n    Pool pool;\\r\\n  }\\r\\n\\r\\n  struct InterestReturn {\\r\\n    uint fullInterest;\\r\\n    uint intPerSec;\\r\\n    uint intPerChoiceOfDur;\\r\\n  }\\r\\n\\r\\n  struct CommonEventData {\\r\\n    Pool pool;\\r\\n    uint debtBal;\\r\\n    uint colBal;\\r\\n  }\\r\\n\\r\\n  struct ContributorData {\\r\\n    Contributor cData;\\r\\n    Rank rank;\\r\\n    uint8 slot;\\r\\n  }\\r\\n\\r\\n  struct Balances {\\r\\n    uint xfi;\\r\\n    uint erc20;\\r\\n  }\\r\\n\\r\\n  struct DebtReturnValue {\\r\\n    uint debt;\\r\\n    uint slot;\\r\\n  }\\r\\n\\r\\n  struct SetClaimParam {\\r\\n    uint amount;\\r\\n    uint epochId;\\r\\n    uint fee;\\r\\n    uint debt;\\r\\n    uint value;\\r\\n    address contributor;\\r\\n    address strategy;\\r\\n    address feeTo;\\r\\n    bool allHasGF;\\r\\n    TransactionType txType;\\r\\n  }\\r\\n\\r\\n  error UpdateStrategyError();\\r\\n  error CollateralCoverageCannotGoBelow_100(uint24 ccr);\\r\\n\\r\\n}\",\"keccak256\":\"0x445dbcc0c2d0671e0ecef6a9a480df145cc88731d12e780df3d9febce1d29170\",\"license\":\"MIT\"},\"contracts/apis/IAssetClass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface IAssetClass {\\r\\n  error UnSupportedAsset(address);\\r\\n  error Locked();\\r\\n  \\r\\n  function isSupportedAsset(\\r\\n    address _asset\\r\\n  ) \\r\\n    external \\r\\n    view returns(bool);\\r\\n}\",\"keccak256\":\"0x8c5b7a13d1c6e9e9d7bfdfc11d1fb337729ef4a809f8bfe2636a1999b77a341b\",\"license\":\"MIT\"},\"contracts/apis/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f16e22e9c3da96f41e8237352b0d826ca0421b69340e09aedae74eb222428e6\",\"license\":\"MIT\"},\"contracts/apis/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/apis/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface IFactory is Common {\\r\\n  error InsufficientFund();\\r\\n  error AllMemberIsPaid();\\r\\n  error QuorumIsInvalid();\\r\\n  error OwnershipManagerIsNotSet();\\r\\n\\r\\n  event BandCreated(CreatePoolReturnValue);\\r\\n  event NewMemberAdded(CommonEventData);\\r\\n  event GetFinanced(CommonEventData);\\r\\n  event Payback(CommonEventData);\\r\\n  event Liquidated(CommonEventData);\\r\\n  event Cancellation(uint epochId);\\r\\n\\r\\n  event RoundUp(uint, Pool);\\r\\n  event Rekeyed(address indexed, address indexed);\\r\\n\\r\\n  enum Router { PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n  // function getRouterWithPoolId(\\r\\n  //   uint epochId\\r\\n  // ) \\r\\n  //   external \\r\\n  //   view \\r\\n  //   returns(string memory);\\r\\n  \\r\\n  function epoches() \\r\\n    external \\r\\n    view \\r\\n    returns(uint);\\r\\n\\r\\n  function createPermissionlessPool(\\r\\n    uint16 intRate,\\r\\n    uint8 quorum,\\r\\n    uint16 durationInHours,\\r\\n    uint24 colCoverage,\\r\\n    uint unitLiquidity,\\r\\n    address liquidAsset\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function createPermissionedPool(\\r\\n    uint16 intRate,\\r\\n    uint16 durationInHours,\\r\\n    uint24 colCoverage,\\r\\n    uint unitLiquidity,\\r\\n    address liquidAsset,\\r\\n    address[] memory contributors\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function payback(\\r\\n    uint epochId\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function joinAPool(\\r\\n    uint epochId\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function liquidate(\\r\\n    uint epochId\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function removeLiquidityPool(\\r\\n    uint epochId\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function getFinance(\\r\\n    uint epochId,\\r\\n    uint8 daysOfUseInHr\\r\\n  ) \\r\\n    external \\r\\n    payable returns(bool);\\r\\n\\r\\n  function getPoolData(\\r\\n    uint epochId\\r\\n  ) \\r\\n    external \\r\\n    view returns(Pool memory);\\r\\n\\r\\n  function enquireLiquidation(\\r\\n    uint epochId\\r\\n  ) \\r\\n    external \\r\\n    view \\r\\n    returns(Common.ContributorData memory _liq, bool defaulted, uint currentDebt); \\r\\n  \\r\\n  function getCurrentDebt(\\r\\n    uint epochId,\\r\\n    address target\\r\\n  ) \\r\\n    external \\r\\n    view \\r\\n    returns(uint debtToDate); \\r\\n\\r\\n  function getProfile(\\r\\n    uint epochId,\\r\\n    address user\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns(ContributorData memory);\\r\\n        \\r\\n  function getBalances(\\r\\n    uint epochId\\r\\n  )   \\r\\n    external\\r\\n    view\\r\\n    returns(Balances memory);\\r\\n\\r\\n  function withdrawCollateral(\\r\\n    uint epochId\\r\\n  )\\r\\n    external\\r\\n    returns(bool);\\r\\n \\r\\n  struct ContractData {\\r\\n    address feeTo;\\r\\n    address assetAdmin;\\r\\n    uint16 makerRate;\\r\\n    address strategyManager;\\r\\n  }\\r\\n\\r\\n  struct Analytics {\\r\\n    uint256 tvlInXFI;\\r\\n    uint256 tvlInUsd;\\r\\n    uint totalPermissioned;\\r\\n    uint totalPermissionless;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7387645184ceda9199eebc29e0d074dc1a0130ba48daffae9a749629736ca892\",\"license\":\"MIT\"},\"contracts/apis/IOwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IOwnerShip \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IOwnerShip {\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xe21511940e88a7e8036b4b6adfde25125f7f3d49cde2732bffd219847b3ed6c0\",\"license\":\"MIT\"},\"contracts/apis/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n  error ContractBalanceTooLow();\\r\\n  error InsufficientNativeBalanceInContract(uint);\\r\\n  error InsufficientCredit(uint, uint);\\r\\n  \\r\\n  /**\\r\\n   * @dev Add contributor to the list\\r\\n   * @param user : Contributor address\\r\\n   * @param epochId : Epoch Id\\r\\n   */\\r\\n  function addUp(\\r\\n    address user,\\r\\n    uint epochId\\r\\n  ) \\r\\n    external\\r\\n    returns(bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Map assetInUse to epoch Id in Strategy.\\r\\n   * @param epochId: Epoch Id otherwise known as pool Id.\\r\\n   * @param assetInUse: Contract address of the ERC20 token the contribution is based on.\\r\\n   * @return success\\r\\n   */\\r\\n  function mapAsset(\\r\\n    uint epochId, \\r\\n    address assetInUse\\r\\n  ) \\r\\n    external \\r\\n    returns(bool success);\\r\\n\\r\\n  /**\\r\\n   * @dev Utility to activate claim for a contributor.\\r\\n   * @param epochId: Epoch Id otherwise known as pool Id.\\r\\n   * @param claim: withdrawable amount.\\r\\n   * @param fee: Amount charged as fee.\\r\\n   * @param user: User address.\\r\\n   * @param feeTo: Fee receiver.\\r\\n   * @param txType : The type of transaction to perform in the call.\\r\\n   *                Can be either ERC20 or native transaction.\\r\\n  *  @param allHasGF : A boolean flag indicating whether the epoch should end or not.\\r\\n   * @return actualClaim\\r\\n   */\\r\\n  function setClaim(\\r\\n    uint claim,\\r\\n    uint fee,\\r\\n    uint credit,\\r\\n    uint epochId,\\r\\n    address user,\\r\\n    address feeTo,\\r\\n    bool allHasGF,\\r\\n    Common.TransactionType txType\\r\\n  ) \\r\\n    external\\r\\n    payable\\r\\n    returns(uint actualClaim);\\r\\n\\r\\n  function swapProvider(\\r\\n    uint epochId, \\r\\n    address newProv, \\r\\n    address oldProv\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function withdraw(\\r\\n    uint epochId,\\r\\n    address user\\r\\n  )\\r\\n    external\\r\\n    returns(uint xfiBalances);\\r\\n}\",\"keccak256\":\"0x187d7c5f85f91c42d4c0da6aade41df11de9ac25653e1b0dc9b27e6ec67eb5c5\",\"license\":\"MIT\"},\"contracts/apis/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title Interface of the Strateg manager\\r\\n * @author : Simplifinance\\r\\n */\\r\\ninterface IStrategyManager {\\r\\n  error ZeroAddress(address);\\r\\n  \\r\\n  /**\\r\\n   * Query strategy for user\\r\\n   * @param user : Address to get strategy for\\r\\n   * @return A strategy if none was found, it returns address(0).\\r\\n   */\\r\\n  function getStrategy(address user) external view returns(address);\\r\\n\\r\\n/**\\r\\n * Clones and return a new strategy\\r\\n * @param user : Target address for whom to create strategy\\r\\n */\\r\\n  function createStrategy(address user) external returns(address strategy);\\r\\n\\r\\n  /**\\r\\n   * Strategy struct map\\r\\n   * key: user address { EOA }\\r\\n   * value: Strategy { Contract } \\r\\n   */\\r\\n  struct StrategyData {\\r\\n    address key;\\r\\n    address value;\\r\\n  }\\r\\n  \\r\\n}\",\"keccak256\":\"0x20da1705fec8cdf769524bf21e1520387245b184d153bff962b516ea42ae9e82\",\"license\":\"MIT\"},\"contracts/implementations/AssetClass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { OnlyOwner } from \\\"../abstracts/OnlyOwner.sol\\\";\\r\\nimport { IAssetClass } from \\\"../apis/IAssetClass.sol\\\"; \\r\\n\\r\\ncontract AssetClass is IAssetClass, OnlyOwner {\\r\\n  address[] private assets;\\r\\n\\r\\n  /**\\r\\n   * @dev Mapping assets address to bool i.e Assets must be contract account\\r\\n   * and must be supported\\r\\n   */\\r\\n  mapping(address => bool) private supportedAssets;\\r\\n\\r\\n  mapping(address => bool) public listed;\\r\\n\\r\\n  /**\\r\\n   * @dev Asset must be supported before they can be used.\\r\\n   */\\r\\n  modifier onlySupportedAsset(address _asset) {\\r\\n    if(!supportedAssets[_asset]) revert UnSupportedAsset(_asset);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Initialize state variables\\r\\n   * @param _asset : Initial supported asset\\r\\n   */\\r\\n  constructor(\\r\\n    address _asset,\\r\\n    address _ownershipMgr\\r\\n  ) \\r\\n    OnlyOwner(_ownershipMgr) \\r\\n  {\\r\\n    require(_asset != address(0), \\\"Asset cannot be empty\\\");\\r\\n    _supportAsset(_asset);\\r\\n  }\\r\\n\\r\\n  // fallback(bytes calldata data) external returns(bytes memory) {\\r\\n  //   return \\\"Function not found\\\";\\r\\n  // }\\r\\n\\r\\n  /**\\r\\n   * @dev Support a new asset\\r\\n   * Note: OnlyOwner action\\r\\n   * @param _asset : Asset to add to list of supported asset\\r\\n   */\\r\\n  function supportAsset(\\r\\n    address _asset\\r\\n  ) \\r\\n    public \\r\\n    onlyOwner(\\\"AssetClass - supportAsset: Not permitted\\\")\\r\\n  {\\r\\n    _supportAsset(_asset); \\r\\n  }\\r\\n\\r\\n  function _supportAsset(address _asset) private {\\r\\n    \\r\\n    if(!listed[_asset]){\\r\\n      listed[_asset] = true;\\r\\n      assets.push(_asset);\\r\\n    }\\r\\n    if(!_isAssetSupported(_asset)){\\r\\n      supportedAssets[_asset] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Unsupports an asset\\r\\n   * Note: Only-owner action\\r\\n   * @param newAsset : Removes an asset from the list of supported asset\\r\\n   */\\r\\n  function unsupportAsset(\\r\\n    address newAsset\\r\\n  ) \\r\\n    public \\r\\n    onlyOwner(\\\"AssetClass - unsupportAsset: Not permitted\\\")\\r\\n  {\\r\\n    supportedAssets[newAsset] = false;\\r\\n  }\\r\\n\\r\\n  function _isAssetSupported(address _asset) internal view returns(bool) {\\r\\n    return supportedAssets[_asset];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Check if an asset is supported\\r\\n   */\\r\\n  function isSupportedAsset(address _asset) public override view returns(bool) {\\r\\n    return _isAssetSupported(_asset);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a list of supported assets\\r\\n   */\\r\\n  function getSupportedAssets() public view returns(address[] memory _assets) {\\r\\n    _assets = assets;\\r\\n    return _assets;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x411cdf19d0fc620c12782d2c152fffb57e5a8e6f3fc8c606359651d73c9ba324\",\"license\":\"MIT\"},\"contracts/implementations/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { AbstractFactory } from \\\"../abstracts/AbstractFactory.sol\\\";\\r\\n\\r\\n/** @title Factory : Main contract\\r\\n *  @author Simplifinance - (Bobeu) \\r\\n *  @notice \\r\\n *  A multi p2p lending and borrowing structure where liquidity providers are borrowers. We bring together users form different \\r\\n * parts of the world to form a liquidity synergy, where the pooled fund moved round them from the first to the last on the list\\r\\n * in form of borrowed fund.The permissionless model allows users to create liquidity pool for anyone to participate while the \\r\\n * permissioned structure restricts participation only to the known members known as band.\\r\\n*/\\r\\n\\r\\ncontract Factory is AbstractFactory {\\r\\n    mapping(uint => Router) public routers;\\r\\n\\r\\n  /** @dev Initializes state variables.\\r\\n    * @param serviceRate : Platform fee in %\\r\\n    * @param minContribution : Minimum contribution amount.\\r\\n    * @param setUpFee : Amount to charge for setting a liquidity pool.\\r\\n    * @param feeTo : Account to receive fees.\\r\\n    * @param assetClass : Asset manager contract.\\r\\n    * @param strategyManager : Strategy manager contract.\\r\\n    * @param ownerShipManager : Accessibility manager contract\\r\\n    */\\r\\n    constructor(\\r\\n        uint16 serviceRate,\\r\\n        uint minContribution,\\r\\n        uint setUpFee,\\r\\n        address feeTo,\\r\\n        address assetClass,\\r\\n        address strategyManager,\\r\\n        address ownerShipManager\\r\\n    ) AbstractFactory(\\r\\n        serviceRate,\\r\\n        minContribution,\\r\\n        setUpFee,\\r\\n        feeTo,\\r\\n        assetClass,\\r\\n        strategyManager,\\r\\n        ownerShipManager\\r\\n    ) { }\\r\\n\\r\\n    /**@dev Create permissioned pool\\r\\n        See AbstractFactory.sol \\r\\n     */\\r\\n    function createPermissionedPool(\\r\\n        uint16 intRate,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage,\\r\\n        uint unitLiquidity,\\r\\n        address liquidAsset,\\r\\n        address[] memory contributors\\r\\n    ) \\r\\n        external \\r\\n        returns(bool) \\r\\n    {\\r\\n        Router router = Router.PERMISSIONED;\\r\\n        uint quorum = contributors.length;\\r\\n        routers[\\r\\n            _createPool(\\r\\n                intRate,\\r\\n                uint8(quorum),\\r\\n                durationInHours,\\r\\n                colCoverage,\\r\\n                unitLiquidity,\\r\\n                liquidAsset,\\r\\n                contributors,\\r\\n                router\\r\\n            )\\r\\n        ] = router;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Create permissionless\\r\\n        See AbstractFactory.sol\\r\\n    */\\r\\n    function createPermissionlessPool(\\r\\n        uint16 intRate,\\r\\n        uint8 quorum,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage,\\r\\n        uint unitLiquidity,\\r\\n        address liquidAsset\\r\\n    ) \\r\\n        external \\r\\n        returns(bool) \\r\\n    {\\r\\n        Router _router = Router.PERMISSIONLESS;\\r\\n        address[] memory contributors = new address[](1);\\r\\n        contributors[0] = _msgSender();\\r\\n        routers[\\r\\n            _createPool(\\r\\n                intRate,\\r\\n                quorum,\\r\\n                durationInHours,\\r\\n                colCoverage,\\r\\n                unitLiquidity,\\r\\n                liquidAsset,\\r\\n                contributors,\\r\\n                _router\\r\\n            )\\r\\n        ] = _router;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove liquidity pool\\r\\n     * @param epochId : Epoch/Poool id\\r\\n     */\\r\\n    function removeLiquidityPool(\\r\\n        uint epochId\\r\\n    )\\r\\n        external\\r\\n        validateEpochId(epochId)\\r\\n        returns(bool)\\r\\n    {\\r\\n        _removeLiquidityPool(epochId, routers[epochId] == Router.PERMISSIONLESS);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /**@dev See AbstractFactory.sol */\\r\\n    function joinAPool(\\r\\n        uint epochId\\r\\n    ) \\r\\n        external \\r\\n        whenNotPaused\\r\\n        validateEpochId(epochId)\\r\\n        returns(bool) \\r\\n    {\\r\\n        return _joinEpoch(epochId, routers[epochId] == Router.PERMISSIONED);\\r\\n    }\\r\\n\\r\\n    /**@dev Return the router for an epochId. \\r\\n    */\\r\\n    function getRouter(\\r\\n        uint epochId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        validateEpochId(epochId)\\r\\n        returns(string memory) \\r\\n    {\\r\\n        return routers[epochId] == Router.PERMISSIONLESS ? \\\"PERMISSIONLESS\\\" : \\\"PERMISSIONED\\\";\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xe75438b997382483a348aa45c4afb1410ea90fd96d5ef5a7b8bdf6f0e5cb8f1b\",\"license\":\"MIT\"},\"contracts/implementations/OwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title OwnerShip \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Standalone contract for managing ownership in Simplifi protocol.\\r\\n */\\r\\ncontract OwnerShip is IOwnerShip, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of owners.\\r\\n     */\\r\\n    uint public ownersCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with ownership permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _isOwner;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of ownersCount to addresses.\\r\\n     * A valid id will return a mapped owner.\\r\\n     */\\r\\n    mapping (uint => address) public owners;\\r\\n\\r\\n    /**\\r\\n     * @dev Only owner is allowed.\\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        require(_isOwner[_msgSender()], \\\"Oop! Caller is not recognized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     */\\r\\n    function _getOwner(uint ownerId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _owner) \\r\\n    {\\r\\n        _owner = owners[ownerId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as owner.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setOwner(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"Simplifi OwnerShip: 'target' parameter is empty\\\");\\r\\n        add? (_isOwner[target] = true, ownersCount ++) : (_isOwner[target] = false, ownersCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new owner address\\r\\n     * @param newOwners: New owners\\r\\n     * @notice Only address with owner permission can add another owner.\\r\\n     */\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < newOwners.length; r++) {\\r\\n            _setOwner(newOwners[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as owner.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with owner permission can remove another owner.\\r\\n     */\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setOwner(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An owner can renounce their ownership. This however will not leave the\\r\\n     * contract empty without an owner. There must be at least one owner left.\\r\\n     * @notice Only address with owner permission can renounce ownership.\\r\\n     */\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(ownersCount > 1, \\\"At least 2 owners is required to leave\\\"); \\r\\n        _setOwner(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param ownerId : Owner Id. \\r\\n     */\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getOwner(ownerId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an owner.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _isOwner[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xecca6e7a2c2684e193fcb16ac131d1b2895f981862969101d96d94616db70c0c\",\"license\":\"MIT\"},\"contracts/libraries/FactoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { SafeMath } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\\\";\\r\\nimport { Counters } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\\\";\\r\\nimport { IERC20 } from \\\"../apis/IERC20.sol\\\";\\r\\nimport { IStrategyManager } from \\\"../apis/IStrategyManager.sol\\\";\\r\\nimport { IStrategy } from \\\"../apis/IStrategy.sol\\\";\\r\\nimport { IFactory } from \\\"../apis/IFactory.sol\\\";\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\nimport { AssetClass } from \\\"../implementations/AssetClass.sol\\\";\\r\\nimport { Utils } from \\\"../libraries/Utils.sol\\\";\\r\\n\\r\\n/**@dev\\r\\n  * @param amountExist: Tracks unit contribution i.e values created in each permissionless communities\\r\\n  * @param pools: Mapping of epochIds to Pool\\r\\n  * @param pData: Public State variable stats\\r\\n  * @param epoches : Total pool created to date\\r\\n  * @param contributors : Mapping of epochIds to group of contributors\\r\\n  * @param slots : Reverse map of contributors to epochId to slots on the list.\\r\\n*/\\r\\nstruct Data {\\r\\n  IFactory.ContractData pData;\\r\\n  Counters.Counter epoches; \\r\\n\\r\\n  /**Mapping of epochIds to pools */\\r\\n  mapping(uint => Common.Pool) pools;\\r\\n\\r\\n  /**Mapping of contribution amount to bool indicating if they exit or not */\\r\\n  mapping(uint256 => bool) amountExist; \\r\\n\\r\\n  /**Mapping of contributors addresses to epochid to slot */\\r\\n  mapping(address => mapping(uint => uint)) slots;\\r\\n\\r\\n  Common.Pool[] poolArr;// For testing only. To better optimize, it will \\r\\n                        // removed before going on live network\\r\\n}\\r\\n\\r\\nstruct Def {\\r\\n  bool t;\\r\\n  bool f;\\r\\n  uint8 zero;\\r\\n  uint8 one;\\r\\n  address zeroAddr;\\r\\n}\\r\\n\\r\\nlibrary FactoryLib {\\r\\n  using Utils for *;\\r\\n  using SafeMath for uint256;\\r\\n  using Counters for Counters.Counter;\\r\\n\\r\\n  event AllGh(uint epochId, Common.Pool pool);\\r\\n\\r\\n  /**\\r\\n   * @dev Create a fresh pool\\r\\n   * @param self: Storage of type `Data`\\r\\n   * @param cpp: This is a struct of data much like an object. We use it to compress a few parameters\\r\\n   *              instead of overloading _createPool.\\r\\n   * @notice We first check that the duraetion given by the admin should not be zero.\\r\\n   * Note: `.assertChained3` is simply making tripple boolean checks.\\r\\n   */\\r\\n  function _createPool(\\r\\n    Data storage self,\\r\\n    Common.CreatePoolParam memory cpp,\\r\\n    address strategy,\\r\\n    address user,\\r\\n    bool isPermissionless\\r\\n  ) \\r\\n    private \\r\\n    returns(Common.Pool memory pool) \\r\\n  {\\r\\n    Def memory _d = _def();\\r\\n    uint epochId = _generateEpochId(self);\\r\\n    bool(cpp.colCoverage >= 100).assertTrue(\\\"Col coverage is too low\\\");\\r\\n    Utils.assertTrue_2(cpp.duration > _d.zero, cpp.duration <= 720, \\\"Invalid duration\\\"); // 720hrs = 30 days.\\r\\n    _validateAllowance(user, cpp.asset, cpp.unitContribution);\\r\\n    _updatePoolSlot(self.poolArr, cpp, _d, strategy, isPermissionless, epochId);\\r\\n    // _setNextStage(self.poolArr, epochId, Common.FuncTag.JOIN);\\r\\n    pool = _fetchPool(self, epochId);\\r\\n    _updateAssetInStrategy(strategy, cpp.asset, epochId);\\r\\n    _withdrawAllowanceToStrategy(user, cpp.asset, cpp.unitContribution, strategy);\\r\\n  }\\r\\n\\r\\n  function _def()\\r\\n    internal \\r\\n    pure \\r\\n    returns(Def memory) \\r\\n  {\\r\\n    return Def(true, false, 0, 1, address(0));\\r\\n  }\\r\\n\\r\\n  ///@dev Returns current timestamp (unix).\\r\\n  function _now() \\r\\n    internal \\r\\n    view returns (uint) \\r\\n  {\\r\\n    return block.timestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Check that user has given enough approval to spend from their balances\\r\\n   * @param user : Caller.\\r\\n   * @param assetInUse : ERC20 currency address to use as contribution base.\\r\\n   * @param value : Contribution per user.\\r\\n   */\\r\\n  function _validateAllowance(\\r\\n    address user, \\r\\n    address assetInUse, \\r\\n    uint value\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n  {\\r\\n    require(IERC20(assetInUse).allowance(user, address(this)) >= value, \\\"FactoryLib: Insufficient allowance\\\");\\r\\n  }\\r\\n\\r\\n  /**@notice Send contribution to strategy\\r\\n   * @param user : User/Caller address\\r\\n   * @param assetInUse: ERC20 token { USD contract address }\\r\\n   * @param unitContribution: Unit contribution\\r\\n   * @param strategy : Address to hold funds on behalf of the members. The factory generates \\r\\n   * a strategy by querying StrategyManager. Every address that create a pool must operate a \\r\\n   * strategy. This process is managed internally for users.  \\r\\n   */\\r\\n  function _withdrawAllowanceToStrategy(\\r\\n    address user, \\r\\n    address assetInUse, \\r\\n    uint unitContribution, \\r\\n    address strategy\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    require(IERC20(assetInUse).transferFrom(user, strategy, unitContribution), \\\"FactoryLib: Transfer failed\\\");\\r\\n  }\\r\\n\\r\\n  /*** @dev Update the storage with pool information\\r\\n   * @param self: Storage of type `Data`\\r\\n   * @param cpp: This is a struct of data much like an object. We use it to compress a few parameters\\r\\n   *              instead of overloading _createPool.\\r\\n   * @param epochId: Pool we are currently dealing with.\\r\\n   * @param _d: Default literal values i.e True, False, 0, 1 and address(0) \\r\\n   */\\r\\n  function _updatePoolSlot(\\r\\n    Common.Pool[] storage self,\\r\\n    Common.CreatePoolParam memory cpp,\\r\\n    Def memory _d,\\r\\n    address strategy,\\r\\n    bool isPermissionless,\\r\\n    uint epochId\\r\\n  ) \\r\\n    private\\r\\n  {\\r\\n    uint24 durInSec = _convertDurToSec(uint16(cpp.duration));\\r\\n    Common.InterestReturn memory _itr = cpp.unitContribution.mul(cpp.quorum).computeInterestsBasedOnDuration(cpp.intRate, durInSec, durInSec);\\r\\n    self[epochId].uints = Common.Uints(cpp.quorum, _d.zero, cpp.colCoverage, durInSec, cpp.intRate);\\r\\n    self[epochId].uint256s = Common.Uint256s(_itr.fullInterest, _itr.intPerSec, cpp.unitContribution, cpp.unitContribution, epochId);\\r\\n    self[epochId].addrs = Common.Addresses(cpp.asset, _d.zeroAddr, strategy, cpp.members[0]);\\r\\n    self[epochId].isPermissionless = isPermissionless;\\r\\n    self[epochId].cData.push(\\r\\n      Common.ContributorData(\\r\\n        Common.Contributor(0, 0, 0, 0, 0, 0, cpp.members[0], false),\\r\\n        Common.Rank(true, true),\\r\\n        0\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Returns all uint256s related data in pool at epochId.\\r\\n  function _fetchPool(Data storage self, uint epochId) internal view returns (Common.Pool memory _return) {\\r\\n    _return = self.poolArr[epochId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Update strategy.\\r\\n   * @param strategy : Strategy for creator of band at 'epochId'.\\r\\n   * @param assetInUse: ERC20 currency address to use as contribution base.\\r\\n   * @param epochId: Otherwise known as pool Id.\\r\\n   */\\r\\n  function _updateAssetInStrategy(\\r\\n    address strategy,\\r\\n    address assetInUse,\\r\\n    uint epochId\\r\\n  ) private {\\r\\n    if(!IStrategy(strategy).mapAsset(epochId, assetInUse)){\\r\\n      revert Common.UpdateStrategyError();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**@dev Create permissioned band\\r\\n   * @param self: Storage of type `Data`.\\r\\n   * @param cpp : Parameter struct\\r\\n   * Note: Each of the addresses on the members array must an Account instance. Participants must already own an\\r\\n   * account before now otherwise, execution will not pass.\\r\\n   * - Admin cannot replicate themselves in a band.\\r\\n   * - Each of the contributors must have created account before now.\\r\\n   * - We assume admin should be address in first slot in the members array, so expression evaluates to `if not admin`.\\r\\n   */\\r\\n  function createPermissionedPool(\\r\\n    Data storage self,\\r\\n    Common.CreatePoolParam memory cpp\\r\\n  ) \\r\\n    internal\\r\\n    returns (Common.CreatePoolReturnValue memory cpr) \\r\\n  {\\r\\n    Def memory _d = _def();\\r\\n    address admin = cpp.members[0];\\r\\n    address strategy = _fetchAndValidateStrategy(admin, self.pData.strategyManager);\\r\\n    for(uint i = _d.zero; i < cpp.members.length; i++) {\\r\\n      if(i == _d.zero) {\\r\\n          cpr.pool = _createPool(self, cpp, strategy, admin, _d.f);\\r\\n          cpr.cData = _addNewContributor(self, cpr.pool.uint256s.epochId, admin, _d.t, _d.t, _d.t);\\r\\n      } else {\\r\\n        address contributor = cpp.members[i];\\r\\n        bool(contributor != admin).assertTrue(\\\"Admin spotted twice\\\");\\r\\n        _addNewContributor(self, cpr.pool.uint256s.epochId, contributor, _d.f, _d.t, _d.f);\\r\\n        cpr.pool = _fetchPool(self, cpr.pool.uint256s.epochId); \\r\\n      } \\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return strategy for user\\r\\n   * @param strategyManager: StrategyManager contract address\\r\\n   * @param user : Caller\\r\\n   */\\r\\n  function _getStrategy(\\r\\n    address strategyManager, \\r\\n    address user\\r\\n  ) \\r\\n    internal \\r\\n    view\\r\\n    returns(address _strategy) \\r\\n  {\\r\\n    _strategy = IStrategyManager(strategyManager).getStrategy(user);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Checks, validate and return strategy for the target address.\\r\\n   * @param user : Address for whom to get strategy.\\r\\n   * @param strategyManager : StrategyManager contract address.\\r\\n   */\\r\\n  function _fetchAndValidateStrategy(\\r\\n    address user,\\r\\n    address strategyManager\\r\\n  ) \\r\\n    private \\r\\n    returns(address strategy) \\r\\n  {\\r\\n    strategy = _getStrategy(strategyManager, user);\\r\\n    if(strategy == address(0)) {\\r\\n      strategy = IStrategyManager(strategyManager).createStrategy(user);\\r\\n    }\\r\\n    assert(strategy != address(0));\\r\\n  }\\r\\n\\r\\n    /**\\r\\n   * @dev Add new member to the pool\\r\\n   * Note: `target` is expected to be an instance of the `SmartStrategy`\\r\\n   * @param self: Storage pointer\\r\\n   * @param epochId: Pool index\\r\\n   * @param isAdmin: Whether strategy is an admin or not.\\r\\n   * @param isMember: Strategy strategy is a member or not.\\r\\n   */\\r\\n  function _addNewContributor(\\r\\n    Data storage self, \\r\\n    uint epochId, \\r\\n    address contributor,\\r\\n    bool isAdmin,\\r\\n    bool isMember,\\r\\n    bool sentQuota                                                                                                                                                                              \\r\\n  ) \\r\\n    private \\r\\n    returns(\\r\\n      Common.ContributorData memory cData\\r\\n    )\\r\\n  {\\r\\n    self.poolArr[epochId].cData.push();\\r\\n    uint8 slot = uint8(self.poolArr[epochId].userCount.current());\\r\\n    self.poolArr[epochId].userCount.increment();\\r\\n    cData = _addContributor(self, slot, Common.Rank({admin: isAdmin, member: isMember}), contributor, epochId, sentQuota);\\r\\n  }\\r\\n\\r\\n  /**@dev Push a new contributor to storage.\\r\\n    @param self : Storage of type Common.ContributorData array\\r\\n    @param rank : User's rank\\r\\n    @param slot : User's slot\\r\\n    @param contributor : Caller's address\\r\\n   */\\r\\n  function _addContributor(\\r\\n    Data storage self, \\r\\n    uint8 slot,\\r\\n    Common.Rank memory rank,\\r\\n    address contributor,\\r\\n    uint epochId,\\r\\n    bool sentQuota\\r\\n  ) \\r\\n    private \\r\\n    returns (Common.ContributorData memory cData)\\r\\n  {\\r\\n    _setSlotAndRank(self.poolArr[epochId].cData, slot, rank, contributor);\\r\\n    self.slots[contributor][epochId] = slot;\\r\\n    self.poolArr[epochId].cData[slot].cData.sentQuota = sentQuota;\\r\\n    cData = _getProfile(self, slot, epochId);\\r\\n  }\\r\\n\\r\\n  /**@dev Update contributor's data\\r\\n    @param self : Storage of type mapping\\r\\n    @param cbData : Contributor struct containing updated data\\r\\n    @param rank :  User rank of type Common.Rank.\\r\\n    @param slot : Position of Contributor in the list\\r\\n   */\\r\\n  function _setContributorData(\\r\\n    Common.ContributorData[] storage self, \\r\\n    Common.Contributor memory cbData,\\r\\n    Common.Rank memory rank,\\r\\n    uint16 slot \\r\\n  )\\r\\n    private \\r\\n  {\\r\\n    self[slot] = Common.ContributorData(\\r\\n      {\\r\\n        cData: cbData,\\r\\n        rank: rank,\\r\\n        slot: uint8(slot)\\r\\n      }\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the length of epochs i.e total epoch to date\\r\\n   * @param self : Storage of type Data\\r\\n   */\\r\\n  function _getEpoches(Data storage self) internal view returns(uint epoch) {\\r\\n    epoch = self.epoches.current();\\r\\n  } \\r\\n\\r\\n  /**\\r\\n   * @dev Generates Id for new epoch\\r\\n   * @param self: Storage of type Data\\r\\n   */\\r\\n  function _generateEpochId(\\r\\n    Data storage self\\r\\n  ) \\r\\n    internal \\r\\n    returns (uint _return) \\r\\n  {\\r\\n    self.poolArr.push();\\r\\n    _return = _getEpoches(self);\\r\\n    self.epoches.increment();\\r\\n  }\\r\\n\\r\\n  /**@dev Ruturn provider's info\\r\\n    @param self : Storage of type Common.ContributorData\\r\\n   */\\r\\n  function _getProfile(\\r\\n    Data storage self,\\r\\n    uint slot,\\r\\n    uint epochId\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n    returns(Common.ContributorData memory cbt) \\r\\n  {\\r\\n    cbt = self.poolArr[epochId].cData[slot];\\r\\n  }\\r\\n\\r\\n  /**@dev Creates a new permissionless community i.e public\\r\\n   * @param self: Storage of type `Data`\\r\\n   * @param cpp: This is a data struct. We use it to compress a few parameters\\r\\n   *              instead of overloading _createPool.\\r\\n   * Note: Only in private bands we mandated the selected contribution value does not exist.\\r\\n   *       This is to ensure orderliness in the system, timeliness, and efficiency.\\r\\n   */\\r\\n  function createPermissionlessPool( \\r\\n    Data storage self, \\r\\n    Common.CreatePoolParam memory cpp\\r\\n  )\\r\\n    internal\\r\\n    returns (Common.CreatePoolReturnValue memory cpr)\\r\\n  {\\r\\n    Def memory _d = _def();\\r\\n    address admin = cpp.members[0];\\r\\n    address strategy = _fetchAndValidateStrategy(admin, self.pData.strategyManager);\\r\\n    self.amountExist[cpp.unitContribution].assertFalse(\\\"Amount exist\\\");\\r\\n    self.amountExist[cpp.unitContribution] = _d.t;\\r\\n    cpr.pool = _createPool(self, cpp, strategy, admin, _d.t);\\r\\n    cpr.cData = _addNewContributor(self, cpr.pool.uint256s.epochId, admin, _d.t, _d.t, _d.t);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n   * @dev Add contributor to strategy. \\r\\n   * @param user : Contributor address\\r\\n   * @param strategy : Strategy for the epoch\\r\\n   * @param epochId : Epoch Id\\r\\n   */\\r\\n  function addContributorToStrategy(\\r\\n    address user,\\r\\n    address strategy,\\r\\n    uint epochId\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    require(IStrategy(strategy).addUp(user, epochId), \\\"Adding User to strategy failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Validates epochId\\r\\n   */\\r\\n  function verifyEpochId(\\r\\n    Data storage self,\\r\\n    uint epochId\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n  {\\r\\n    require(epochId < _getEpoches(self), \\\"Epoch Id has not begin\\\");\\r\\n  }\\r\\n\\r\\n  /**@dev Add new contributor to a band.\\r\\n   * @param self: Storage ref of type Data.\\r\\n   * @param _ab: Parameters struct.\\r\\n   * @notice A contributor can occupy more than one spot.\\r\\n  */\\r\\n  function addToBand(\\r\\n    Data storage self,\\r\\n    Common.AddTobandParam memory _ab\\r\\n  )\\r\\n    internal\\r\\n    returns (\\r\\n      Common.CommonEventData memory ced\\r\\n    ) \\r\\n  {\\r\\n    ced.pool = _fetchPool(self, _ab.epochId);\\r\\n    _validateStage(ced.pool.stage, Common.FuncTag.JOIN, \\\"Add Liquidity not ready\\\");\\r\\n    Def memory _d = _def();\\r\\n    if(_ab.isPermissioned) {\\r\\n      _mustBeAMember(self, _ab.epochId, _msgSender());\\r\\n      self.poolArr[_ab.epochId].cData[_getSlot(self.slots, _msgSender(), _ab.epochId)].cData.sentQuota = _d.t;\\r\\n    } else {\\r\\n      Utils.assertTrue(_getUserCount(self.poolArr[_ab.epochId]) < ced.pool.uints.quorum, \\\"Pub filled\\\");\\r\\n      _mustNotBeAMember(self, _ab.epochId, _msgSender());\\r\\n      _addNewContributor(self, _ab.epochId, _msgSender(), _d.f, _d.t, _d.t);\\r\\n    }\\r\\n    self.poolArr[_ab.epochId].uint256s.currentPool += ced.pool.uint256s.unit;\\r\\n    ced.pool = _fetchPool(self, _ab.epochId);\\r\\n    if(_isPoolFilled(self.poolArr[_ab.epochId], _ab.isPermissioned)) {\\r\\n      _setTurnTime(self, ced.pool.uints.selector, _ab.epochId);\\r\\n      _setNextStage(self.poolArr, _ab.epochId, Common.FuncTag.GET);\\r\\n    }\\r\\n    _validateAllowance(_msgSender(), ced.pool.addrs.asset, ced.pool.uint256s.unit);\\r\\n    _withdrawAllowanceToStrategy(_msgSender(), ced.pool.addrs.asset, ced.pool.uint256s.unit, ced.pool.addrs.strategy);\\r\\n    addContributorToStrategy(_msgSender(), ced.pool.addrs.strategy, _ab.epochId); \\r\\n    ced.pool = _fetchPool(self, _ab.epochId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Validate stage for invoked function.\\r\\n   */\\r\\n  function _validateStage(\\r\\n    Common.FuncTag expected, \\r\\n    Common.FuncTag actual, \\r\\n    string memory errorMessage\\r\\n  ) internal pure {\\r\\n    (expected == actual).assertTrue(errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev A Check to know if _msgSender() is a member of the band at epochId.\\r\\n   * @param self: Storage {typeof => mapping}\\r\\n   * @param epochId: Pool index\\r\\n   * @param contributor: Contributor address\\r\\n  */\\r\\n  function _mustBeAMember(\\r\\n    Data storage self,\\r\\n    uint epochId,\\r\\n    address contributor\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n  {\\r\\n    Common.Pool memory pool = _fetchPool(self, epochId);\\r\\n    uint8 slot = _getSlot(self.slots, contributor, epochId);\\r\\n    slot == 0? \\r\\n      bool(contributor == pool.addrs.admin).assertTrue(\\\"Admin cannot liquidate\\\")\\r\\n        : \\r\\n          _getProfile(self, slot, epochId).rank.member.assertTrue(\\\"Not a member\\\");\\r\\n  }\\r\\n\\r\\n  /**@dev Return number of members already in the pool \\r\\n   */\\r\\n  function _getUserCount(Common.Pool storage self) internal view returns(uint _return) {\\r\\n    _return = self.userCount.current();\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Msg.sender must not be a member of the band at epoch Id before now.\\r\\n   * @param self: Storage {typeof mapping}\\r\\n   * @param epochId: Pool index\\r\\n   * @param contributor : Contributor\\r\\n  */\\r\\n  function _mustNotBeAMember(\\r\\n    Data storage self,\\r\\n    uint epochId,\\r\\n    address contributor\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n  {\\r\\n    Common.Pool memory pool = _fetchPool(self, epochId);\\r\\n    uint8 slot = _getSlot(self.slots, contributor, epochId);\\r\\n    slot == 0? \\r\\n      bool(contributor != pool.addrs.admin).assertTrue(\\\"Admin cannot liquidate\\\")\\r\\n        : \\r\\n          require(false, \\\"Not permitted\\\");\\r\\n  }\\r\\n\\r\\n  /**@dev Check if pool is filled\\r\\n    * @dev Msg.sender must not be a member of the band at epoch Id before now.\\r\\n    * @param self: Pool struct\\r\\n  */\\r\\n  function _isPoolFilled(Common.Pool storage self, bool isPermissioned) \\r\\n    internal \\r\\n    view\\r\\n    returns(bool filled) \\r\\n  {\\r\\n    uint expected = self.uint256s.unit.mul(self.uints.quorum);\\r\\n    filled = !isPermissioned? _getUserCount(self) == self.uints.quorum : expected == self.uint256s.currentPool;\\r\\n  }\\r\\n\\r\\n  /**@dev Update selector to who will get finance next\\r\\n    * @param self: Storage {typeof mapping}\\r\\n    * @param epochId: Pool index.\\r\\n    * @param selector : Spot selector.\\r\\n  */\\r\\n  function _setTurnTime(\\r\\n    Data storage self, \\r\\n    uint selector, \\r\\n    uint epochId\\r\\n  ) \\r\\n    private\\r\\n  {\\r\\n    self.poolArr[epochId].cData[selector].cData.turnTime = _now();\\r\\n  }\\r\\n\\r\\n  function getProfile(\\r\\n    Data storage self, \\r\\n    address user,\\r\\n    uint epochId\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n    returns(Common.ContributorData memory) \\r\\n  {\\r\\n    return _getProfile(self, _getSlot(self.slots, user, epochId), epochId);\\r\\n  }\\r\\n\\r\\n  /**@dev Get the slots of user with address and epochId\\r\\n    @param self : Storage of type mappping\\r\\n    @param contributor : Contributor address\\r\\n   */\\r\\n  function _getSlot(\\r\\n    mapping(address =>mapping(uint => uint)) storage self, \\r\\n    address contributor, \\r\\n    uint epochId\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n    returns(uint8 _return) \\r\\n  {\\r\\n    _return = uint8(self[contributor][epochId]);\\r\\n  }\\r\\n\\r\\n  /**@dev Set the slot for contributor\\r\\n    @param self : Common.ContributorData\\r\\n    @param rank : User's Rank\\r\\n    @param slot : User's position\\r\\n    @param user : User's address\\r\\n   */\\r\\n  function _setSlotAndRank(\\r\\n    Common.ContributorData[] storage self,\\r\\n    uint8 slot, \\r\\n    Common.Rank memory rank,\\r\\n    address user\\r\\n  ) \\r\\n    private \\r\\n  { \\r\\n    self[slot].slot = slot;\\r\\n    self[slot].rank = rank;\\r\\n    self[slot].cData.id = user;\\r\\n  }\\r\\n  \\r\\n  /**@dev Set amount withdrawable by provider in their respective strategy.\\r\\n   * @param scp : Parameter of type Common.SetClaimPAram\\r\\n   *   struct SetClaimParam {\\r\\n          uint amount;\\r\\n          uint epochId;\\r\\n          uint fee;\\r\\n          uint debt;\\r\\n          uint value;\\r\\n          address contributor;\\r\\n          address strategy;\\r\\n          address feeTo;\\r\\n          bool allHasGF;\\r\\n          TransactionType txType;\\r\\n        }\\r\\n  */\\r\\n\\r\\n  function _setClaim(Common.SetClaimParam memory scp) \\r\\n    private \\r\\n    returns(uint actualClaim)\\r\\n  {\\r\\n    actualClaim = \\r\\n      IStrategy(scp.strategy).setClaim{value: scp.value}(\\r\\n        scp.amount,\\r\\n        scp.fee,\\r\\n        scp.debt,\\r\\n        scp.epochId,\\r\\n        scp.contributor,\\r\\n        scp.feeTo,\\r\\n        scp.allHasGF,\\r\\n        scp.txType\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**@dev Get finance: Sends current total contribution to the \\r\\n   * expected account and update respective accounts.\\r\\n    @param self : Storage of type Data.\\r\\n    @param epochId : Pool Id.\\r\\n    @param msgValue : Value sent in call.\\r\\n    @param daysOfUseInHr : Number of days specified in hours after which \\r\\n                      the contributor shall return the borrowed fund.\\r\\n    @param getXFIPriceInUSD : A function that returns the current price of XFI.\\r\\n  */\\r\\n  function getFinance(\\r\\n    Data storage self,\\r\\n    uint epochId,\\r\\n    uint msgValue,\\r\\n    uint16 daysOfUseInHr,\\r\\n    function () internal returns(uint) getXFIPriceInUSD\\r\\n  ) \\r\\n    internal\\r\\n    returns(Common.CommonEventData memory ced)\\r\\n  {\\r\\n    Common.Pool memory pool = _fetchPool(self, epochId);\\r\\n    _validateStage(pool.stage, Common.FuncTag.GET, \\\"Borrow not ready\\\");\\r\\n    if(pool.allGh == pool.uints.quorum) revert IFactory.AllMemberIsPaid();\\r\\n    _increaseAllGh(self.poolArr, epochId);\\r\\n    bool(pool.uint256s.currentPool >= (pool.uint256s.unit.mul(pool.uints.quorum))).assertTrue(\\\"Pool not complete\\\");\\r\\n    ced = _updateStorageAndCall(\\r\\n      self,\\r\\n      Common.UpdateMemberDataParam(\\r\\n        _convertDurToSec(daysOfUseInHr), \\r\\n        self.poolArr[epochId].cData[pool.uints.selector].cData.id,\\r\\n        epochId,\\r\\n        pool.uint256s.currentPool.computeFee(self.pData.makerRate),\\r\\n        msgValue,\\r\\n        getXFIPriceInUSD(),\\r\\n        pool\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**@dev Increase slot selector\\r\\n   *  This is a flag we use in selecting the next borrower.\\r\\n  */\\r\\n  function _moveSelectorToTheNext(\\r\\n    Common.Pool[] storage self, \\r\\n    uint epochId\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    self[epochId].uints.selector ++;\\r\\n  }\\r\\n\\r\\n  /**@dev Increment allGh when one member get finance\\r\\n  */\\r\\n  function _increaseAllGh(\\r\\n    Common.Pool[] storage self, \\r\\n    uint epochId\\r\\n  )  \\r\\n    private \\r\\n  {\\r\\n    self[epochId].allGh ++;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Validates duration selected by this contributor must not exceed the set duration.\\r\\n   * @param durInHrs : Duration set in hours.\\r\\n   */\\r\\n  function _convertDurToSec(\\r\\n    uint16 durInHrs\\r\\n  ) \\r\\n    internal \\r\\n    pure\\r\\n    returns(uint24 durOfChoiceInSec) \\r\\n  {\\r\\n    durOfChoiceInSec = uint24(uint(durInHrs).mul(1 hours));\\r\\n  }\\r\\n\\r\\n  function _computeCollateral(\\r\\n    uint loanAmount,\\r\\n    uint amountOfXFISent,\\r\\n    uint24 ccr,\\r\\n    uint xfiPriceInUSD\\r\\n  )\\r\\n    internal\\r\\n    pure\\r\\n    returns(uint collateral)\\r\\n  { \\r\\n    collateral = amountOfXFISent.computeCollateral(\\r\\n      18,\\r\\n      ccr,\\r\\n      xfiPriceInUSD,\\r\\n      loanAmount,\\r\\n      amountOfXFISent > 0\\r\\n    );\\r\\n  }\\r\\n\\r\\n\\r\\n  /** \\r\\n    * @dev Update storage.\\r\\n    * Note: Priority is given to expected contributor. i.e the first to get finance.\\r\\n    * Irrespective of who _msgSender() is, consideration is given to\\r\\n    * expected user provided their time to get finance has not pass.\\r\\n    * If _msgSender() is not the contributor we're expecting and the time\\r\\n    * to get finance for the contributor has passed, we swap the whole\\r\\n    * process in favor of the actual caller provided the conditions are met.\\r\\n    * @param self: Storage.\\r\\n    * @param arg : Parameter of type Common.UpdateMemberDataParam\\r\\n    * Note: \\r\\n    *   slot = exp.slot;\\r\\n        If the caller is not the next on the queue to getfinance\\r\\n        and the time to get finance for the expected account has passed.\\r\\n      @notice Debt is not determined ahead. We do that at the point of paying back\\r\\n              since borrrowers decide when to return the borrowed fund so long it is not\\r\\n              greater than the duration set by the admin.\\r\\n      We will also not include the debt for the 'credit' parameter as stated in Strategy.setClaim\\r\\n      unless borrowers are returning the loan.\\r\\n\\r\\n      ASSUMPTION 1\\r\\n      ------------\\r\\n      Assuming 2 providers in a pool, if the first on the list with slot '0' failed to GF within the grace\\r\\n      period, the next provider can take over. When this happens, the slots and profile are swapped to \\r\\n      alow the serious one proceed to borrow. Slot 0 becomes 1 vice versa. This allows the defaulted \\r\\n      party another chance to GF since the ticker i.e 'pool.uints.selector' waits for no one. It is always\\r\\n      incremented as long at the epoch is active. If the second slot also default, the any party in the pool\\r\\n      i.e Provider 1 can step in to GF. \\r\\n\\r\\n      ASSUMPTION 2\\r\\n      ------------\\r\\n      The case above is different where the number of providers exceeds 2. Since the selector goes forward, the \\r\\n      first one the list i.e admin is given priority to proceed to GF even after they defaulted. Since the admin\\r\\n      is 0, if they defaulted, slots greater than 0 can step in i.e from 1, 2, to 'n'. Admin slot is swapped for\\r\\n      higher slot.\\r\\n      If a defaulted slot is swapped for higher one, they have another chance to GF. But if a defaulted slot is \\r\\n      is swapped for the lower one, the only chance available to them is for the next GF to default so they can \\r\\n      hop in. \\r\\n      Irrespective of who defaults, the orderliness is preserved, And the defaulted must wait for the turn of the \\r\\n      new slot assigned to them. \\r\\n  */  \\r\\n  function _updateStorageAndCall(\\r\\n    Data storage self,\\r\\n    Common.UpdateMemberDataParam memory arg\\r\\n  ) \\r\\n    private\\r\\n    returns (Common.CommonEventData memory ced) \\r\\n  {\\r\\n    Def memory _d = _def();\\r\\n    address caller = arg.expected;\\r\\n    Common.ContributorData memory cbt = _getProfile(self, _getSlot(self.slots, arg.expected, arg.epochId), arg.epochId); // Expected contributor\\r\\n    if(_now() > cbt.cData.turnTime + 1 hours){\\r\\n      if(_msgSender() != arg.expected) {\\r\\n        caller = _msgSender();\\r\\n        _mustBeAMember(self, arg.epochId, caller);\\r\\n        cbt = _swapFullProfile(self, cbt.slot, arg.expected, caller, arg.epochId, cbt);\\r\\n      }\\r\\n    } else {\\r\\n      require(_msgSender() == cbt.cData.id, \\\"Turn time has not passed\\\");\\r\\n    }\\r\\n    bool(arg.msgValue >= _computeCollateral(\\r\\n        arg.pool.uint256s.currentPool,\\r\\n        arg.msgValue,\\r\\n        uint24(arg.pool.uints.colCoverage),\\r\\n        arg.xfiUSDPriceInDecimals\\r\\n      )\\r\\n    ).assertTrue(\\\"Insufficient Collateral in XFI\\\");\\r\\n    self.poolArr[arg.epochId].addrs.lastPaid = caller;\\r\\n    _moveSelectorToTheNext(self.poolArr, arg.epochId);\\r\\n    _setContributorData(\\r\\n      self.poolArr[arg.epochId].cData,\\r\\n      Common.Contributor({\\r\\n        durOfChoice: arg.durOfChoice,\\r\\n        expInterest: arg.pool.uint256s.currentPool.computeInterestsBasedOnDuration(uint16(arg.pool.uints.intRate), uint24(arg.pool.uints.duration) ,arg.durOfChoice).intPerChoiceOfDur,\\r\\n        payDate: _now().add(arg.durOfChoice),\\r\\n        turnTime: cbt.cData.turnTime,\\r\\n        loan: _setClaim(Common.SetClaimParam(arg.pool.uint256s.currentPool, arg.epochId, arg.fee, 0, arg.msgValue ,caller, arg.pool.addrs.strategy, self.pData.feeTo, _d.f,Common.TransactionType.ERC20)),\\r\\n        colBals: arg.msgValue,\\r\\n        id: caller,\\r\\n        sentQuota: cbt.cData.sentQuota\\r\\n    }),\\r\\n      cbt.rank,\\r\\n      cbt.slot\\r\\n    );\\r\\n    _setNextStage(self.poolArr, arg.epochId, Common.FuncTag.PAYBACK);\\r\\n    ced.pool = _fetchPool(self, arg.epochId);\\r\\n    _resetPoolBalance(self.poolArr, arg.epochId);\\r\\n  }\\r\\n\\r\\n  /**@dev Reset pool balances\\r\\n    @param self: Storage of type mapping\\r\\n    @param epochId : Pool index\\r\\n   */\\r\\n  function _resetPoolBalance(Common.Pool[] storage self, uint epochId) private {\\r\\n    self[epochId].uint256s.currentPool = _def().zero;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the caller identifier from the msg object \\r\\n   * Gas-saving\\r\\n   */\\r\\n  function _msgSender() internal view returns(address _sender) {\\r\\n    _sender = msg.sender;\\r\\n  }\\r\\n\\r\\n  \\r\\n  /**\\r\\n   * @dev Swaps slot if the calling address is different from the expected contributor.\\r\\n   * The assumption is that profile data of contributors who are yet to get finance\\r\\n   * are identical except if the expected address is an admin which makes it easier for us to swap profile data.\\r\\n   * @param self: Storage ref of type `Data`.\\r\\n   * @param expSlot: Slot of the expected address.\\r\\n   * @param expCaller : The address that should get finance if nothing change.\\r\\n   * @param actCaller: Actual calling address.\\r\\n   * @param epochId: Pool Id.\\r\\n   * @param expcData: Profile of expected user.\\r\\n   * @notice Defaulted address will not be taken out of the band. In this case, we move them backward. \\r\\n   *          The worse that could happen to them is to them is for someone else to occupy their slot. \\r\\n   */\\r\\n  function _swapFullProfile(\\r\\n    Data storage self,\\r\\n    uint8 expSlot,\\r\\n    address expCaller,\\r\\n    address actCaller,\\r\\n    uint epochId,\\r\\n    Common.ContributorData memory expcData\\r\\n  )\\r\\n    private \\r\\n    returns(Common.ContributorData memory cbt) \\r\\n  {\\r\\n    cbt = _getProfile(self, _getSlot(self.slots, actCaller, epochId), epochId);\\r\\n    cbt.cData.turnTime = expcData.cData.turnTime;\\r\\n    expcData.cData.turnTime = 0;\\r\\n    _setContributorData(self.poolArr[epochId].cData, cbt.cData, cbt.rank, expSlot);\\r\\n    _setContributorData(self.poolArr[epochId].cData, expcData.cData, expcData.rank, cbt.slot);\\r\\n    self.slots[expCaller][epochId] = cbt.slot;\\r\\n    self.slots[actCaller][epochId] = expSlot;\\r\\n    cbt = _getProfile(self, _getSlot(self.slots, actCaller, epochId), epochId);\\r\\n  }\\r\\n\\r\\n  /**@dev Payback borrowed fund.\\r\\n   * @param self : Storage\\r\\n   * @param pb : Payback Parameters struct.\\r\\n   *    struct SetClaimParam {\\r\\n          uint amount;\\r\\n          uint epochId;\\r\\n          uint fee;\\r\\n          uint debt;\\r\\n          uint value;\\r\\n          address contributor;\\r\\n          address strategy;\\r\\n          address feeTo;\\r\\n          bool allHasGF;\\r\\n          TransactionType txType;\\r\\n        }\\r\\n  */\\r\\n  function payback(\\r\\n    Data storage self,\\r\\n    Common.PaybackParam memory pb,\\r\\n    function(address, uint, bool) internal setPermit \\r\\n  )\\r\\n    internal\\r\\n    returns(Common.CommonEventData memory ced)\\r\\n  {\\r\\n    Common.Pool memory _p = _fetchPool(self, pb.epochId);\\r\\n    _validateStage(_p.stage, Common.FuncTag.PAYBACK, \\\"Payback not ready\\\");\\r\\n    Common.DebtReturnValue memory drv = _getCurrentDebt(self, pb.epochId, pb.user);\\r\\n    bool(drv.debt > 0).assertTrue(\\\"No debt\\\");\\r\\n    bool allGF = _allHasGF(self.poolArr, pb.epochId);\\r\\n    if(!allGF){\\r\\n      _replenishPoolBalance(self.poolArr, pb.epochId);\\r\\n      _setNextStage(self.poolArr, pb.epochId, Common.FuncTag.GET);\\r\\n      _setTurnTime(self, _p.uints.selector, pb.epochId);\\r\\n    } else {\\r\\n      _setNextStage(self.poolArr, pb.epochId, Common.FuncTag.ENDED);\\r\\n    }\\r\\n    setPermit(pb.user, pb.epochId, _def().t);\\r\\n    _validateAllowance(pb.user, _p.addrs.asset, drv.debt);\\r\\n    _withdrawAllowanceToStrategy(pb.user, _p.addrs.asset, drv.debt, _p.addrs.strategy);\\r\\n    ced.pool = _fetchPool(self, pb.epochId);\\r\\n    ced = Common.CommonEventData(ced.pool, ced.pool.uint256s.currentPool, ced.pool.cData[drv.slot].cData.colBals);\\r\\n    _setClaim(\\r\\n      Common.SetClaimParam({\\r\\n        amount: ced.pool.cData[drv.slot].cData.colBals,\\r\\n        epochId: pb.epochId,\\r\\n        fee: 0,\\r\\n        debt: drv.debt,\\r\\n        value: 0,\\r\\n        contributor: pb.user,\\r\\n        strategy: _p.addrs.strategy,\\r\\n        feeTo: address(0),\\r\\n        allHasGF: allGF,\\r\\n        txType: Common.TransactionType.NATIVE\\r\\n      })\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current stage of pool at epochId \\r\\n   */\\r\\n  function _getStage(\\r\\n    Common.Pool[] storage self, \\r\\n    uint epochId\\r\\n  ) internal view returns(Common.FuncTag stage) {\\r\\n    stage = self[epochId].stage;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the next stage of an epoch\\r\\n   */\\r\\n  function _setNextStage(\\r\\n    Common.Pool[] storage self, \\r\\n    uint epochId,\\r\\n    Common.FuncTag nextStage\\r\\n  ) private {\\r\\n    // uint8 stage = uint8(_getStage(self, epochId));\\r\\n    assert(uint8(nextStage) < 5);\\r\\n    self[epochId].stage = nextStage;\\r\\n  }\\r\\n\\r\\n  /**@dev Return accrued debt for user up to this moment.\\r\\n   * @param self : Storage\\r\\n   * @param epochId : EpochId.\\r\\n   * @param user : Contributor.\\r\\n   * @notice This is the total accrued debt between the date user was paid and now.\\r\\n  */\\r\\n  function _getCurrentDebt(\\r\\n    Data storage self, \\r\\n    uint epochId, \\r\\n    address user\\r\\n  ) \\r\\n    internal \\r\\n    view returns(Common.DebtReturnValue memory drv) \\r\\n  {\\r\\n    uint intPerSec = _fetchPool(self, epochId).uint256s.intPerSec;\\r\\n    drv.slot = _getSlot(self.slots, user, epochId);\\r\\n    Common.Contributor memory _cb = _getProfile(self, drv.slot, epochId).cData;\\r\\n    drv.debt = _cb.loan.add(intPerSec.mul(_now().sub(_cb.turnTime)));\\r\\n  }\\r\\n\\r\\n  /**@dev Reset pool balances\\r\\n    @param self: Storage of type mapping\\r\\n    @param epochId : Pool index\\r\\n   */\\r\\n  function _replenishPoolBalance(Common.Pool[] storage self, uint epochId) private {\\r\\n    Common.Pool memory pool = self[epochId];\\r\\n    self[epochId].uint256s.currentPool = pool.uint256s.unit.mul(pool.uints.quorum);\\r\\n  }\\r\\n\\r\\n  \\r\\n  /**@dev Check if round is completed i.e all contributors have received finance\\r\\n  */\\r\\n  function _allHasGF(Common.Pool[] storage self, uint epochId) internal view returns(bool) {\\r\\n    Common.Pool memory pool = self[epochId];\\r\\n    return pool.allGh == pool.uints.quorum;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return struct object with data if current beneficiary has defaulted otherwise an empty struct is returned.\\r\\n   * @param self : Storage\\r\\n   * @param epochId: Pool id\\r\\n   */\\r\\n  function _enquireLiquidation(\\r\\n    Data storage self, \\r\\n    uint epochId\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n    returns (Common.ContributorData memory _liq, bool defaulted, uint currentDebt) \\r\\n  {\\r\\n    Common.Pool memory _p = _fetchPool(self, epochId);\\r\\n    Common.ContributorData memory prof = _getProfile(self, _getSlot(self.slots, _p.addrs.lastPaid, epochId), epochId);\\r\\n    (_liq, defaulted, currentDebt) \\r\\n      = \\r\\n        _now() <= prof.cData.payDate? \\r\\n          (_liq, _def().f, 0) \\r\\n            : \\r\\n              (prof, _def().t, _getCurrentDebt(\\r\\n                self,\\r\\n                epochId,\\r\\n                prof.cData.id\\r\\n              ).debt);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Liquidates a borrower if they have defaulted in repaying their loan.\\r\\n      - If the current beneficiary defaults, they're liquidated.\\r\\n      - Their collateral balances is forwarded to the liquidator.\\r\\n      - Liquidator must not be a participant in pool at `epochId. We use this \\r\\n        to avoid fatal error in storage.\\r\\n    @param self : Storage ref.\\r\\n    @param epochId : Epoch Id.\\r\\n  */\\r\\n  function liquidate(\\r\\n    Data storage self,\\r\\n    uint epochId,\\r\\n    function(address, uint, bool) internal setPermit\\r\\n  ) \\r\\n    internal\\r\\n    returns (Common.CommonEventData memory ced)\\r\\n  {\\r\\n    (Common.ContributorData memory prof, bool defaulted,) = _enquireLiquidation(self, epochId);\\r\\n    defaulted.assertTrue(\\\"Not defaulter\\\");\\r\\n    address liquidator = _msgSender();\\r\\n    _mustNotBeAMember(self, epochId, liquidator);\\r\\n    self.poolArr[epochId].addrs.lastPaid = liquidator;\\r\\n    uint8 slot = _getSlot(self.slots, prof.cData.id, epochId);\\r\\n    _swapProfile(self, epochId, slot, liquidator, prof.cData.id);\\r\\n    ced = payback(\\r\\n      self, \\r\\n      Common.PaybackParam(epochId, liquidator),\\r\\n      setPermit\\r\\n    ); \\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Swaps profiles of two contributors\\r\\n   * This is useful during liquidation where we swap the defaulted borrower's\\r\\n   * profile to the liquidator. One thing to note is that when liquidation takes\\r\\n   * place, the new contributor will have their collateral balances and debts set\\r\\n   * to zero while this is not the case otherwise.\\r\\n   */\\r\\n  function _swapProfile(\\r\\n    Data storage self,\\r\\n    uint epochId,\\r\\n    uint8 oldProvSlot,\\r\\n    address newProv,\\r\\n    address defProv\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    self.poolArr[epochId].cData[oldProvSlot].cData.id = newProv;\\r\\n    self.slots[newProv][epochId] = oldProvSlot;\\r\\n    delete self.slots[defProv][epochId];\\r\\n    IStrategy(_fetchPool(self, epochId).addrs.strategy).swapProvider(epochId, newProv, defProv);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Cancels virgin band i.e Newly created band with only one contributor.\\r\\n      Only admin of a band can cancel only if no one has join the band.\\r\\n    @param self : Storage\\r\\n    @param epochId : Pool Id.\\r\\n    @param isPermissionLess : Whether band is public or not.\\r\\n\\r\\n    @notice : Setting the quorum to 0 is an indication that a pool was removed.\\r\\n  */\\r\\n  function cancelBand(\\r\\n    Data storage self,\\r\\n    uint epochId,\\r\\n    bool isPermissionLess,\\r\\n    function(address, uint, bool) internal setPermit\\r\\n  ) \\r\\n    internal\\r\\n    returns (uint success)\\r\\n  {\\r\\n    verifyEpochId(self, epochId);\\r\\n    Common.Pool memory _p = _fetchPool(self, epochId);\\r\\n    address creator = _msgSender();\\r\\n    _isAdmin(self, epochId, creator);\\r\\n    Def memory _d = _def();\\r\\n    if(isPermissionLess) {\\r\\n      bool(self.poolArr[epochId].userCount.current() == 1).assertTrue(\\\"FactoryLib - Pub: Cannot cancel\\\");\\r\\n      delete self.amountExist[_p.uint256s.unit];\\r\\n    } else {\\r\\n      bool(_p.uint256s.currentPool <= _p.uint256s.unit).assertTrue(\\\"FactoryLib - Priv: Cannot cancel\\\");\\r\\n    }\\r\\n    self.poolArr[epochId].uints.quorum = 0;\\r\\n    setPermit(creator, epochId, true);\\r\\n    _setNextStage(self.poolArr, epochId, Common.FuncTag.ENDED);\\r\\n    _setClaim(Common.SetClaimParam({\\r\\n        amount: _p.uint256s.unit, \\r\\n        epochId: epochId, \\r\\n        fee: 0, \\r\\n        debt: 0, \\r\\n        value: 0, \\r\\n        contributor: creator, \\r\\n        strategy: _p.addrs.strategy, \\r\\n        feeTo: address(0), \\r\\n        allHasGF: _d.f, \\r\\n        txType: Common.TransactionType.ERC20\\r\\n      })\\r\\n    );\\r\\n\\r\\n    success = _p.uint256s.unit;\\r\\n  }\\r\\n\\r\\n  function _isAdmin(\\r\\n    Data storage self,\\r\\n    uint epochId,\\r\\n    address user\\r\\n  ) \\r\\n    internal\\r\\n    view\\r\\n  {\\r\\n    uint8 slot = _getSlot(self.slots, user, epochId);\\r\\n    require(self.poolArr[epochId].cData[slot].rank.admin, \\\"FactoryLib: Only admin\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws collateral\\r\\n   * @param self: storage ref.\\r\\n   * @param epochId: Epoch Id.\\r\\n   */\\r\\n  function withdrawCollateral(\\r\\n    Data storage self,\\r\\n    uint epochId\\r\\n  ) \\r\\n    internal\\r\\n    returns(uint256)\\r\\n  {\\r\\n    address user = _msgSender();\\r\\n    self.poolArr[epochId].cData[_getSlot(self.slots, user, epochId)].cData.colBals = 0;\\r\\n    return IStrategy(_fetchPool(self, epochId).addrs.strategy).withdraw(epochId, user);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the different balances locked in an epoch\\r\\n   * @param self : Data ref\\r\\n   * @param epochId : Epoch Id\\r\\n   */\\r\\n  function _getBalancesOfStrategy(\\r\\n    Data storage self,\\r\\n    uint epochId\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns(Common.Balances memory balances) \\r\\n  {\\r\\n    Common.Addresses memory addrs = _fetchPool(self, epochId).addrs;\\r\\n    balances = Common.Balances({\\r\\n      xfi: addrs.strategy.balance,\\r\\n      erc20: IERC20(addrs.asset).balanceOf(addrs.strategy)\\r\\n    });\\r\\n  }\\r\\n  /** @dev Update Contract variables\\r\\n    * @param self : Storage. \\r\\n    * @param assetAdmin : Asset manager contract.\\r\\n    * @param feeTo : Fee receiver.\\r\\n    * @param makerRate : Service fee.\\r\\n   */\\r\\n  function setContractData(\\r\\n    Data storage self,\\r\\n    address assetAdmin,\\r\\n    address feeTo,\\r\\n    uint16 makerRate\\r\\n  ) \\r\\n    internal \\r\\n    returns(bool)\\r\\n  {\\r\\n    if(assetAdmin != address(0)) self.pData.assetAdmin = assetAdmin;\\r\\n    if(feeTo != address(0)) self.pData.feeTo = feeTo;\\r\\n    if(makerRate < type(uint16).max) self.pData.makerRate = makerRate;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function fetchPools(\\r\\n    Data storage self\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns(Common.Pool[] memory pools) \\r\\n  {\\r\\n    pools = self.poolArr;\\r\\n    return pools;\\r\\n  } \\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x0eea3adf301ec94eee0f30895f6d6843c1a6834c464059061f13b7c86cd0d889\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { SafeMath } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    error InsufficientCollateral(uint256 actual, uint256 expected);\\r\\n\\r\\n    error InvalidDenominator(string message);\\r\\n\\r\\n    ///@dev Requires all conditions to be true \\r\\n    function assertTrue_2(bool a, bool b, string memory errorMessage) internal pure {\\r\\n        require(a && b, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires single condition to be true \\r\\n    function assertTrue(bool condition, string memory errorMessage) internal pure {\\r\\n        require(condition, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires conditions to be true \\r\\n    function assertFalse(bool condition, string memory errorMessage) internal pure {\\r\\n        require(!condition, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**     @dev Calculation of percentage.\\r\\n        *   This is how we calculate percentage to arrive at expected value with \\r\\n        *   precision.\\r\\n        *   We choose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set \\r\\n        *   her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \\r\\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \\r\\n        *   zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\\r\\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\\r\\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \\r\\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\\r\\n        *   @param interest : Interest rate. \\r\\n        *   \\r\\n        *   Rules\\r\\n        *   -----\\r\\n        *   - Principal cannot be less than base.\\r\\n        *   - Interest cannot be greater than (2 ^ 16) - 1\\r\\n    */\\r\\n    function _getPercentage(\\r\\n        uint principal, \\r\\n        uint16 interest\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns (uint _return) \\r\\n    {\\r\\n        uint16 base = _getBase(); \\r\\n        if(interest == 0 || principal == 0) return 0;\\r\\n        assertTrue(interest < type(uint16).max, \\\"Interest overflow\\\");\\r\\n        assertTrue(principal > base, \\\"Principal should be greater than 10000\\\");\\r\\n        _return = principal.mul(interest).div(base);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Percentage base\\r\\n     */\\r\\n    function _getBase() internal pure returns(uint16 base) {\\r\\n        base = 10000;\\r\\n    }\\r\\n    \\r\\n    function _decimals(address asset) internal view returns(uint8 decimals) {\\r\\n        decimals = IERC20Metadata(asset).decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes collateral on the requested loan amount\\r\\n     * @param xfiBaseDecimals : Decimals on which XFI is based e.g 18. USDT for instance is 18.\\r\\n     * @param ccr : Collateral ratio. Must be multiply by 100 before parsing as input i.e if raw ccr\\r\\n     *              is 1.2, it should be rendered as 1.2 * 100 = 120.\\r\\n     * @param xfiUSDPriceInDecimals : Price of XFI in the right decimal.\\r\\n     * @param loanReqInDecimals : Total requested contribution in USD\\r\\n     * @param amountOfXFISent : Amount sent in XFI as collateral.\\r\\n     * @notice Based on Simplifi mvp, loans are collaterized in XFI until we add more pairs\\r\\n     *         in the future.\\r\\n     * Example: Alice, Bob and Joe formed a band to contribute $100 each where duration is for \\r\\n     * 10 days each. Alice being the admin set ccr to 1.5 equivalent to 150% of the total sum \\r\\n     * contribution of $300. If the price of XFI as at the time of GF is $0.5/XFI, where XFI decimals\\r\\n     * is in 18, we calculate the required XFI to stake as follows:   \\r\\n     *  \\r\\n     *                    totalContribution *  (10** XFIdecimals)   |                 raw ccr\\r\\n     *   totalLoanInXFI = --------------------------------------    |    actualCCR = (1.5 * 100) * 100 = 1500\\r\\n     *                        (xfiPriceIndecimals)                  |\\r\\n     * \\r\\n     *                     totalLoanInXFI * actualCCR\\r\\n     *        XFINeeded = ----------------------------\\r\\n     *                             _getBase()\\r\\n     * \\r\\n     *  Therefore, Alice is required to stake 900XFI to GF $300 for 10 days.\\r\\n     *   \\r\\n     */\\r\\n    function computeCollateral(\\r\\n        uint amountOfXFISent,\\r\\n        uint8 xfiBaseDecimals,\\r\\n        uint24 ccr,\\r\\n        uint xfiUSDPriceInDecimals,\\r\\n        uint loanReqInDecimals,\\r\\n        bool performCheck\\r\\n    ) \\r\\n        internal\\r\\n        pure \\r\\n        returns(uint256 expColInXFI) \\r\\n    {\\r\\n        uint8 mantissa = 100;\\r\\n        if(ccr < mantissa) revert Common.CollateralCoverageCannotGoBelow_100(ccr);\\r\\n        uint48 _ccr = uint48(uint(ccr).mul(100));\\r\\n        uint totalLoanInXFI = loanReqInDecimals.mul(10**xfiBaseDecimals).div(xfiUSDPriceInDecimals);\\r\\n        expColInXFI = totalLoanInXFI.mul(_ccr).div(_getBase());\\r\\n        if(performCheck) {\\r\\n            assertTrue(amountOfXFISent >= expColInXFI, \\\"Insufficient XFI\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Computes maker fee.\\r\\n        @param makerRate : The amount of fee (in %) charged by the platform on the principal given to a borrower.\\r\\n            Note : Raw rate must multiply by 100 to get the expected value i.e\\r\\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\\r\\n            See `_getPercentage()`.\\r\\n        @param amount should be in decimals.\\r\\n    */\\r\\n    function computeFee(\\r\\n        uint amount, \\r\\n        uint16 makerRate\\r\\n    ) \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint mFee) \\r\\n    {\\r\\n        mFee = _getPercentage(amount, makerRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compute interest based on specified rate.\\r\\n     * @param rate : Interest rate.\\r\\n     * @param principal : Total expected contribution.\\r\\n     * @param durOfChoiceInSec : Duration of loan. To be specified in hours.\\r\\n     * \\r\\n     * Rules\\r\\n     * -----\\r\\n     * - Duration cannot exceed 30days i.e 2592000 seconds uint24 seconds\\r\\n     */\\r\\n    function computeInterestsBasedOnDuration(\\r\\n        uint principal,\\r\\n        uint16 rate,\\r\\n        uint24 fullDurationInSec,\\r\\n        uint24 durOfChoiceInSec\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns(Common.InterestReturn memory _itr) \\r\\n    {\\r\\n        Common.InterestReturn memory it;\\r\\n        assertTrue_2((fullDurationInSec <= _maxDurationInSec() && uint(durOfChoiceInSec).mod(60) == 0), (durOfChoiceInSec <= fullDurationInSec && uint(fullDurationInSec).mod(60) == 0), \\\"Utils: FullDur or DurOfChoice oerflow\\\");\\r\\n        it.fullInterest = _getPercentage(principal, rate); // Full interest for fullDurationInSec\\r\\n        if(it.fullInterest > 0) {\\r\\n            it.intPerSec = it.fullInterest.mul(1).div(fullDurationInSec);\\r\\n            it.intPerChoiceOfDur = fullDurationInSec > durOfChoiceInSec? it.fullInterest.mul(durOfChoiceInSec).div(fullDurationInSec) : it.fullInterest;\\r\\n        }\\r\\n        _itr = it; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Max duration : 30Days, presented in seconds\\r\\n     */\\r\\n    function _maxDurationInSec() internal pure returns(uint24 max) {\\r\\n        max = 2592000;\\r\\n    }\\r\\n\\r\\n    function notZeroAddress(address target) internal pure {\\r\\n        require(target != address(0), \\\"Zero address\\\");\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x06aa69d5f3099a06426447a1320c4e2a20efab6f1059317a1745dc4c112eb998\",\"license\":\"MIT\"},\"contracts/peripherals/FuncHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\nimport { Pausable } from \\\"../abstracts/Pausable.sol\\\";\\r\\n\\r\\ncontract FuncHandler is Pausable {\\r\\n  /**\\r\\n   * @notice Mapping of epochId to permit\\r\\n   * Permit is used to give instructions to the child contract who can\\r\\n   * withdraw from an epoch.\\r\\n   * Only one provider can withdraw at a time in an apoch.\\r\\n   */\\r\\n  mapping (uint => mapping (address => bool)) public permits;\\r\\n  \\r\\n  /**\\r\\n    @dev Determines if function should be called for a specific pool.\\r\\n      @param tag - Function handle.\\r\\n      @param epochId - Pool index.\\r\\n  */\\r\\n  modifier checkPermit(uint epochId, Common.FuncTag tag) {\\r\\n    address caller = _msgSender();\\r\\n    require(permits[epochId][caller], \\\"FuncHandler: No Permission detected\\\");\\r\\n   \\r\\n    _;\\r\\n    _setPermit(caller, epochId, false);\\r\\n  }\\r\\n\\r\\n  constructor(address _ownershipManager) Pausable(_ownershipManager) {}\\r\\n\\r\\n  function _setPermit(\\r\\n    address target, \\r\\n    uint epochId, \\r\\n    bool permit\\r\\n  ) \\r\\n    internal \\r\\n  {\\r\\n    permits[epochId][target] = permit;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x81faa59c9a3965274a6138a5662a22db4be99fe2e14aafdaf48e90288310567c\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200603638038062006036833981016040819052620000349162000105565b600080546001600160a81b0319166001600160a01b039283161790556001600255600c95909555604080516080810182529386168085529286166020850181905261ffff90971690840181905294166060909201829052600380546001600160a01b0319908116909217905560048054740100000000000000000000000000000000000000009095026001600160b01b031990951690951793909317909355600580549092169092179055600b5562000191565b80516001600160a01b03811681146200010057600080fd5b919050565b600080600080600080600060e0888a0312156200012157600080fd5b875161ffff811681146200013457600080fd5b602089015160408a0151919850965094506200015360608901620000e8565b93506200016360808901620000e8565b92506200017360a08901620000e8565b91506200018360c08901620000e8565b905092959891949750929550565b615e9580620001a16000396000f3fe6080604052600436106101e75760003560e01c80639501a2b411610102578063b88a391511610095578063dce0b4e411610064578063dce0b4e4146106dd578063dde665b3146106f3578063f09734ec14610713578063f6c8e2441461073357600080fd5b8063b88a391514610638578063be24cff814610670578063c4933c5014610690578063d21c87ad146106b057600080fd5b8063a846c2fd116100d1578063a846c2fd146105cd578063aaffadf3146105ed578063b404763f14610603578063b45ea91c1461061657600080fd5b80639501a2b4146104a1578063a4424cf4146104c1578063a68b91ab146104ee578063a7393476146105ad57600080fd5b8063490adbaf1161017a57806361737d621161014957806361737d62146103f05780637b3ce2151461041057806380d5ac8a146104495780638456cb591461048c57600080fd5b8063490adbaf146103395780634e9c1118146103745780635c975abb146103b15780636112fe2e146103d057600080fd5b80633f4ba83a116101b65780633f4ba83a146102b45780633fd97927146102c9578063415f1240146102f65780634662ecbe1461031657600080fd5b80630e22d318146101f3578063184e495f146102155780631a055c1a1461024a5780631c4df1f91461027957600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e3660046153ce565b610753565b005b34801561022157600080fd5b506102356102303660046153ce565b61083d565b60405190151581526020015b60405180910390f35b34801561025657600080fd5b5061026a6102653660046153ce565b610883565b60405161024193929190615471565b34801561028557600080fd5b506102356102943660046154b3565b600160209081526000928352604080842090915290825290205460ff1681565b3480156102c057600080fd5b506102136108b3565b3480156102d557600080fd5b506102e96102e43660046154b3565b6109ff565b60405161024191906154e3565b34801561030257600080fd5b506102356103113660046153ce565b610a27565b34801561032257600080fd5b5061032b610ad5565b604051908152602001610241565b34801561034557600080fd5b506103596103543660046153ce565b610ae6565b60408051825181526020928301519281019290925201610241565b34801561038057600080fd5b506103a461038f3660046153ce565b60116020526000908152604090205460ff1681565b6040516102419190615518565b3480156103bd57600080fd5b50600054600160a01b900460ff16610235565b3480156103dc57600080fd5b506102356103eb3660046153ce565b610b18565b3480156103fc57600080fd5b5061023561040b36600461552b565b610c31565b34801561041c57600080fd5b5061043061042b3660046153ce565b610d4f565b6040805192835262ffffff909116602083015201610241565b34801561045557600080fd5b50600d54600e54600f5460105461046c9392919084565b604080519485526020850193909352918301526060820152608001610241565b34801561049857600080fd5b50610213610dad565b3480156104ad57600080fd5b506102136104bc3660046153ce565b610ee5565b3480156104cd57600080fd5b506104e16104dc3660046153ce565b6110b9565b604051610241919061558e565b3480156104fa57600080fd5b5061056860408051608081018252600080825260208201819052918101829052606081019190915250604080516080810182526003546001600160a01b0390811682526004548082166020840152600160a01b900461ffff1692820192909252600554909116606082015290565b604051610241919081516001600160a01b03908116825260208084015182169083015260408084015161ffff1690830152606092830151169181019190915260800190565b3480156105b957600080fd5b506102356105c83660046155d7565b611145565b3480156105d957600080fd5b506102356105e83660046153ce565b6111f1565b3480156105f957600080fd5b5061032b600c5481565b610235610611366004615648565b611299565b34801561062257600080fd5b5061062b61134e565b60405161024191906157e0565b34801561064457600080fd5b50600054610658906001600160a01b031681565b6040516001600160a01b039091168152602001610241565b34801561067c57600080fd5b5061023561068b3660046153ce565b61135a565b34801561069c57600080fd5b506102356106ab36600461585a565b61139f565b3480156106bc57600080fd5b506106d06106cb3660046153ce565b6113bb565b604051610241919061596e565b3480156106e957600080fd5b5061032b600b5481565b3480156106ff57600080fd5b5061021361070e366004615981565b6113da565b34801561071f57600080fd5b5061032b61072e3660046154b3565b61153e565b34801561073f57600080fd5b5061023561074e3660046159e1565b611561565b604051806060016040528060368152602001615d96603691396000546001600160a01b03168061079e5760405162461bcd60e51b815260040161079590615a30565b60405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108169190615a67565b82906108355760405162461bcd60e51b8152600401610795919061558e565b505050600c55565b60008161084b600382611665565b610879836000808681526011602052604090205460ff166001811115610873576108736154f2565b146116b9565b5060019392505050565b61088b615225565b6000808361089a600382611665565b6108a5600386611732565b935093509350509193909250565b60408051808201909152601f81527f5061757361626c653a204f6e6c794f776e65722063616e20756e70617573650060208201526000546001600160a01b0316806109105760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190615a67565b82906109a75760405162461bcd60e51b8152600401610795919061558e565b506109b06117c3565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a15050565b610a07615225565b82610a13600382611665565b610a1f600384866117ef565b949350505050565b6000610a31611812565b81610a3d600382611665565b6000610a4d60038561183d611873565b90507ffe5a24b015fb66e7f076878ae33fe23bdbd8358b0bd0654705ad58def1157ff381604051610a7e9190615a89565b60405180910390a160408051608081018252600d8054808352600e80546020808601828152600f54878901526010546060880152968801519093039485905295909101519094019283905255905550600192915050565b6000610ae1600361197b565b905090565b604080518082019091526000808252602082015281610b06600382611665565b610b1160038461198e565b9392505050565b600081610b26600382611665565b600083815260016020908152604080832033808552925290912054849160039160ff16610ba15760405162461bcd60e51b815260206004820152602360248201527f46756e6348616e646c65723a204e6f205065726d697373696f6e2064657465636044820152621d195960ea1b6064820152608401610795565b6000610bae600388611a47565b9050610be960405180604001604052806012815260200171616e616c79746963732e74766c496e58464960701b815250600d60000154611b2f565b610c0e6040518060400160405280600381526020016210985b60ea1b81525082611b2f565b600d805491909103905560019450610c288184600061183d565b50505050919050565b60408051808201909152601881527f4f6e6c794f776e65723a204e6f74207065726d697474656400000000000000006020820152600080549091906001600160a01b031680610c925760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190615a67565b8290610d295760405162461bcd60e51b8152600401610795919061558e565b50600080546001600160a01b0319166001600160a01b0386161790555060019392505050565b60008082610d5e600382611665565b6000610d6b600386611b74565b9050610d988160400151606001516000836020015160400151610d93678963dd8c2c5e000090565b611dce565b60209091015160400151909350915050915091565b60408051808201909152601d81527f5061757361626c653a204f6e6c794f776e65722063616e20706175736500000060208201526000546001600160a01b031680610e0a5760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190615a67565b8290610ea15760405162461bcd60e51b8152600401610795919061558e565b50610eaa611812565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586109e03390565b604051806060016040528060238152602001615dcc602391396000546001600160a01b031680610f275760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190615a67565b8290610fbe5760405162461bcd60e51b8152600401610795919061558e565b50600083118015610fd0575030318311155b61101c5760405162461bcd60e51b815260206004820152601860248201527f56616c75652069732030207c7c20302062616c616c6e636500000000000000006044820152606401610795565b6003546040516000916001600160a01b03169085908381818185875af1925050503d8060008114611069576040519150601f19603f3d011682016040523d82523d6000602084013e61106e565b606091505b50509050806110b35760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0811985a5b1959607a1b6044820152606401610795565b50505050565b6060816110c7600382611665565b60008381526011602052604081205460ff1660018111156110ea576110ea6154f2565b14611119576040518060400160405280600c81526020016b141154935254d4d253d3915160a21b815250610b11565b505060408051808201909152600e81526d5045524d495353494f4e4c45535360901b6020820152919050565b6040805160018082528183019092526000918291829160208083019080368337019050509050338160008151811061117f5761117f615ac5565b60200260200101906001600160a01b031690816001600160a01b03168152505081601160006111b48c8c8c8c8c8c8a8c611dea565b81526020810191909152604001600020805460ff1916600183818111156111dd576111dd6154f2565b021790555060019998505050505050505050565b60006111fb611812565b81611207600382611665565b600061123a60405180604001604052808681526020016112243390565b6001600160a01b0316905260039061183d6120c1565b90507ffe5a24b015fb66e7f076878ae33fe23bdbd8358b0bd0654705ad58def1157ff38160405161126b9190615a89565b60405180910390a16020810151600e805460009061128a908490615af1565b90915550600195945050505050565b60006112a3611812565b826112af600382611665565b60006112c46003863460ff8816611dc2612349565b90507f317bcce7ba630da9baeff0ed14ec48f5639cf4c1ae57a98d7f3546a1016881f2816040516112f59190615a89565b60405180910390a160408051608081018252600d8054600e805460208501818152600f54868801526010546060808801919091523490940195869052965190950151909101519093039384905255555060019392505050565b6060610ae160036124ff565b6000611364611812565b81611370600382611665565b610b1183600160008681526011602052604090205460ff166001811115611399576113996154f2565b14612770565b8051600090600190816011846111b48c858d8d8d8d8d8a611dea565b6113c36152b6565b816113cf600382611665565b610b11600384611b74565b604051806060016040528060248152602001615e16602491396000546001600160a01b03168061141c5760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190615a67565b82906114b35760405162461bcd60e51b8152600401610795919061558e565b50600c879055604080516080810182526001600160a01b038088168083528188166020840181905261ffff8d169484018590529187166060909301839052600380546001600160a01b03199081169092179055600480546001600160b01b031916909217600160a01b90940293909317905560058054909216179055600b8690555050505050505050565b60008261154c600382611665565b611558600385856127f1565b51949350505050565b6000604051806060016040528060278152602001615def602791396000546001600160a01b0316806115a55760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d9190615a67565b829061163c5760405162461bcd60e51b8152600401610795919061558e565b50600b5460000361164d57600b8490555b61165a6003878988612881565b979650505050505050565b61166e8261197b565b81106116b55760405162461bcd60e51b815260206004820152601660248201527522b837b1b41024b2103430b9903737ba103132b3b4b760511b6044820152606401610795565b5050565b60006116c3611812565b826116cf600382611665565b6116de6003858561183d61290d565b600e80546000906116f0908490615b04565b90915550506040518481527f79d50744e568d2dcbac1c613dc0f174be90b0121dbc73682de80b3c4ebc5d1e79060200160405180910390a15060019392505050565b61173a615225565b60008060006117498686611b74565b9050600061177087611767896006018560600151602001518a612b12565b60ff1688612b39565b8051604001519091504211156117a35780611789612c3e565b51825160c0015161179d908a908a906127f1565b516117b3565b846117ac612c3e565b6020015160005b9199909850909650945050505050565b600054600160a01b900460ff166117ed57604051638dfc202b60e01b815260040160405180910390fd5b565b6117f7615225565b610a1f84611809866006018686612b12565b60ff1684612b39565b600054600160a01b900460ff16156117ed5760405163d93c066560e01b815260040160405180910390fd5b60009182526001602090815260408084206001600160a01b03959095168452939052919020805460ff1916911515919091179055565b61187b615387565b6000806118888686611732565b50915091506118c76040518060400160405280600d81526020016c2737ba103232b330bab63a32b960991b815250821515612c9890919063ffffffff16565b336118d3878783612cbc565b808760070187815481106118e9576118e9615ac5565b60009182526020822060139190910201600c0180546001600160a01b0319166001600160a01b039390931692909217909155835160c001516119309060068a019089612b12565b905061194788888385886000015160c00151612d89565b61196f8860405180604001604052808a8152602001856001600160a01b0316815250886120c1565b98975050505050505050565b6000611988826003015490565b92915050565b604080518082019091526000808252602082015260006119ae8484611b74565b6060015160408051808201825281830180516001600160a01b039081163183528451915193516370a0823160e01b81529381166004850152939450909260208401929116906370a0823190602401602060405180830381865afa158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d9190615b17565b9052949350505050565b6000803390506000846007018481548110611a6457611a64615ac5565b9060005260206000209060130201601101611a83866006018487612b12565b60ff1681548110611a9657611a96615ac5565b6000918252602090912060056009909202010155611ab48484611b74565b606001516040908101519051627b8a6760e11b8152600481018590526001600160a01b0383811660248301529091169062f714ce906044016020604051808303816000875af1158015611b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190615b17565b6116b58282604051602401611b45929190615b30565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052612ebc565b611b7c6152b6565b826007018281548110611b9157611b91615ac5565b6000918252602080832060408051610120810182526013909402909101805461010085019081528452815160a080820184526001830154825260028301548286015260038301548285015260048301546060808401919091526005840154608080850191909152878701939093528451808301865260068501548152600785015481880152600885015481870152600985015481830152600a850154818501528786015284518084018652600b8501546001600160a01b039081168252600c860154811682890152600d860154811682880152600e860154168183015290870152600f83015491860191909152601082015460ff161515908501526011810180548351818602810186019094528084529495919460c08701949192909184015b82821015611d815760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b90910481161515610140880152928652845180860186526007850154808516151582529190910483161515818801528587015260089092015416918301919091529083529092019101611cb1565b50505090825250601282015460209091019060ff166004811115611da757611da76154f2565b6004811115611db857611db86154f2565b9052509392505050565b678963dd8c2c5e000090565b6000611de1846012858589841515612ec8565b95945050505050565b6000611df4611812565b60048054604051634df48c7360e11b81526001600160a01b0380881693820193909352869290911690639be918e690602401602060405180830381865afa158015611e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e679190615a67565b611e8f57604051631e26fa1d60e11b81526001600160a01b0382166004820152602401610795565b600080846001811115611ea457611ea46154f2565b14905080611ef5576001855111611ef05760405162461bcd60e51b815260206004820152601060248201526f4d696e206f662032206d656d6265727360801b6044820152606401610795565b611f48565b60018a60ff1611611f485760405162461bcd60e51b815260206004820152601960248201527f526f757465723a2051756f72756d20697320696e76616c6964000000000000006044820152606401610795565b60006040518060e001604052808d61ffff1681526020018c60ff1681526020018b61ffff1681526020018a62ffffff168152602001898152602001878152602001886001600160a01b0316815250905060008215611fb057611fab600383612f92565b611fbb565b611fbb60038361309b565b6040805160808082018352600d548252600e546020808401918252600f548486015260105460608501528451928301909452825182525193945090929091820190612007908d90615af1565b815260200185612026576040830151612021906001615af1565b61202c565b82604001515b815260200185612040578260600151612050565b6060830151612050906001615af1565b90528051600d556020810151600e55604080820151600f55606090910151601055517f9f863e268a0d18cc26555f1335b71f38bd64654c71f3abeec28fa25c8fc8f5a99061209f908490615b52565b60405180910390a1505160400151608001519c9b505050505050505050505050565b6120c9615387565b60006120d9858560000151611b74565b90506121148160e001516002604051806040016040528060118152602001705061796261636b206e6f7420726561647960781b815250613216565b600061212986866000015187602001516127f1565b604080518082019091526007815266139bc81919589d60ca1b6020820152815191925061215891151590612c98565b600061216b876007018760000151613245565b9050806121b257612183876007018760000151613499565b612196876007018760000151600161371d565b6121ad87846020015160200151886000015161378b565b6121c5565b6121c5876007018760000151600461371d565b6121e4866020015187600001516121da612c3e565b5163ffffffff8916565b602086015160608401515183516121fc9291906137dc565b602086015160608401518051845160409092015161221b9392906138a8565b612229878760000151611b74565b845260408051606080820183528651825286518301510151602080830191909152865160c001519085015181519293840192811061226957612269615ac5565b60200260200101516000015160a00151815250935061233e604051806101400160405280866000015160c001518560200151815181106122ab576122ab615ac5565b60200260200101516000015160a0015181526020018860000151815260200160008152602001846000015181526020016000815260200188602001516001600160a01b031681526020018560600151604001516001600160a01b0316815260200160006001600160a01b03168152602001831515815260200160006001811115612337576123376154f2565b905261396f565b505050509392505050565b612351615387565b600061235d8787611b74565b90506123978160e0015160016040518060400160405280601081526020016f426f72726f77206e6f7420726561647960801b815250613216565b6020810151516080820151036123c05760405163d77e83a360e01b815260040160405180910390fd5b6123cd8760070187613a19565b61242e60405180604001604052806011815260200170506f6f6c206e6f7420636f6d706c65746560781b81525061241d836020015160000151846040015160400151613a5290919063ffffffff16565b604084015160600151101590612c98565b61165a876040518060e0016040528061244688613a5e565b62ffffff1681526020018a6007018a8154811061246557612465615ac5565b90600052602060002090601302016011018560200151602001518154811061248f5761248f615ac5565b6000918252602091829020600660099092020101546001600160a01b0316825281018a905260018b0154604086810151606001519201916124db9161ffff600160a01b90910416613a70565b81526020018881526020016124f28763ffffffff16565b8152602001849052613a7c565b606081600701805480602002602001604051908101604052809291908181526020016000905b828210156127655760008481526020808220604080516101208101825260138702909201805461010084019081528352815160a080820184526001830154825260028301548287015260038301548285015260048301546060808401919091526005840154608080850191909152868801939093528451808301865260068501548152600785015481890152600885015481870152600985015481830152600a850154818501528686015284518084018652600b8501546001600160a01b039081168252600c8601548116828a0152600d860154811682880152600e860154168183015290860152600f83015491850191909152601082015460ff161515908401526011810180548351818702810187019094528084529395919460c087019491929084015b8282101561271b5760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b9091048116151561014088015292865284518086018652600785015480851615158252919091048316151581880152858701526008909201541691830191909152908352909201910161264b565b50505090825250601282015460209091019060ff166004811115612741576127416154f2565b6004811115612752576127526154f2565b8152505081526020019060010190612525565b505050509050919050565b60008061279d60405180604001604052808681526020018515158152506003613e5b90919063ffffffff16565b90507f71b5023b988b7a2b3a2e6b1bbc0a8ce798e78a73ae4cae0b437caf271fcd645d816040516127ce9190615a89565b60405180910390a1516040908101510151600e8054909101905550600192915050565b604080518082019091526000808252602082015260006128118585611b74565b60400151602001519050612829856006018486612b12565b60ff166020830181905260009061284290879087612b39565b60000151905061287561286a612863836060015161285d4290565b90614115565b8490613a52565b608083015190614121565b83525090949350505050565b60006001600160a01b038416156128b0576001850180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b038316156128d95784546001600160a01b0319166001600160a01b0384161785555b61ffff82811610156129025760018501805461ffff60a01b1916600160a01b61ffff8516021790555b506001949350505050565b60006129198585611665565b60006129258686611b74565b90503361293387878361412d565b600061293d612c3e565b905085156129d7576129b46040518060400160405280601f81526020017f466163746f72794c6962202d205075623a2043616e6e6f742063616e63656c008152506129ab8a6007018a8154811061299657612996615ac5565b90600052602060002090601302016000015490565b60011490612c98565b604080840151810151600090815260058a0160205220805460ff19169055612a24565b60408051808201825260208082527f466163746f72794c6962202d20507269763a2043616e6e6f742063616e63656c908201528482015191820151606090920151612a2492101590612c98565b6000886007018881548110612a3b57612a3b615ac5565b906000526020600020906013020160010160000181905550612a63828860018863ffffffff16565b612a728860070188600461371d565b612afe6040518061014001604052808560400151604001518152602001898152602001600081526020016000815260200160008152602001846001600160a01b031681526020018560600151604001516001600160a01b0316815260200160006001600160a01b03168152602001836020015115158152602001600180811115612337576123376154f2565b505050604090810151015195945050505050565b6001600160a01b039091166000908152602092835260408082209282529190925290205490565b612b41615225565b836007018281548110612b5657612b56615ac5565b90600052602060002090601302016011018381548110612b7857612b78615ac5565b60009182526020918290206040805161016081018252600990930290910180546060840190815260018201546080850152600282015460a0850152600382015460c0850152600482015460e085015260058201546101008086019190915260068301546001600160a01b03811661012087015260ff600160a01b9091048116151561014087015291855283518085018552600784015480841615158252919091048216151581870152948401949094526008015490921691810191909152949350505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506040805160a08101825260018082526000602083018190529282018390526060820152608081019190915290565b8082612cb75760405162461bcd60e51b8152600401610795919061558e565b505050565b6000612cc88484611b74565b90506000612cda856006018486612b12565b905060ff811615612d225760405162461bcd60e51b815260206004820152600d60248201526c139bdd081c195c9b5a5d1d1959609a1b6044820152606401610795565b612d82565b612d826040518060400160405280601681526020017541646d696e2063616e6e6f74206c697175696461746560501b8152508360600151606001516001600160a01b0316856001600160a01b031614151515612c9890919063ffffffff16565b5050505050565b81856007018581548110612d9f57612d9f615ac5565b90600052602060002090601302016011018460ff1681548110612dc457612dc4615ac5565b600091825260208083206006600990930201820180546001600160a01b039586166001600160a01b031990911617905585841683529088018082526040808420898552835280842060ff8916905593851683528152828220878352905290812055612e2f8585611b74565b606001516040908101519051636d6ccde160e01b8152600481018690526001600160a01b038481166024830152838116604483015290911690636d6ccde1906064016020604051808303816000875af1158015612e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb49190615a67565b505050505050565b612ec5816141d5565b50565b6000606462ffffff8616811115612ef95760405163a371850b60e01b815262ffffff87166004820152602401610795565b6000612f0b62ffffff88166064613a52565b90506000612f2e87612f28612f218c600a615c68565b8990613a52565b906141f6565b9050612f48612710612f288365ffffffffffff8616613a52565b93508415612f8557612f85848b10156040518060400160405280601081526020016f496e73756666696369656e742058464960801b815250612c98565b5050509695505050505050565b612f9a6153ae565b6000612fa4612c3e565b905060008360a00151600081518110612fbf57612fbf615ac5565b60209081029190910101516002860154909150600090612fe99083906001600160a01b0316614202565b604080518082018252600c81526b105b5bdd5b9d08195e1a5cdd60a21b6020808301919091526080890151600090815260058b0190915291909120549192506130379160ff161515906142a3565b8251608086015160009081526005880160205260409020805460ff191691151591909117905582516130709087908790849086906142c3565b8085526040015160800151835161308c918891859080806143ea565b60208501525091949350505050565b6130a36153ae565b60006130ad612c3e565b905060008360a001516000815181106130c8576130c8615ac5565b602090810291909101015160028601549091506000906130f29083906001600160a01b0316614202565b604084015190915060ff165b8560a001515181101561320c57836040015160ff1681036131505761312a8787848688602001516142c3565b80865260400151608001518451613146918991869080806143ea565b6020860152613204565b60008660a00151828151811061316857613168615ac5565b602002602001015190506131c76040518060400160405280601381526020017241646d696e2073706f7474656420747769636560681b815250856001600160a01b0316836001600160a01b031614151515612c9890919063ffffffff16565b85516040015160800151602086015186516131e9928b929091859190816143ea565b506132008887600001516040015160800151611b74565b8652505b6001016130fe565b5050505092915050565b612cb78183600481111561322c5761322c6154f2565b85600481111561323e5761323e6154f2565b1490612c98565b60008083838154811061325a5761325a615ac5565b6000918252602080832060408051610120810182526013909402909101805461010085019081528452815160a080820184526001830154825260028301548286015260038301548285015260048301546060808401919091526005840154608080850191909152878701939093528451808301865260068501548152600785015481880152600885015481870152600985015481830152600a850154818501528786015284518084018652600b8501546001600160a01b039081168252600c860154811682890152600d860154811682880152600e860154168183015290870152600f83015491860191909152601082015460ff161515908501526011810180548351818602810186019094528084529495919460c08701949192909184015b8282101561344a5760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b9091048116151561014088015292865284518086018652600785015480851615158252919091048316151581880152858701526008909201541691830191909152908352909201910161337a565b50505090825250601282015460209091019060ff166004811115613470576134706154f2565b6004811115613481576134816154f2565b90525060208101515160809091015114949350505050565b60008282815481106134ad576134ad615ac5565b6000918252602080832060408051610120810182526013909402909101805461010085019081528452815160a080820184526001830154825260028301548286015260038301548285015260048301546060808401919091526005840154608080850191909152878701939093528451808301865260068501548152600785015481880152600885015481870152600985015481830152600a850154818501528786015284518084018652600b8501546001600160a01b039081168252600c860154811682890152600d860154811682880152600e860154168183015290870152600f83015491860191909152601082015460ff161515908501526011810180548351818602810186019094528084529495919460c08701949192909184015b8282101561369d5760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b909104811615156101408801529286528451808601865260078501548085161515825291909104831615158188015285870152600890920154169183019190915290835290920191016135cd565b50505090825250601282015460209091019060ff1660048111156136c3576136c36154f2565b60048111156136d4576136d46154f2565b90525060208101515160408083015101519192506136f29190613a52565b83838154811061370457613704615ac5565b6000918252602090912060096013909202010155505050565b6005816004811115613731576137316154f2565b60ff161061374157613741615c77565b8083838154811061375457613754615ac5565b60009182526020909120601260139092020101805460ff19166001836004811115613781576137816154f2565b0217905550505050565b428360070182815481106137a1576137a1615ac5565b906000526020600020906013020160110183815481106137c3576137c3615ac5565b6000918252602090912060036009909202010155505050565b604051636eb1769f60e11b81526001600160a01b03848116600483015230602483015282919084169063dd62ed3e90604401602060405180830381865afa15801561382b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384f9190615b17565b1015612cb75760405162461bcd60e51b815260206004820152602260248201527f466163746f72794c69623a20496e73756666696369656e7420616c6c6f77616e604482015261636560f01b6064820152608401610795565b6040516323b872dd60e01b81526001600160a01b0385811660048301528281166024830152604482018490528416906323b872dd906064016020604051808303816000875af11580156138ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139239190615a67565b6110b35760405162461bcd60e51b815260206004820152601b60248201527f466163746f72794c69623a205472616e73666572206661696c656400000000006044820152606401610795565b60008160c001516001600160a01b03166352784664836080015184600001518560400151866060015187602001518860a001518960e001518a61010001518b61012001516040518a63ffffffff1660e01b81526004016139d6989796959493929190615c8d565b60206040518083038185885af11580156139f4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906119889190615b17565b818181548110613a2b57613a2b615ac5565b600091825260208220600f60139092020101805491613a4983615ce5565b91905055505050565b6000610b118284615cfe565b600061198861ffff8316610e10613a52565b6000610b118383614497565b613a84615387565b6000613a8e612c3e565b90506000836020015190506000613ac286613ab58860060188602001518960400151612b12565b60ff168760400151612b39565b805160600151909150613ad790610e10615af1565b421115613b2f5760208501516001600160a01b0316336001600160a01b031614613b2a57339150613b0d8686604001518461453e565b613b2786826040015187602001518589604001518661460c565b90505b613b95565b805160c001516001600160a01b0316336001600160a01b031614613b955760405162461bcd60e51b815260206004820152601860248201527f5475726e2074696d6520686173206e6f742070617373656400000000000000006044820152606401610795565b613c076040518060400160405280601e81526020017f496e73756666696369656e7420436f6c6c61746572616c20696e205846490000815250613bfa8760c00151604001516060015188608001518960c0015160200151604001518a60a00151611dce565b6080880151101590612c98565b8186600701866040015181548110613c2157613c21615ac5565b9060005260206000209060130201600b0160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613c6a866007018660400151614720565b613e1c86600701866040015181548110613c8657613c86615ac5565b9060005260206000209060130201601101604051806101000160405280886000015162ffffff168152602001613cf18960c0015160200151608001518a60c0015160200151606001518b600001518c60c001516040015160600151614750909392919063ffffffff16565b604001518152602001613d14896000015162ffffff16613d0e4290565b90614121565b81526020018460000151606001518152602001613dde6040518061014001604052808b60c00151604001516060015181526020018b6040015181526020018b606001518152602001600081526020018b608001518152602001886001600160a01b031681526020018b60c0015160600151604001516001600160a01b031681526020018c60000160000160009054906101000a90046001600160a01b03166001600160a01b03168152602001896020015115158152602001600180811115612337576123376154f2565b815260200188608001518152602001856001600160a01b03168152602001846000015160e0015115158152508360200151846040015160ff16614871565b613e2f866007018660400151600261371d565b613e3d868660400151611b74565b84526040850151613e5290600788019061497c565b50505092915050565b613e63615387565b613e71838360000151611b74565b80825260e0015160408051808201909152601781527f416464204c6971756964697479206e6f742072656164790000000000000000006020820152613eb99190600090613216565b6000613ec3612c3e565b9050826020015115613f63578251613edd9085903361453e565b805183516007860180549091908110613ef857613ef8615ac5565b9060005260206000209060130201601101613f1e86600601613f173390565b8751612b12565b60ff1681548110613f3157613f31615ac5565b600091825260209091206006600990920201018054911515600160a01b0260ff60a01b19909216919091179055613fec565b815160200151518351600786018054613fc69392613f9d92918110613f8a57613f8a615ac5565b90600052602060002090601302016149b5565b106040518060400160405280600a815260200169141d5888199a5b1b195960b21b815250612c98565b8251613fd490859033612cbc565b8251613fea9085903360208501518551806143ea565b505b816000015160400151604001518460070184600001518154811061401257614012615ac5565b906000526020600020906013020160060160030160008282546140359190615af1565b90915550508251614047908590611b74565b8252825160078501805461407c9290811061406457614064615ac5565b906000526020600020906013020184602001516149bf565b156140ab5781516020908101510151835161409891869161378b565b6140ab846007018460000151600161371d565b6140c6338351606081015151604091820151909101516137dc565b6140e93383516060810151805160409283015183015192909101519091906138a8565b6140fe33835160600151604001518551614a02565b61410c848460000151611b74565b82525092915050565b6000610b118284615b04565b6000610b118284615af1565b600061413d846006018385612b12565b905083600701838154811061415457614154615ac5565b90600052602060002090601302016011018160ff168154811061417957614179615ac5565b600091825260209091206007600990920201015460ff166110b35760405162461bcd60e51b81526020600482015260166024820152752330b1ba37b93ca634b11d1027b7363c9030b236b4b760511b6044820152606401610795565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6000610b118284615d2b565b600061420e8284614ac1565b90506001600160a01b03811661428d57604051637316bcd160e01b81526001600160a01b038481166004830152831690637316bcd1906024016020604051808303816000875af1158015614266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061428a9190615d3f565b90505b6001600160a01b03811661198857611988615c77565b808215612cb75760405162461bcd60e51b8152600401610795919061558e565b6142cb6152b6565b60006142d5612c3e565b905060006142e288614b2f565b905061433b6040518060400160405280601781526020017f436f6c20636f76657261676520697320746f6f206c6f770000000000000000008152506064896060015162ffffff1610151515612c9890919063ffffffff16565b61438c826040015160ff16886040015161ffff16116102d0896040015161ffff1611156040518060400160405280601081526020016f24b73b30b634b210323ab930ba34b7b760811b815250614b5f565b61439f858860c0015189608001516137dc565b6143b0886007018884898886614b88565b6143ba8882611b74565b92506143cb868860c0015183614fc9565b6143df858860c001518960800151896138a8565b505095945050505050565b6143f2615225565b86600701868154811061440757614407615ac5565b60009182526020822060116013909202010180546001018155815260078801805461443d91908990811061299657612996615ac5565b905061447188600701888154811061445757614457615ac5565b906000526020600020906013020160000180546001019055565b61196f888260405180604001604052808915158152602001881515815250898b88615059565b600061271061ffff831615806144ab575083155b156144ba576000915050611988565b6144f761ffff80168461ffff161060405180604001604052806011815260200170496e746572657374206f766572666c6f7760781b815250612c98565b61451f8161ffff168511604051806060016040528060268152602001615e3a60269139612c98565b610a1f8161ffff16612f288561ffff1687613a5290919063ffffffff16565b600061454a8484611b74565b9050600061455c856006018486612b12565b905060ff8116156145ad57612d1d6040518060400160405280600c81526020016b2737ba10309036b2b6b132b960a11b81525061459d878460ff1688612b39565b6020908101510151151590612c98565b612d826040518060400160405280601681526020017541646d696e2063616e6e6f74206c697175696461746560501b8152508360600151606001516001600160a01b0316856001600160a01b0316141515612c9890919063ffffffff16565b614614615225565b61462f87614626896006018787612b12565b60ff1685612b39565b8251606090810151825182015283516000910152600788018054919250614684918590811061466057614660615ac5565b9060005260206000209060130201601101826000015183602001518960ff16614871565b6146c487600701848154811061469c5761469c615ac5565b906000526020600020906013020160110183600001518460200151846040015160ff16614871565b6040808201516001600160a01b03808816600090815260068b016020818152858320898452815285832060ff9586169055928916825280835284822088835290925292909220908816905561165a908890614626908787612b12565b81818154811061473257614732615ac5565b600091825260208220600260139092020101805491613a4983615ce5565b61477460405180606001604052806000815260200160008152602001600081525090565b61479860405180606001604052806000815260200160008152602001600081525090565b61480562278d0062ffffff8616118015906147c057506147be62ffffff8516603c615136565b155b8562ffffff168562ffffff16111580156147e757506147e562ffffff8716603c615136565b155b604051806060016040528060258152602001615d7160259139614b5f565b61480f8686614497565b80825215611de157805161482f9062ffffff861690612f28906001613a52565b602082015262ffffff8084169085161161484a578051614863565b80516148639062ffffff80871691612f28918716613a52565b604082015295945050505050565b60405180606001604052808481526020018381526020018260ff16815250848261ffff16815481106148a5576148a5615ac5565b6000918252602091829020835180516009939093029091019182558083015160018301556040808201516002840155606082015160038401556080820151600484015560a0820151600584015560c082015160068401805460e0909401516001600160a01b039092166001600160a81b031990941693909317600160a01b9115159190910217909155838301518051600784018054929095015161ffff1990921690151561ff0019161761010091151591909102179092559101516008909101805460ff191660ff90921691909117905550505050565b614984612c3e565b6040015160ff1682828154811061499d5761499d615ac5565b60009182526020909120600960139092020101555050565b6000611988825490565b6001820154600883015460009182916149d791613a52565b905082156149eb5760098401548114610a1f565b60018401546149f9856149b5565b14949350505050565b6040516320d46be760e11b81526001600160a01b038481166004830152602482018390528316906341a8d7ce906044016020604051808303816000875af1158015614a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a759190615a67565b612cb75760405162461bcd60e51b815260206004820152601e60248201527f416464696e67205573657220746f207374726174656779206661696c656400006044820152606401610795565b60405163f8806a1360e01b81526001600160a01b0382811660048301526000919084169063f8806a1390602401602060405180830381865afa158015614b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190615d3f565b60078101805460010181556000908152614b488261197b565b9050614b5a8260030180546001019055565b919050565b828015614b695750815b81906110b35760405162461bcd60e51b8152600401610795919061558e565b6000614b978660400151613a5e565b90506000614bcb87600001518384614bc38b6020015160ff168c60800151613a5290919063ffffffff16565b929190614750565b90506040518060a00160405280886020015160ff168152602001876040015160ff168152602001886060015162ffffff1681526020018362ffffff168152602001886000015161ffff16815250888481548110614c2a57614c2a615ac5565b906000526020600020906013020160010160008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506040518060a001604052808260000151815260200182602001518152602001886080015181526020018860800151815260200184815250888481548110614cb957614cb9615ac5565b9060005260206000209060130201600601600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015590505060405180608001604052808860c001516001600160a01b0316815260200187608001516001600160a01b03168152602001866001600160a01b031681526020018860a00151600081518110614d5657614d56615ac5565b60200260200101516001600160a01b0316815250888481548110614d7c57614d7c615ac5565b6000918252602091829020835160139290920201600b810180546001600160a01b03199081166001600160a01b039485161790915592840151600c8201805485169184169190911790556040840151600d820180548516918416919091179055606090930151600e9093018054909216921691909117905587548490899085908110614e0a57614e0a615ac5565b906000526020600020906013020160100160006101000a81548160ff021916908315150217905550878381548110614e4457614e44615ac5565b906000526020600020906013020160110160405180606001604052806040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020018b60a00151600081518110614ead57614ead615ac5565b6020908102919091018101516001600160a01b039081168352600092820183905292845260408051808201825260018082528184018190528684019190915294810183905286548086018855968352918190208551805160099098029091019687558082015194870194909455838201516002870155606084015160038701556080840151600487015560a0840151600587015560c084015160068701805460e0909601511515600160a01b026001600160a81b0319909616919094161793909317909155828201518051600786018054929094015115156101000261ff00199115159190911661ffff19909216919091171790915501516008909101805460ff9290921660ff19929092169190911790555050505050505050565b6040516301df211960e51b8152600481018290526001600160a01b038381166024830152841690633be42320906044016020604051808303816000875af1158015615018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061503c9190615a67565b612cb75760405163015cfd8160e31b815260040160405180910390fd5b615061615225565b61509287600701848154811061507957615079615ac5565b9060005260206000209060130201601101878787615142565b6001600160a01b03841660009081526006880160209081526040808320868452909152902060ff87169055600787018054839190859081106150d6576150d6615ac5565b90600052602060002090601302016011018760ff16815481106150fb576150fb615ac5565b600091825260209091206006600990920201018054911515600160a01b0260ff60a01b1990921691909117905561165a8760ff881685612b39565b6000610b118284615d5c565b82848460ff168154811061515857615158615ac5565b906000526020600020906009020160080160006101000a81548160ff021916908360ff16021790555081848460ff168154811061519757615197615ac5565b60009182526020918290208351600992909202016007018054939092015161ffff1990931690151561ff001916176101009215159290920291909117905583548190859060ff86169081106151ee576151ee615ac5565b6000918252602090912060099091020160060180546001600160a01b0319166001600160a01b039290921691909117905550505050565b604051806060016040528061528360405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b81526020016152a960405180604001604052806000151581526020016000151581525090565b8152600060209091015290565b60408051610120810190915260006101008201908152819081526020016153056040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b815260200161533c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152604080516080810182526000808252602082810182905292820181905260608201529101908152600060208201819052604082018190526060808301526080909101905b905290565b604051806060016040528061539a6152b6565b815260200160008152602001600081525090565b60405180604001604052806153c16152b6565b8152602001615382615225565b6000602082840312156153e057600080fd5b5035919050565b8051805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260018060a01b0360c08201511660c084015260e0810151151560e084015250602081015161545f6101008401828051151582526020908101511515910152565b506040015160ff166101409190910152565b6101a0810161548082866153e7565b9215156101608201526101800152919050565b6001600160a01b0381168114612ec557600080fd5b8035614b5a81615493565b600080604083850312156154c657600080fd5b8235915060208301356154d881615493565b809150509250929050565b610160810161198882846153e7565b634e487b7160e01b600052602160045260246000fd5b60028110612ec557612ec56154f2565b6020810161552583615508565b91905290565b60006020828403121561553d57600080fd5b8135610b1181615493565b6000815180845260005b8181101561556e57602081850181015186830182015201615552565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610b116020830184615548565b803561ffff81168114614b5a57600080fd5b803560ff81168114614b5a57600080fd5b803562ffffff81168114614b5a57600080fd5b60008060008060008060c087890312156155f057600080fd5b6155f9876155a1565b9550615607602088016155b3565b9450615615604088016155a1565b9350615623606088016155c4565b92506080870135915060a087013561563a81615493565b809150509295509295509295565b6000806040838503121561565b57600080fd5b8235915061566b602084016155b3565b90509250929050565b60008151808452602080850194506020840160005b838110156156b05761569c8783516153e7565b610160969096019590820190600101615689565b509495945050505050565b600581106156cb576156cb6154f2565b9052565b600061026082515184526020830151615716602086018280518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b50604083810151805160c0870152602081015160e087015290810151610100860152606081015161012086015260808101516101408601525060608381015180516001600160a01b0390811661016088015260208201518116610180880152604082015181166101a0880152918101519091166101c08601525060808301516101e085015260a08301518015156102008601525060c0830151816102208601526157c282860182615674565b91505060e08301516157d86102408601826156bb565b509392505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561583757603f198886030184526158258583516156cf565b94509285019290850190600101615809565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561587357600080fd5b61587c876155a1565b9550602061588b8189016155a1565b9550615899604089016155c4565b94506060880135935060808801356158b081615493565b925060a088013567ffffffffffffffff808211156158cd57600080fd5b818a0191508a601f8301126158e157600080fd5b8135818111156158f3576158f3615844565b8060051b604051601f19603f8301168101818110858211171561591857615918615844565b60405291825284820192508381018501918d83111561593657600080fd5b938501935b8285101561595b5761594c856154a8565b8452938501939285019261593b565b8096505050505050509295509295509295565b602081526000610b1160208301846156cf565b60008060008060008060c0878903121561599a57600080fd5b6159a3876155a1565b9550602087013594506040870135935060608701356159c181615493565b925060808701356159d181615493565b915060a087013561563a81615493565b600080600080608085870312156159f757600080fd5b8435615a0281615493565b93506020850135615a1281615493565b9250615a20604086016155a1565b9396929550929360600135925050565b6020808252601a908201527f4f6e6c794f776e65723a204d616e61676572206e6f7420736574000000000000604082015260600190565b600060208284031215615a7957600080fd5b81518015158114610b1157600080fd5b602081526000825160606020840152615aa560808401826156cf565b905060208401516040840152604084015160608401528091505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561198857611988615adb565b8181038181111561198857611988615adb565b600060208284031215615b2957600080fd5b5051919050565b604081526000615b436040830185615548565b90508260208301529392505050565b60208152600082516101806020840152615b706101a08401826156cf565b905060208401516157d860408501826153e7565b600181815b80851115615bbf578160001904821115615ba557615ba5615adb565b80851615615bb257918102915b93841c9390800290615b89565b509250929050565b600082615bd657506001611988565b81615be357506000611988565b8160018114615bf95760028114615c0357615c1f565b6001915050611988565b60ff841115615c1457615c14615adb565b50506001821b611988565b5060208310610133831016604e8410600b8410161715615c42575081810a611988565b615c4c8383615b84565b8060001904821115615c6057615c60615adb565b029392505050565b6000610b1160ff841683615bc7565b634e487b7160e01b600052600160045260246000fd5b8881526020810188905260408101879052606081018690526001600160a01b038581166080830152841660a082015282151560c08201526101008101615cd283615508565b8260e08301529998505050505050505050565b600060018201615cf757615cf7615adb565b5060010190565b808202811582820484141761198857611988615adb565b634e487b7160e01b600052601260045260246000fd5b600082615d3a57615d3a615d15565b500490565b600060208284031215615d5157600080fd5b8151610b1181615493565b600082615d6b57615d6b615d15565b50069056fe5574696c733a2046756c6c447572206f72204475724f6643686f696365206f6572666c6f77466163746f7279202d207365744d696e696d756d4c697175696469747950657250726f7669646572206e6f74207065726d6974746564466163746f7279202d207769746864726177584649206e6f74207065726d6974746564466163746f7279202d20736574436f6e747261637444617461206e6f74207065726d6974746564466163746f7279202d20706572666f726d5365745570206e6f74207065726d69747465645072696e636970616c2073686f756c642062652067726561746572207468616e203130303030a26469706673582212206e0ec8091842d88728eb57213c68576559529b4812ed7556f2e5a9722d8b93df64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c80639501a2b411610102578063b88a391511610095578063dce0b4e411610064578063dce0b4e4146106dd578063dde665b3146106f3578063f09734ec14610713578063f6c8e2441461073357600080fd5b8063b88a391514610638578063be24cff814610670578063c4933c5014610690578063d21c87ad146106b057600080fd5b8063a846c2fd116100d1578063a846c2fd146105cd578063aaffadf3146105ed578063b404763f14610603578063b45ea91c1461061657600080fd5b80639501a2b4146104a1578063a4424cf4146104c1578063a68b91ab146104ee578063a7393476146105ad57600080fd5b8063490adbaf1161017a57806361737d621161014957806361737d62146103f05780637b3ce2151461041057806380d5ac8a146104495780638456cb591461048c57600080fd5b8063490adbaf146103395780634e9c1118146103745780635c975abb146103b15780636112fe2e146103d057600080fd5b80633f4ba83a116101b65780633f4ba83a146102b45780633fd97927146102c9578063415f1240146102f65780634662ecbe1461031657600080fd5b80630e22d318146101f3578063184e495f146102155780631a055c1a1461024a5780631c4df1f91461027957600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e3660046153ce565b610753565b005b34801561022157600080fd5b506102356102303660046153ce565b61083d565b60405190151581526020015b60405180910390f35b34801561025657600080fd5b5061026a6102653660046153ce565b610883565b60405161024193929190615471565b34801561028557600080fd5b506102356102943660046154b3565b600160209081526000928352604080842090915290825290205460ff1681565b3480156102c057600080fd5b506102136108b3565b3480156102d557600080fd5b506102e96102e43660046154b3565b6109ff565b60405161024191906154e3565b34801561030257600080fd5b506102356103113660046153ce565b610a27565b34801561032257600080fd5b5061032b610ad5565b604051908152602001610241565b34801561034557600080fd5b506103596103543660046153ce565b610ae6565b60408051825181526020928301519281019290925201610241565b34801561038057600080fd5b506103a461038f3660046153ce565b60116020526000908152604090205460ff1681565b6040516102419190615518565b3480156103bd57600080fd5b50600054600160a01b900460ff16610235565b3480156103dc57600080fd5b506102356103eb3660046153ce565b610b18565b3480156103fc57600080fd5b5061023561040b36600461552b565b610c31565b34801561041c57600080fd5b5061043061042b3660046153ce565b610d4f565b6040805192835262ffffff909116602083015201610241565b34801561045557600080fd5b50600d54600e54600f5460105461046c9392919084565b604080519485526020850193909352918301526060820152608001610241565b34801561049857600080fd5b50610213610dad565b3480156104ad57600080fd5b506102136104bc3660046153ce565b610ee5565b3480156104cd57600080fd5b506104e16104dc3660046153ce565b6110b9565b604051610241919061558e565b3480156104fa57600080fd5b5061056860408051608081018252600080825260208201819052918101829052606081019190915250604080516080810182526003546001600160a01b0390811682526004548082166020840152600160a01b900461ffff1692820192909252600554909116606082015290565b604051610241919081516001600160a01b03908116825260208084015182169083015260408084015161ffff1690830152606092830151169181019190915260800190565b3480156105b957600080fd5b506102356105c83660046155d7565b611145565b3480156105d957600080fd5b506102356105e83660046153ce565b6111f1565b3480156105f957600080fd5b5061032b600c5481565b610235610611366004615648565b611299565b34801561062257600080fd5b5061062b61134e565b60405161024191906157e0565b34801561064457600080fd5b50600054610658906001600160a01b031681565b6040516001600160a01b039091168152602001610241565b34801561067c57600080fd5b5061023561068b3660046153ce565b61135a565b34801561069c57600080fd5b506102356106ab36600461585a565b61139f565b3480156106bc57600080fd5b506106d06106cb3660046153ce565b6113bb565b604051610241919061596e565b3480156106e957600080fd5b5061032b600b5481565b3480156106ff57600080fd5b5061021361070e366004615981565b6113da565b34801561071f57600080fd5b5061032b61072e3660046154b3565b61153e565b34801561073f57600080fd5b5061023561074e3660046159e1565b611561565b604051806060016040528060368152602001615d96603691396000546001600160a01b03168061079e5760405162461bcd60e51b815260040161079590615a30565b60405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108169190615a67565b82906108355760405162461bcd60e51b8152600401610795919061558e565b505050600c55565b60008161084b600382611665565b610879836000808681526011602052604090205460ff166001811115610873576108736154f2565b146116b9565b5060019392505050565b61088b615225565b6000808361089a600382611665565b6108a5600386611732565b935093509350509193909250565b60408051808201909152601f81527f5061757361626c653a204f6e6c794f776e65722063616e20756e70617573650060208201526000546001600160a01b0316806109105760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190615a67565b82906109a75760405162461bcd60e51b8152600401610795919061558e565b506109b06117c3565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a15050565b610a07615225565b82610a13600382611665565b610a1f600384866117ef565b949350505050565b6000610a31611812565b81610a3d600382611665565b6000610a4d60038561183d611873565b90507ffe5a24b015fb66e7f076878ae33fe23bdbd8358b0bd0654705ad58def1157ff381604051610a7e9190615a89565b60405180910390a160408051608081018252600d8054808352600e80546020808601828152600f54878901526010546060880152968801519093039485905295909101519094019283905255905550600192915050565b6000610ae1600361197b565b905090565b604080518082019091526000808252602082015281610b06600382611665565b610b1160038461198e565b9392505050565b600081610b26600382611665565b600083815260016020908152604080832033808552925290912054849160039160ff16610ba15760405162461bcd60e51b815260206004820152602360248201527f46756e6348616e646c65723a204e6f205065726d697373696f6e2064657465636044820152621d195960ea1b6064820152608401610795565b6000610bae600388611a47565b9050610be960405180604001604052806012815260200171616e616c79746963732e74766c496e58464960701b815250600d60000154611b2f565b610c0e6040518060400160405280600381526020016210985b60ea1b81525082611b2f565b600d805491909103905560019450610c288184600061183d565b50505050919050565b60408051808201909152601881527f4f6e6c794f776e65723a204e6f74207065726d697474656400000000000000006020820152600080549091906001600160a01b031680610c925760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190615a67565b8290610d295760405162461bcd60e51b8152600401610795919061558e565b50600080546001600160a01b0319166001600160a01b0386161790555060019392505050565b60008082610d5e600382611665565b6000610d6b600386611b74565b9050610d988160400151606001516000836020015160400151610d93678963dd8c2c5e000090565b611dce565b60209091015160400151909350915050915091565b60408051808201909152601d81527f5061757361626c653a204f6e6c794f776e65722063616e20706175736500000060208201526000546001600160a01b031680610e0a5760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190615a67565b8290610ea15760405162461bcd60e51b8152600401610795919061558e565b50610eaa611812565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586109e03390565b604051806060016040528060238152602001615dcc602391396000546001600160a01b031680610f275760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190615a67565b8290610fbe5760405162461bcd60e51b8152600401610795919061558e565b50600083118015610fd0575030318311155b61101c5760405162461bcd60e51b815260206004820152601860248201527f56616c75652069732030207c7c20302062616c616c6e636500000000000000006044820152606401610795565b6003546040516000916001600160a01b03169085908381818185875af1925050503d8060008114611069576040519150601f19603f3d011682016040523d82523d6000602084013e61106e565b606091505b50509050806110b35760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0811985a5b1959607a1b6044820152606401610795565b50505050565b6060816110c7600382611665565b60008381526011602052604081205460ff1660018111156110ea576110ea6154f2565b14611119576040518060400160405280600c81526020016b141154935254d4d253d3915160a21b815250610b11565b505060408051808201909152600e81526d5045524d495353494f4e4c45535360901b6020820152919050565b6040805160018082528183019092526000918291829160208083019080368337019050509050338160008151811061117f5761117f615ac5565b60200260200101906001600160a01b031690816001600160a01b03168152505081601160006111b48c8c8c8c8c8c8a8c611dea565b81526020810191909152604001600020805460ff1916600183818111156111dd576111dd6154f2565b021790555060019998505050505050505050565b60006111fb611812565b81611207600382611665565b600061123a60405180604001604052808681526020016112243390565b6001600160a01b0316905260039061183d6120c1565b90507ffe5a24b015fb66e7f076878ae33fe23bdbd8358b0bd0654705ad58def1157ff38160405161126b9190615a89565b60405180910390a16020810151600e805460009061128a908490615af1565b90915550600195945050505050565b60006112a3611812565b826112af600382611665565b60006112c46003863460ff8816611dc2612349565b90507f317bcce7ba630da9baeff0ed14ec48f5639cf4c1ae57a98d7f3546a1016881f2816040516112f59190615a89565b60405180910390a160408051608081018252600d8054600e805460208501818152600f54868801526010546060808801919091523490940195869052965190950151909101519093039384905255555060019392505050565b6060610ae160036124ff565b6000611364611812565b81611370600382611665565b610b1183600160008681526011602052604090205460ff166001811115611399576113996154f2565b14612770565b8051600090600190816011846111b48c858d8d8d8d8d8a611dea565b6113c36152b6565b816113cf600382611665565b610b11600384611b74565b604051806060016040528060248152602001615e16602491396000546001600160a01b03168061141c5760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190615a67565b82906114b35760405162461bcd60e51b8152600401610795919061558e565b50600c879055604080516080810182526001600160a01b038088168083528188166020840181905261ffff8d169484018590529187166060909301839052600380546001600160a01b03199081169092179055600480546001600160b01b031916909217600160a01b90940293909317905560058054909216179055600b8690555050505050505050565b60008261154c600382611665565b611558600385856127f1565b51949350505050565b6000604051806060016040528060278152602001615def602791396000546001600160a01b0316806115a55760405162461bcd60e51b815260040161079590615a30565b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d9190615a67565b829061163c5760405162461bcd60e51b8152600401610795919061558e565b50600b5460000361164d57600b8490555b61165a6003878988612881565b979650505050505050565b61166e8261197b565b81106116b55760405162461bcd60e51b815260206004820152601660248201527522b837b1b41024b2103430b9903737ba103132b3b4b760511b6044820152606401610795565b5050565b60006116c3611812565b826116cf600382611665565b6116de6003858561183d61290d565b600e80546000906116f0908490615b04565b90915550506040518481527f79d50744e568d2dcbac1c613dc0f174be90b0121dbc73682de80b3c4ebc5d1e79060200160405180910390a15060019392505050565b61173a615225565b60008060006117498686611b74565b9050600061177087611767896006018560600151602001518a612b12565b60ff1688612b39565b8051604001519091504211156117a35780611789612c3e565b51825160c0015161179d908a908a906127f1565b516117b3565b846117ac612c3e565b6020015160005b9199909850909650945050505050565b600054600160a01b900460ff166117ed57604051638dfc202b60e01b815260040160405180910390fd5b565b6117f7615225565b610a1f84611809866006018686612b12565b60ff1684612b39565b600054600160a01b900460ff16156117ed5760405163d93c066560e01b815260040160405180910390fd5b60009182526001602090815260408084206001600160a01b03959095168452939052919020805460ff1916911515919091179055565b61187b615387565b6000806118888686611732565b50915091506118c76040518060400160405280600d81526020016c2737ba103232b330bab63a32b960991b815250821515612c9890919063ffffffff16565b336118d3878783612cbc565b808760070187815481106118e9576118e9615ac5565b60009182526020822060139190910201600c0180546001600160a01b0319166001600160a01b039390931692909217909155835160c001516119309060068a019089612b12565b905061194788888385886000015160c00151612d89565b61196f8860405180604001604052808a8152602001856001600160a01b0316815250886120c1565b98975050505050505050565b6000611988826003015490565b92915050565b604080518082019091526000808252602082015260006119ae8484611b74565b6060015160408051808201825281830180516001600160a01b039081163183528451915193516370a0823160e01b81529381166004850152939450909260208401929116906370a0823190602401602060405180830381865afa158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d9190615b17565b9052949350505050565b6000803390506000846007018481548110611a6457611a64615ac5565b9060005260206000209060130201601101611a83866006018487612b12565b60ff1681548110611a9657611a96615ac5565b6000918252602090912060056009909202010155611ab48484611b74565b606001516040908101519051627b8a6760e11b8152600481018590526001600160a01b0383811660248301529091169062f714ce906044016020604051808303816000875af1158015611b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190615b17565b6116b58282604051602401611b45929190615b30565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052612ebc565b611b7c6152b6565b826007018281548110611b9157611b91615ac5565b6000918252602080832060408051610120810182526013909402909101805461010085019081528452815160a080820184526001830154825260028301548286015260038301548285015260048301546060808401919091526005840154608080850191909152878701939093528451808301865260068501548152600785015481880152600885015481870152600985015481830152600a850154818501528786015284518084018652600b8501546001600160a01b039081168252600c860154811682890152600d860154811682880152600e860154168183015290870152600f83015491860191909152601082015460ff161515908501526011810180548351818602810186019094528084529495919460c08701949192909184015b82821015611d815760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b90910481161515610140880152928652845180860186526007850154808516151582529190910483161515818801528587015260089092015416918301919091529083529092019101611cb1565b50505090825250601282015460209091019060ff166004811115611da757611da76154f2565b6004811115611db857611db86154f2565b9052509392505050565b678963dd8c2c5e000090565b6000611de1846012858589841515612ec8565b95945050505050565b6000611df4611812565b60048054604051634df48c7360e11b81526001600160a01b0380881693820193909352869290911690639be918e690602401602060405180830381865afa158015611e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e679190615a67565b611e8f57604051631e26fa1d60e11b81526001600160a01b0382166004820152602401610795565b600080846001811115611ea457611ea46154f2565b14905080611ef5576001855111611ef05760405162461bcd60e51b815260206004820152601060248201526f4d696e206f662032206d656d6265727360801b6044820152606401610795565b611f48565b60018a60ff1611611f485760405162461bcd60e51b815260206004820152601960248201527f526f757465723a2051756f72756d20697320696e76616c6964000000000000006044820152606401610795565b60006040518060e001604052808d61ffff1681526020018c60ff1681526020018b61ffff1681526020018a62ffffff168152602001898152602001878152602001886001600160a01b0316815250905060008215611fb057611fab600383612f92565b611fbb565b611fbb60038361309b565b6040805160808082018352600d548252600e546020808401918252600f548486015260105460608501528451928301909452825182525193945090929091820190612007908d90615af1565b815260200185612026576040830151612021906001615af1565b61202c565b82604001515b815260200185612040578260600151612050565b6060830151612050906001615af1565b90528051600d556020810151600e55604080820151600f55606090910151601055517f9f863e268a0d18cc26555f1335b71f38bd64654c71f3abeec28fa25c8fc8f5a99061209f908490615b52565b60405180910390a1505160400151608001519c9b505050505050505050505050565b6120c9615387565b60006120d9858560000151611b74565b90506121148160e001516002604051806040016040528060118152602001705061796261636b206e6f7420726561647960781b815250613216565b600061212986866000015187602001516127f1565b604080518082019091526007815266139bc81919589d60ca1b6020820152815191925061215891151590612c98565b600061216b876007018760000151613245565b9050806121b257612183876007018760000151613499565b612196876007018760000151600161371d565b6121ad87846020015160200151886000015161378b565b6121c5565b6121c5876007018760000151600461371d565b6121e4866020015187600001516121da612c3e565b5163ffffffff8916565b602086015160608401515183516121fc9291906137dc565b602086015160608401518051845160409092015161221b9392906138a8565b612229878760000151611b74565b845260408051606080820183528651825286518301510151602080830191909152865160c001519085015181519293840192811061226957612269615ac5565b60200260200101516000015160a00151815250935061233e604051806101400160405280866000015160c001518560200151815181106122ab576122ab615ac5565b60200260200101516000015160a0015181526020018860000151815260200160008152602001846000015181526020016000815260200188602001516001600160a01b031681526020018560600151604001516001600160a01b0316815260200160006001600160a01b03168152602001831515815260200160006001811115612337576123376154f2565b905261396f565b505050509392505050565b612351615387565b600061235d8787611b74565b90506123978160e0015160016040518060400160405280601081526020016f426f72726f77206e6f7420726561647960801b815250613216565b6020810151516080820151036123c05760405163d77e83a360e01b815260040160405180910390fd5b6123cd8760070187613a19565b61242e60405180604001604052806011815260200170506f6f6c206e6f7420636f6d706c65746560781b81525061241d836020015160000151846040015160400151613a5290919063ffffffff16565b604084015160600151101590612c98565b61165a876040518060e0016040528061244688613a5e565b62ffffff1681526020018a6007018a8154811061246557612465615ac5565b90600052602060002090601302016011018560200151602001518154811061248f5761248f615ac5565b6000918252602091829020600660099092020101546001600160a01b0316825281018a905260018b0154604086810151606001519201916124db9161ffff600160a01b90910416613a70565b81526020018881526020016124f28763ffffffff16565b8152602001849052613a7c565b606081600701805480602002602001604051908101604052809291908181526020016000905b828210156127655760008481526020808220604080516101208101825260138702909201805461010084019081528352815160a080820184526001830154825260028301548287015260038301548285015260048301546060808401919091526005840154608080850191909152868801939093528451808301865260068501548152600785015481890152600885015481870152600985015481830152600a850154818501528686015284518084018652600b8501546001600160a01b039081168252600c8601548116828a0152600d860154811682880152600e860154168183015290860152600f83015491850191909152601082015460ff161515908401526011810180548351818702810187019094528084529395919460c087019491929084015b8282101561271b5760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b9091048116151561014088015292865284518086018652600785015480851615158252919091048316151581880152858701526008909201541691830191909152908352909201910161264b565b50505090825250601282015460209091019060ff166004811115612741576127416154f2565b6004811115612752576127526154f2565b8152505081526020019060010190612525565b505050509050919050565b60008061279d60405180604001604052808681526020018515158152506003613e5b90919063ffffffff16565b90507f71b5023b988b7a2b3a2e6b1bbc0a8ce798e78a73ae4cae0b437caf271fcd645d816040516127ce9190615a89565b60405180910390a1516040908101510151600e8054909101905550600192915050565b604080518082019091526000808252602082015260006128118585611b74565b60400151602001519050612829856006018486612b12565b60ff166020830181905260009061284290879087612b39565b60000151905061287561286a612863836060015161285d4290565b90614115565b8490613a52565b608083015190614121565b83525090949350505050565b60006001600160a01b038416156128b0576001850180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b038316156128d95784546001600160a01b0319166001600160a01b0384161785555b61ffff82811610156129025760018501805461ffff60a01b1916600160a01b61ffff8516021790555b506001949350505050565b60006129198585611665565b60006129258686611b74565b90503361293387878361412d565b600061293d612c3e565b905085156129d7576129b46040518060400160405280601f81526020017f466163746f72794c6962202d205075623a2043616e6e6f742063616e63656c008152506129ab8a6007018a8154811061299657612996615ac5565b90600052602060002090601302016000015490565b60011490612c98565b604080840151810151600090815260058a0160205220805460ff19169055612a24565b60408051808201825260208082527f466163746f72794c6962202d20507269763a2043616e6e6f742063616e63656c908201528482015191820151606090920151612a2492101590612c98565b6000886007018881548110612a3b57612a3b615ac5565b906000526020600020906013020160010160000181905550612a63828860018863ffffffff16565b612a728860070188600461371d565b612afe6040518061014001604052808560400151604001518152602001898152602001600081526020016000815260200160008152602001846001600160a01b031681526020018560600151604001516001600160a01b0316815260200160006001600160a01b03168152602001836020015115158152602001600180811115612337576123376154f2565b505050604090810151015195945050505050565b6001600160a01b039091166000908152602092835260408082209282529190925290205490565b612b41615225565b836007018281548110612b5657612b56615ac5565b90600052602060002090601302016011018381548110612b7857612b78615ac5565b60009182526020918290206040805161016081018252600990930290910180546060840190815260018201546080850152600282015460a0850152600382015460c0850152600482015460e085015260058201546101008086019190915260068301546001600160a01b03811661012087015260ff600160a01b9091048116151561014087015291855283518085018552600784015480841615158252919091048216151581870152948401949094526008015490921691810191909152949350505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506040805160a08101825260018082526000602083018190529282018390526060820152608081019190915290565b8082612cb75760405162461bcd60e51b8152600401610795919061558e565b505050565b6000612cc88484611b74565b90506000612cda856006018486612b12565b905060ff811615612d225760405162461bcd60e51b815260206004820152600d60248201526c139bdd081c195c9b5a5d1d1959609a1b6044820152606401610795565b612d82565b612d826040518060400160405280601681526020017541646d696e2063616e6e6f74206c697175696461746560501b8152508360600151606001516001600160a01b0316856001600160a01b031614151515612c9890919063ffffffff16565b5050505050565b81856007018581548110612d9f57612d9f615ac5565b90600052602060002090601302016011018460ff1681548110612dc457612dc4615ac5565b600091825260208083206006600990930201820180546001600160a01b039586166001600160a01b031990911617905585841683529088018082526040808420898552835280842060ff8916905593851683528152828220878352905290812055612e2f8585611b74565b606001516040908101519051636d6ccde160e01b8152600481018690526001600160a01b038481166024830152838116604483015290911690636d6ccde1906064016020604051808303816000875af1158015612e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb49190615a67565b505050505050565b612ec5816141d5565b50565b6000606462ffffff8616811115612ef95760405163a371850b60e01b815262ffffff87166004820152602401610795565b6000612f0b62ffffff88166064613a52565b90506000612f2e87612f28612f218c600a615c68565b8990613a52565b906141f6565b9050612f48612710612f288365ffffffffffff8616613a52565b93508415612f8557612f85848b10156040518060400160405280601081526020016f496e73756666696369656e742058464960801b815250612c98565b5050509695505050505050565b612f9a6153ae565b6000612fa4612c3e565b905060008360a00151600081518110612fbf57612fbf615ac5565b60209081029190910101516002860154909150600090612fe99083906001600160a01b0316614202565b604080518082018252600c81526b105b5bdd5b9d08195e1a5cdd60a21b6020808301919091526080890151600090815260058b0190915291909120549192506130379160ff161515906142a3565b8251608086015160009081526005880160205260409020805460ff191691151591909117905582516130709087908790849086906142c3565b8085526040015160800151835161308c918891859080806143ea565b60208501525091949350505050565b6130a36153ae565b60006130ad612c3e565b905060008360a001516000815181106130c8576130c8615ac5565b602090810291909101015160028601549091506000906130f29083906001600160a01b0316614202565b604084015190915060ff165b8560a001515181101561320c57836040015160ff1681036131505761312a8787848688602001516142c3565b80865260400151608001518451613146918991869080806143ea565b6020860152613204565b60008660a00151828151811061316857613168615ac5565b602002602001015190506131c76040518060400160405280601381526020017241646d696e2073706f7474656420747769636560681b815250856001600160a01b0316836001600160a01b031614151515612c9890919063ffffffff16565b85516040015160800151602086015186516131e9928b929091859190816143ea565b506132008887600001516040015160800151611b74565b8652505b6001016130fe565b5050505092915050565b612cb78183600481111561322c5761322c6154f2565b85600481111561323e5761323e6154f2565b1490612c98565b60008083838154811061325a5761325a615ac5565b6000918252602080832060408051610120810182526013909402909101805461010085019081528452815160a080820184526001830154825260028301548286015260038301548285015260048301546060808401919091526005840154608080850191909152878701939093528451808301865260068501548152600785015481880152600885015481870152600985015481830152600a850154818501528786015284518084018652600b8501546001600160a01b039081168252600c860154811682890152600d860154811682880152600e860154168183015290870152600f83015491860191909152601082015460ff161515908501526011810180548351818602810186019094528084529495919460c08701949192909184015b8282101561344a5760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b9091048116151561014088015292865284518086018652600785015480851615158252919091048316151581880152858701526008909201541691830191909152908352909201910161337a565b50505090825250601282015460209091019060ff166004811115613470576134706154f2565b6004811115613481576134816154f2565b90525060208101515160809091015114949350505050565b60008282815481106134ad576134ad615ac5565b6000918252602080832060408051610120810182526013909402909101805461010085019081528452815160a080820184526001830154825260028301548286015260038301548285015260048301546060808401919091526005840154608080850191909152878701939093528451808301865260068501548152600785015481880152600885015481870152600985015481830152600a850154818501528786015284518084018652600b8501546001600160a01b039081168252600c860154811682890152600d860154811682880152600e860154168183015290870152600f83015491860191909152601082015460ff161515908501526011810180548351818602810186019094528084529495919460c08701949192909184015b8282101561369d5760008481526020908190206040805161016081018252600986029092018054606084019081526001808301546080860152600283015460a0860152600383015460c0860152600483015460e086015260058301546101008087019190915260068401546001600160a01b03811661012088015260ff600160a01b909104811615156101408801529286528451808601865260078501548085161515825291909104831615158188015285870152600890920154169183019190915290835290920191016135cd565b50505090825250601282015460209091019060ff1660048111156136c3576136c36154f2565b60048111156136d4576136d46154f2565b90525060208101515160408083015101519192506136f29190613a52565b83838154811061370457613704615ac5565b6000918252602090912060096013909202010155505050565b6005816004811115613731576137316154f2565b60ff161061374157613741615c77565b8083838154811061375457613754615ac5565b60009182526020909120601260139092020101805460ff19166001836004811115613781576137816154f2565b0217905550505050565b428360070182815481106137a1576137a1615ac5565b906000526020600020906013020160110183815481106137c3576137c3615ac5565b6000918252602090912060036009909202010155505050565b604051636eb1769f60e11b81526001600160a01b03848116600483015230602483015282919084169063dd62ed3e90604401602060405180830381865afa15801561382b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384f9190615b17565b1015612cb75760405162461bcd60e51b815260206004820152602260248201527f466163746f72794c69623a20496e73756666696369656e7420616c6c6f77616e604482015261636560f01b6064820152608401610795565b6040516323b872dd60e01b81526001600160a01b0385811660048301528281166024830152604482018490528416906323b872dd906064016020604051808303816000875af11580156138ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139239190615a67565b6110b35760405162461bcd60e51b815260206004820152601b60248201527f466163746f72794c69623a205472616e73666572206661696c656400000000006044820152606401610795565b60008160c001516001600160a01b03166352784664836080015184600001518560400151866060015187602001518860a001518960e001518a61010001518b61012001516040518a63ffffffff1660e01b81526004016139d6989796959493929190615c8d565b60206040518083038185885af11580156139f4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906119889190615b17565b818181548110613a2b57613a2b615ac5565b600091825260208220600f60139092020101805491613a4983615ce5565b91905055505050565b6000610b118284615cfe565b600061198861ffff8316610e10613a52565b6000610b118383614497565b613a84615387565b6000613a8e612c3e565b90506000836020015190506000613ac286613ab58860060188602001518960400151612b12565b60ff168760400151612b39565b805160600151909150613ad790610e10615af1565b421115613b2f5760208501516001600160a01b0316336001600160a01b031614613b2a57339150613b0d8686604001518461453e565b613b2786826040015187602001518589604001518661460c565b90505b613b95565b805160c001516001600160a01b0316336001600160a01b031614613b955760405162461bcd60e51b815260206004820152601860248201527f5475726e2074696d6520686173206e6f742070617373656400000000000000006044820152606401610795565b613c076040518060400160405280601e81526020017f496e73756666696369656e7420436f6c6c61746572616c20696e205846490000815250613bfa8760c00151604001516060015188608001518960c0015160200151604001518a60a00151611dce565b6080880151101590612c98565b8186600701866040015181548110613c2157613c21615ac5565b9060005260206000209060130201600b0160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613c6a866007018660400151614720565b613e1c86600701866040015181548110613c8657613c86615ac5565b9060005260206000209060130201601101604051806101000160405280886000015162ffffff168152602001613cf18960c0015160200151608001518a60c0015160200151606001518b600001518c60c001516040015160600151614750909392919063ffffffff16565b604001518152602001613d14896000015162ffffff16613d0e4290565b90614121565b81526020018460000151606001518152602001613dde6040518061014001604052808b60c00151604001516060015181526020018b6040015181526020018b606001518152602001600081526020018b608001518152602001886001600160a01b031681526020018b60c0015160600151604001516001600160a01b031681526020018c60000160000160009054906101000a90046001600160a01b03166001600160a01b03168152602001896020015115158152602001600180811115612337576123376154f2565b815260200188608001518152602001856001600160a01b03168152602001846000015160e0015115158152508360200151846040015160ff16614871565b613e2f866007018660400151600261371d565b613e3d868660400151611b74565b84526040850151613e5290600788019061497c565b50505092915050565b613e63615387565b613e71838360000151611b74565b80825260e0015160408051808201909152601781527f416464204c6971756964697479206e6f742072656164790000000000000000006020820152613eb99190600090613216565b6000613ec3612c3e565b9050826020015115613f63578251613edd9085903361453e565b805183516007860180549091908110613ef857613ef8615ac5565b9060005260206000209060130201601101613f1e86600601613f173390565b8751612b12565b60ff1681548110613f3157613f31615ac5565b600091825260209091206006600990920201018054911515600160a01b0260ff60a01b19909216919091179055613fec565b815160200151518351600786018054613fc69392613f9d92918110613f8a57613f8a615ac5565b90600052602060002090601302016149b5565b106040518060400160405280600a815260200169141d5888199a5b1b195960b21b815250612c98565b8251613fd490859033612cbc565b8251613fea9085903360208501518551806143ea565b505b816000015160400151604001518460070184600001518154811061401257614012615ac5565b906000526020600020906013020160060160030160008282546140359190615af1565b90915550508251614047908590611b74565b8252825160078501805461407c9290811061406457614064615ac5565b906000526020600020906013020184602001516149bf565b156140ab5781516020908101510151835161409891869161378b565b6140ab846007018460000151600161371d565b6140c6338351606081015151604091820151909101516137dc565b6140e93383516060810151805160409283015183015192909101519091906138a8565b6140fe33835160600151604001518551614a02565b61410c848460000151611b74565b82525092915050565b6000610b118284615b04565b6000610b118284615af1565b600061413d846006018385612b12565b905083600701838154811061415457614154615ac5565b90600052602060002090601302016011018160ff168154811061417957614179615ac5565b600091825260209091206007600990920201015460ff166110b35760405162461bcd60e51b81526020600482015260166024820152752330b1ba37b93ca634b11d1027b7363c9030b236b4b760511b6044820152606401610795565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6000610b118284615d2b565b600061420e8284614ac1565b90506001600160a01b03811661428d57604051637316bcd160e01b81526001600160a01b038481166004830152831690637316bcd1906024016020604051808303816000875af1158015614266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061428a9190615d3f565b90505b6001600160a01b03811661198857611988615c77565b808215612cb75760405162461bcd60e51b8152600401610795919061558e565b6142cb6152b6565b60006142d5612c3e565b905060006142e288614b2f565b905061433b6040518060400160405280601781526020017f436f6c20636f76657261676520697320746f6f206c6f770000000000000000008152506064896060015162ffffff1610151515612c9890919063ffffffff16565b61438c826040015160ff16886040015161ffff16116102d0896040015161ffff1611156040518060400160405280601081526020016f24b73b30b634b210323ab930ba34b7b760811b815250614b5f565b61439f858860c0015189608001516137dc565b6143b0886007018884898886614b88565b6143ba8882611b74565b92506143cb868860c0015183614fc9565b6143df858860c001518960800151896138a8565b505095945050505050565b6143f2615225565b86600701868154811061440757614407615ac5565b60009182526020822060116013909202010180546001018155815260078801805461443d91908990811061299657612996615ac5565b905061447188600701888154811061445757614457615ac5565b906000526020600020906013020160000180546001019055565b61196f888260405180604001604052808915158152602001881515815250898b88615059565b600061271061ffff831615806144ab575083155b156144ba576000915050611988565b6144f761ffff80168461ffff161060405180604001604052806011815260200170496e746572657374206f766572666c6f7760781b815250612c98565b61451f8161ffff168511604051806060016040528060268152602001615e3a60269139612c98565b610a1f8161ffff16612f288561ffff1687613a5290919063ffffffff16565b600061454a8484611b74565b9050600061455c856006018486612b12565b905060ff8116156145ad57612d1d6040518060400160405280600c81526020016b2737ba10309036b2b6b132b960a11b81525061459d878460ff1688612b39565b6020908101510151151590612c98565b612d826040518060400160405280601681526020017541646d696e2063616e6e6f74206c697175696461746560501b8152508360600151606001516001600160a01b0316856001600160a01b0316141515612c9890919063ffffffff16565b614614615225565b61462f87614626896006018787612b12565b60ff1685612b39565b8251606090810151825182015283516000910152600788018054919250614684918590811061466057614660615ac5565b9060005260206000209060130201601101826000015183602001518960ff16614871565b6146c487600701848154811061469c5761469c615ac5565b906000526020600020906013020160110183600001518460200151846040015160ff16614871565b6040808201516001600160a01b03808816600090815260068b016020818152858320898452815285832060ff9586169055928916825280835284822088835290925292909220908816905561165a908890614626908787612b12565b81818154811061473257614732615ac5565b600091825260208220600260139092020101805491613a4983615ce5565b61477460405180606001604052806000815260200160008152602001600081525090565b61479860405180606001604052806000815260200160008152602001600081525090565b61480562278d0062ffffff8616118015906147c057506147be62ffffff8516603c615136565b155b8562ffffff168562ffffff16111580156147e757506147e562ffffff8716603c615136565b155b604051806060016040528060258152602001615d7160259139614b5f565b61480f8686614497565b80825215611de157805161482f9062ffffff861690612f28906001613a52565b602082015262ffffff8084169085161161484a578051614863565b80516148639062ffffff80871691612f28918716613a52565b604082015295945050505050565b60405180606001604052808481526020018381526020018260ff16815250848261ffff16815481106148a5576148a5615ac5565b6000918252602091829020835180516009939093029091019182558083015160018301556040808201516002840155606082015160038401556080820151600484015560a0820151600584015560c082015160068401805460e0909401516001600160a01b039092166001600160a81b031990941693909317600160a01b9115159190910217909155838301518051600784018054929095015161ffff1990921690151561ff0019161761010091151591909102179092559101516008909101805460ff191660ff90921691909117905550505050565b614984612c3e565b6040015160ff1682828154811061499d5761499d615ac5565b60009182526020909120600960139092020101555050565b6000611988825490565b6001820154600883015460009182916149d791613a52565b905082156149eb5760098401548114610a1f565b60018401546149f9856149b5565b14949350505050565b6040516320d46be760e11b81526001600160a01b038481166004830152602482018390528316906341a8d7ce906044016020604051808303816000875af1158015614a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a759190615a67565b612cb75760405162461bcd60e51b815260206004820152601e60248201527f416464696e67205573657220746f207374726174656779206661696c656400006044820152606401610795565b60405163f8806a1360e01b81526001600160a01b0382811660048301526000919084169063f8806a1390602401602060405180830381865afa158015614b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190615d3f565b60078101805460010181556000908152614b488261197b565b9050614b5a8260030180546001019055565b919050565b828015614b695750815b81906110b35760405162461bcd60e51b8152600401610795919061558e565b6000614b978660400151613a5e565b90506000614bcb87600001518384614bc38b6020015160ff168c60800151613a5290919063ffffffff16565b929190614750565b90506040518060a00160405280886020015160ff168152602001876040015160ff168152602001886060015162ffffff1681526020018362ffffff168152602001886000015161ffff16815250888481548110614c2a57614c2a615ac5565b906000526020600020906013020160010160008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506040518060a001604052808260000151815260200182602001518152602001886080015181526020018860800151815260200184815250888481548110614cb957614cb9615ac5565b9060005260206000209060130201600601600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015590505060405180608001604052808860c001516001600160a01b0316815260200187608001516001600160a01b03168152602001866001600160a01b031681526020018860a00151600081518110614d5657614d56615ac5565b60200260200101516001600160a01b0316815250888481548110614d7c57614d7c615ac5565b6000918252602091829020835160139290920201600b810180546001600160a01b03199081166001600160a01b039485161790915592840151600c8201805485169184169190911790556040840151600d820180548516918416919091179055606090930151600e9093018054909216921691909117905587548490899085908110614e0a57614e0a615ac5565b906000526020600020906013020160100160006101000a81548160ff021916908315150217905550878381548110614e4457614e44615ac5565b906000526020600020906013020160110160405180606001604052806040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020018b60a00151600081518110614ead57614ead615ac5565b6020908102919091018101516001600160a01b039081168352600092820183905292845260408051808201825260018082528184018190528684019190915294810183905286548086018855968352918190208551805160099098029091019687558082015194870194909455838201516002870155606084015160038701556080840151600487015560a0840151600587015560c084015160068701805460e0909601511515600160a01b026001600160a81b0319909616919094161793909317909155828201518051600786018054929094015115156101000261ff00199115159190911661ffff19909216919091171790915501516008909101805460ff9290921660ff19929092169190911790555050505050505050565b6040516301df211960e51b8152600481018290526001600160a01b038381166024830152841690633be42320906044016020604051808303816000875af1158015615018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061503c9190615a67565b612cb75760405163015cfd8160e31b815260040160405180910390fd5b615061615225565b61509287600701848154811061507957615079615ac5565b9060005260206000209060130201601101878787615142565b6001600160a01b03841660009081526006880160209081526040808320868452909152902060ff87169055600787018054839190859081106150d6576150d6615ac5565b90600052602060002090601302016011018760ff16815481106150fb576150fb615ac5565b600091825260209091206006600990920201018054911515600160a01b0260ff60a01b1990921691909117905561165a8760ff881685612b39565b6000610b118284615d5c565b82848460ff168154811061515857615158615ac5565b906000526020600020906009020160080160006101000a81548160ff021916908360ff16021790555081848460ff168154811061519757615197615ac5565b60009182526020918290208351600992909202016007018054939092015161ffff1990931690151561ff001916176101009215159290920291909117905583548190859060ff86169081106151ee576151ee615ac5565b6000918252602090912060099091020160060180546001600160a01b0319166001600160a01b039290921691909117905550505050565b604051806060016040528061528360405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b81526020016152a960405180604001604052806000151581526020016000151581525090565b8152600060209091015290565b60408051610120810190915260006101008201908152819081526020016153056040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b815260200161533c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152604080516080810182526000808252602082810182905292820181905260608201529101908152600060208201819052604082018190526060808301526080909101905b905290565b604051806060016040528061539a6152b6565b815260200160008152602001600081525090565b60405180604001604052806153c16152b6565b8152602001615382615225565b6000602082840312156153e057600080fd5b5035919050565b8051805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260018060a01b0360c08201511660c084015260e0810151151560e084015250602081015161545f6101008401828051151582526020908101511515910152565b506040015160ff166101409190910152565b6101a0810161548082866153e7565b9215156101608201526101800152919050565b6001600160a01b0381168114612ec557600080fd5b8035614b5a81615493565b600080604083850312156154c657600080fd5b8235915060208301356154d881615493565b809150509250929050565b610160810161198882846153e7565b634e487b7160e01b600052602160045260246000fd5b60028110612ec557612ec56154f2565b6020810161552583615508565b91905290565b60006020828403121561553d57600080fd5b8135610b1181615493565b6000815180845260005b8181101561556e57602081850181015186830182015201615552565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610b116020830184615548565b803561ffff81168114614b5a57600080fd5b803560ff81168114614b5a57600080fd5b803562ffffff81168114614b5a57600080fd5b60008060008060008060c087890312156155f057600080fd5b6155f9876155a1565b9550615607602088016155b3565b9450615615604088016155a1565b9350615623606088016155c4565b92506080870135915060a087013561563a81615493565b809150509295509295509295565b6000806040838503121561565b57600080fd5b8235915061566b602084016155b3565b90509250929050565b60008151808452602080850194506020840160005b838110156156b05761569c8783516153e7565b610160969096019590820190600101615689565b509495945050505050565b600581106156cb576156cb6154f2565b9052565b600061026082515184526020830151615716602086018280518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b50604083810151805160c0870152602081015160e087015290810151610100860152606081015161012086015260808101516101408601525060608381015180516001600160a01b0390811661016088015260208201518116610180880152604082015181166101a0880152918101519091166101c08601525060808301516101e085015260a08301518015156102008601525060c0830151816102208601526157c282860182615674565b91505060e08301516157d86102408601826156bb565b509392505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561583757603f198886030184526158258583516156cf565b94509285019290850190600101615809565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561587357600080fd5b61587c876155a1565b9550602061588b8189016155a1565b9550615899604089016155c4565b94506060880135935060808801356158b081615493565b925060a088013567ffffffffffffffff808211156158cd57600080fd5b818a0191508a601f8301126158e157600080fd5b8135818111156158f3576158f3615844565b8060051b604051601f19603f8301168101818110858211171561591857615918615844565b60405291825284820192508381018501918d83111561593657600080fd5b938501935b8285101561595b5761594c856154a8565b8452938501939285019261593b565b8096505050505050509295509295509295565b602081526000610b1160208301846156cf565b60008060008060008060c0878903121561599a57600080fd5b6159a3876155a1565b9550602087013594506040870135935060608701356159c181615493565b925060808701356159d181615493565b915060a087013561563a81615493565b600080600080608085870312156159f757600080fd5b8435615a0281615493565b93506020850135615a1281615493565b9250615a20604086016155a1565b9396929550929360600135925050565b6020808252601a908201527f4f6e6c794f776e65723a204d616e61676572206e6f7420736574000000000000604082015260600190565b600060208284031215615a7957600080fd5b81518015158114610b1157600080fd5b602081526000825160606020840152615aa560808401826156cf565b905060208401516040840152604084015160608401528091505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561198857611988615adb565b8181038181111561198857611988615adb565b600060208284031215615b2957600080fd5b5051919050565b604081526000615b436040830185615548565b90508260208301529392505050565b60208152600082516101806020840152615b706101a08401826156cf565b905060208401516157d860408501826153e7565b600181815b80851115615bbf578160001904821115615ba557615ba5615adb565b80851615615bb257918102915b93841c9390800290615b89565b509250929050565b600082615bd657506001611988565b81615be357506000611988565b8160018114615bf95760028114615c0357615c1f565b6001915050611988565b60ff841115615c1457615c14615adb565b50506001821b611988565b5060208310610133831016604e8410600b8410161715615c42575081810a611988565b615c4c8383615b84565b8060001904821115615c6057615c60615adb565b029392505050565b6000610b1160ff841683615bc7565b634e487b7160e01b600052600160045260246000fd5b8881526020810188905260408101879052606081018690526001600160a01b038581166080830152841660a082015282151560c08201526101008101615cd283615508565b8260e08301529998505050505050505050565b600060018201615cf757615cf7615adb565b5060010190565b808202811582820484141761198857611988615adb565b634e487b7160e01b600052601260045260246000fd5b600082615d3a57615d3a615d15565b500490565b600060208284031215615d5157600080fd5b8151610b1181615493565b600082615d6b57615d6b615d15565b50069056fe5574696c733a2046756c6c447572206f72204475724f6643686f696365206f6572666c6f77466163746f7279202d207365744d696e696d756d4c697175696469747950657250726f7669646572206e6f74207065726d6974746564466163746f7279202d207769746864726177584649206e6f74207065726d6974746564466163746f7279202d20736574436f6e747261637444617461206e6f74207065726d6974746564466163746f7279202d20706572666f726d5365745570206e6f74207065726d69747465645072696e636970616c2073686f756c642062652067726561746572207468616e203130303030a26469706673582212206e0ec8091842d88728eb57213c68576559529b4812ed7556f2e5a9722d8b93df64736f6c63430008180033",
  "libraries": {
    "FactoryLib": "0x8c482a5E78cbcF930eBFc1Eeca0c446b7c85Bdef"
  },
  "devdoc": {
    "author": "Simplifinance - (Bobeu) ",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes state variables.",
        "params": {
          "assetClass": ": Asset manager contract.",
          "feeTo": ": Account to receive fees.",
          "minContribution": ": Minimum contribution amount.",
          "ownerShipManager": ": Accessibility manager contract",
          "serviceRate": ": Platform fee in %",
          "setUpFee": ": Amount to charge for setting a liquidity pool.",
          "strategyManager": ": Strategy manager contract."
        }
      },
      "createPermissionedPool(uint16,uint16,uint24,uint256,address,address[])": {
        "details": "Create permissioned pool See AbstractFactory.sol "
      },
      "createPermissionlessPool(uint16,uint8,uint16,uint24,uint256,address)": {
        "details": "Create permissionless See AbstractFactory.sol"
      },
      "enquireLiquidation(uint256)": {
        "details": "See FactoryLib.enquireLiquidation"
      },
      "epoches()": {
        "details": "Return current epoch.  This is also total epoches generated to date "
      },
      "getBalances(uint256)": {
        "details": "Returns both ERC20 and Native balances locked in an epoch",
        "params": {
          "epochId": ": Epoch Id"
        }
      },
      "getCollaterlQuote(uint256)": {
        "details": "Returns collaterl quote for the epoch.",
        "params": {
          "epochId": ": EpochId"
        },
        "returns": {
          "colCoverage": "Collateral coverage",
          "collateral": "Collateral"
        }
      },
      "getCurrentDebt(uint256,address)": {
        "params": {
          "epochId": ": Epoch Id",
          "target": ": Target user."
        }
      },
      "getFinance(uint256,uint8)": {
        "details": "Providers borrow from their pool provided the citeria are met.",
        "params": {
          "daysOfUseInHr": ": The time in hours the borrower wishes to retain the loan before paying back.",
          "epochId": ": Epoh Id user wants to borrow from. "
        }
      },
      "getPoolData(uint256)": {
        "details": "Returns a single pool for 'epochId'",
        "params": {
          "epochId": ": Epoch id."
        }
      },
      "getPoolFromAllEpoches()": {
        "details": "Returns pool from all epoched array "
      },
      "getProfile(uint256,address)": {
        "details": "Returns the profile of user",
        "params": {
          "epochId": ": Epoch Id",
          "user": ": User"
        }
      },
      "getRouter(uint256)": {
        "details": "Return the router for an epochId. "
      },
      "joinAPool(uint256)": {
        "details": "See AbstractFactory.sol "
      },
      "liquidate(uint256)": {
        "details": "Liquidate defaulter. Note: The expected repayment time for last paid contributor must have passed. See FactoryLib.liquidate() for more details.",
        "params": {
          "epochId": ": Epoch Id"
        }
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payback(uint256)": {
        "details": "Return borrowed fund.",
        "params": {
          "epochId": ": Pool number. See FactoryLib.payback()."
        }
      },
      "performSetUp(uint16,uint256,uint256,address,address,address)": {
        "details": "See _setUp() for doc."
      },
      "removeLiquidityPool(uint256)": {
        "details": "Remove liquidity pool",
        "params": {
          "epochId": ": Epoch/Poool id"
        }
      },
      "setContractData(address,address,uint16,uint256)": {
        "details": "Set state variables.",
        "params": {
          "assetAdmin": ": AssetAdmin contract.",
          "feeTo": ": Fee receiver.",
          "serviceRate": ": fee in %. - Only-owner function."
        }
      },
      "setMinimumLiquidityPerProvider(uint256)": {
        "details": "Updates minimum liquidity of a pool.   Note: Only Owner function.",
        "params": {
          "minLiquidity": ": Minimum contribution."
        }
      },
      "setOwnershipManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused."
      },
      "withdrawCollateral(uint256)": {
        "details": "Withdraws Collateral balance if any",
        "params": {
          "epochId": ": Epoch Id"
        }
      },
      "withdrawXFI(uint256)": {
        "details": "Withdraws XFI balances of this contract if any. OnlyOwner function",
        "params": {
          "value": ": Amount to withdraw"
        }
      }
    },
    "title": "Factory : Main contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCurrentDebt(uint256,address)": {
        "notice": "Returns the current debt of target user."
      },
      "getFinance(uint256,uint8)": {
        "notice": "Users can be members of multiple epoches. This enlarges the volume of funds they can access.  - This is a payable function since borrowers are required to stake XFI before they can access funds in epoches. - The contract must be in a usable state i.e not paused. - For the selected epoch, the getFinance() must already be unlocked. Unlocking  is automated soon as the required quorum for the epoch is achieved i.e the  numbers of providers equals the set quorum."
      },
      "permits(uint256,address)": {
        "notice": "Mapping of epochId to permit Permit is used to give instructions to the child contract who can withdraw from an epoch. Only one provider can withdraw at a time in an apoch."
      },
      "setOwnershipManager(address)": {
        "notice": "Set Ownership manager"
      }
    },
    "notice": "  A multi p2p lending and borrowing structure where liquidity providers are borrowers. We bring together users form different  parts of the world to form a liquidity synergy, where the pooled fund moved round them from the first to the last on the list in form of borrowed fund.The permissionless model allows users to create liquidity pool for anyone to participate while the  permissioned structure restricts participation only to the known members known as band.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1678,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "ownershipManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1758,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7605,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "permits",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 367,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 839,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "data",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)3920_storage"
      },
      {
        "astId": 841,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "creationFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 843,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "minContribution",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 846,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "analytics",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Analytics)2493_storage"
      },
      {
        "astId": 2825,
        "contract": "contracts/implementations/Factory.sol:Factory",
        "label": "routers",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_enum(Router)2344)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ContributorData)2047_storage)dyn_storage": {
        "base": "t_struct(ContributorData)2047_storage",
        "encoding": "dynamic_array",
        "label": "struct Common.ContributorData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Pool)1939_storage)dyn_storage": {
        "base": "t_struct(Pool)1939_storage",
        "encoding": "dynamic_array",
        "label": "struct Common.Pool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(FuncTag)1888": {
        "encoding": "inplace",
        "label": "enum Common.FuncTag",
        "numberOfBytes": "1"
      },
      "t_enum(Router)2344": {
        "encoding": "inplace",
        "label": "enum IFactory.Router",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(Router)2344)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum IFactory.Router)",
        "numberOfBytes": "32",
        "value": "t_enum(Router)2344"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Pool)1939_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Common.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1939_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Addresses)1990_storage": {
        "encoding": "inplace",
        "label": "struct Common.Addresses",
        "members": [
          {
            "astId": 1983,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1985,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "lastPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1987,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "strategy",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1989,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "admin",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Analytics)2493_storage": {
        "encoding": "inplace",
        "label": "struct IFactory.Analytics",
        "members": [
          {
            "astId": 2486,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "tvlInXFI",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2488,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "tvlInUsd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2490,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "totalPermissioned",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2492,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "totalPermissionless",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ContractData)2484_storage": {
        "encoding": "inplace",
        "label": "struct IFactory.ContractData",
        "members": [
          {
            "astId": 2477,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "feeTo",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2479,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "assetAdmin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2481,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "makerRate",
            "offset": 20,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 2483,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "strategyManager",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Contributor)1909_storage": {
        "encoding": "inplace",
        "label": "struct Common.Contributor",
        "members": [
          {
            "astId": 1894,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "durOfChoice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1896,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "expInterest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1898,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "payDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1900,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "turnTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1902,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "loan",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1904,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "colBals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1906,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "id",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1908,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "sentQuota",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ContributorData)2047_storage": {
        "encoding": "inplace",
        "label": "struct Common.ContributorData",
        "members": [
          {
            "astId": 2041,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "cData",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Contributor)1909_storage"
          },
          {
            "astId": 2044,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "rank",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Rank)1914_storage"
          },
          {
            "astId": 2046,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "slot",
            "offset": 0,
            "slot": "8",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Counter)431_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 430,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)3920_storage": {
        "encoding": "inplace",
        "label": "struct Data",
        "members": [
          {
            "astId": 3894,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "pData",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ContractData)2484_storage"
          },
          {
            "astId": 3897,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "epoches",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Counter)431_storage"
          },
          {
            "astId": 3903,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "pools",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Pool)1939_storage)"
          },
          {
            "astId": 3908,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "amountExist",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 3915,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "slots",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 3919,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "poolArr",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Pool)1939_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Pool)1939_storage": {
        "encoding": "inplace",
        "label": "struct Common.Pool",
        "members": [
          {
            "astId": 1918,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "userCount",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Counter)431_storage"
          },
          {
            "astId": 1921,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "uints",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Uints)1980_storage"
          },
          {
            "astId": 1924,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "uint256s",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Uint256s)1968_storage"
          },
          {
            "astId": 1927,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "addrs",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(Addresses)1990_storage"
          },
          {
            "astId": 1929,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "allGh",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 1931,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "isPermissionless",
            "offset": 0,
            "slot": "16",
            "type": "t_bool"
          },
          {
            "astId": 1935,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "cData",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(ContributorData)2047_storage)dyn_storage"
          },
          {
            "astId": 1938,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "stage",
            "offset": 0,
            "slot": "18",
            "type": "t_enum(FuncTag)1888"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_struct(Rank)1914_storage": {
        "encoding": "inplace",
        "label": "struct Common.Rank",
        "members": [
          {
            "astId": 1911,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1913,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "member",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Uint256s)1968_storage": {
        "encoding": "inplace",
        "label": "struct Common.Uint256s",
        "members": [
          {
            "astId": 1959,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "fullInterest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1961,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "intPerSec",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1963,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "unit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1965,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "currentPool",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1967,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "epochId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Uints)1980_storage": {
        "encoding": "inplace",
        "label": "struct Common.Uints",
        "members": [
          {
            "astId": 1971,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "quorum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1973,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "selector",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1975,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "colCoverage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1977,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1979,
            "contract": "contracts/implementations/Factory.sol:Factory",
            "label": "intRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}