{
  "address": "0xd91FdF9d46ddbcdBD7EBE4485bdC9D2d5DE9a333",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "getRoleBearer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "removeRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "roleBearers",
          "type": "address[]"
        }
      ],
      "name": "setRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x975d8427246d34b10220ccb6046b2311c9f495e3402fb33472e5a7a990886967",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xd91FdF9d46ddbcdBD7EBE4485bdC9D2d5DE9a333",
    "transactionIndex": 0,
    "gasUsed": "411099",
    "logsBloom": "0x
    "blockHash": "0x25866adfce6b2e6bf7f43c80562ad6a55e7b35eb573d3b42b283bda4bfbdc324",
    "transactionHash": "0x975d8427246d34b10220ccb6046b2311c9f495e3402fb33472e5a7a990886967",
    "logs": [],
    "blockNumber": 8845882,
    "cumulativeGasUsed": "411099",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "643eb59cb0f5205015bc29f950dbae35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"getRoleBearer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"removeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"roleBearers\",\"type\":\"address[]\"}],\"name\":\"setRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Simplifinance Code written by Isaac Jesse (a.k.a Bobeu) Github: https://github.com/bobeu\",\"kind\":\"dev\",\"methods\":{\"getRoleBearer(uint256)\":{\"details\":\"Returns role bearer. Can be called externally by contracts.\",\"params\":{\"roleId\":\": Role Id. \"}},\"hasRole(address)\":{\"details\":\"Check if target is an role.\",\"params\":{\"target\":\": Target address.\"}},\"removeRole(address)\":{\"details\":\"Remove an address as owner.\",\"params\":{\"target\":\": Target address\"}},\"renounceRole()\":{\"details\":\"An owner can renounce their role. This however will not leave the contract empty without an owner. There must be at least one owner left.\"},\"setRole(address[])\":{\"details\":\"Add a new owner address\",\"params\":{\"roleBearers\":\": New roles\"}}},\"title\":\"RoleManager contract cuts across all Simplifi's contracts. Multiple accounts can be given role right to interact with  ecosystem's smart contracts. It is a standalone contract for managing role in Simplifi protocol\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"removeRole(address)\":{\"notice\":\"Only address with owner permission can remove another owner.\"},\"renounceRole()\":{\"notice\":\"Only address with owner permission can renounce role.\"},\"roleCount()\":{\"notice\":\"Number of roles.\"},\"roles(uint256)\":{\"notice\":\"Mapping of roleCount to addresses. A valid id will return a mapped owner.\"},\"setRole(address[])\":{\"notice\":\"Only address with owner permission can add another owner.\"}},\"notice\":\"Accounts with role access cannot access users'fund. Users'funds are isolated from the main contract. Funds are  managed in a special safe called Bank. Each of the pools operates a unique and reusable safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standalone/RoleManager.sol\":\"RoleManager\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IRoleBase \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IRoleBase {\\r\\n    function setRole(\\r\\n        address[] memory newRoleTos\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRoleBearer(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xa166efe0dfbcd8f4e00f33c155797b3e2d652087f630893518b0dec1f823519b\",\"license\":\"MIT\"},\"contracts/libraries/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary ErrorLib {\\r\\n    error ErrorOccurred(string errorMsg);\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts any operation.\\r\\n     * @param _error : Error struct\\r\\n     */\\r\\n    function _throw(string memory _error) internal pure {\\r\\n        if(bytes(_error).length > 0){ \\r\\n            revert ErrorOccurred(_error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x967582ca2a833932c7403e6950ede1972f1b7f94ecfedd2d3ddee9175d309e5a\",\"license\":\"MIT\"},\"contracts/peripherals/OnlyRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IRoleBase } from \\\"../interfaces/IRoleBase.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract OnlyRoleBase is MsgSender {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Role manager address\\r\\n    IRoleBase public roleManager;\\r\\n\\r\\n    // ============= constructor ============\\r\\n    constructor(IRoleBase _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyRoleBearer {\\r\\n        _onlyRoleBearer();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Allow only account with role access\\r\\n    function _onlyRoleBearer() internal view {\\r\\n        IRoleBase mgr = roleManager;\\r\\n        if(address(mgr) == address(0)) 'Manager is zero'._throw();\\r\\n        if(!_hasRole(_msgSender())) 'Access denied'._throw();\\r\\n    }\\r\\n\\r\\n    function _hasRole(address target) internal view returns(bool result) {\\r\\n        result = IRoleBase(roleManager).hasRole(target);\\r\\n    }  \\r\\n\\r\\n    /// @dev Set role manager\\r\\n    function _setRoleManager(IRoleBase newManager) private{\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Role manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleBearer\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(IRoleBase(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd10e299b8bf634ae026b74cefab6933d135d5cc8265acde354aafccbbed4ad23\",\"license\":\"MIT\"},\"contracts/standalone/RoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IRoleBase, MsgSender } from \\\"../peripherals/OnlyRoleBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RoleManager contract cuts across all Simplifi's contracts. Multiple accounts can be given role right to interact with \\r\\n * ecosystem's smart contracts. It is a standalone contract for managing role in Simplifi protocol\\r\\n * @author Simplifinance Code written by Isaac Jesse (a.k.a Bobeu) Github: https://github.com/bobeu\\r\\n * @notice Accounts with role access cannot access users'fund. Users'funds are isolated from the main contract. Funds are \\r\\n * managed in a special safe called Bank. Each of the pools operates a unique and reusable safe.\\r\\n */\\r\\ncontract RoleManager is IRoleBase, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of roles.\\r\\n     */\\r\\n    uint public roleCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with role permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _hasRole;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of roleCount to addresses.\\r\\n     * A valid id will return a mapped owner.\\r\\n     */\\r\\n    mapping (uint => address) public roles;\\r\\n\\r\\n    /**\\r\\n     * @dev Only account with role is allowed.\\r\\n     */\\r\\n    modifier onlyRoleBase {\\r\\n        require(_hasRole[_msgSender()], \\\"Caller has no role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setRole(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role bearer.\\r\\n     */\\r\\n    function _getRoleBearer(uint ownerId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _owner) \\r\\n    {\\r\\n        _owner = roles[ownerId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as owner.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setRole(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"RoleBase: 'target' parameter is empty\\\");\\r\\n        add? (_hasRole[target] = true, roleCount ++) : (_hasRole[target] = false, roleCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new owner address\\r\\n     * @param roleBearers: New roles\\r\\n     * @notice Only address with owner permission can add another owner.\\r\\n     */\\r\\n    function setRole(\\r\\n        address[] memory roleBearers\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleBase\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < roleBearers.length; r++) {\\r\\n            _setRole(roleBearers[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as owner.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with owner permission can remove another owner.\\r\\n     */\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleBase\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setRole(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An owner can renounce their role. This however will not leave the\\r\\n     * contract empty without an owner. There must be at least one owner left.\\r\\n     * @notice Only address with owner permission can renounce role.\\r\\n     */\\r\\n    function renounceRole() \\r\\n        external\\r\\n        onlyRoleBase\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(roleCount > 1, \\\"At least 2 roles is required to leave\\\"); \\r\\n        _setRole(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role bearer.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param roleId : Role Id. \\r\\n     */\\r\\n    function getRoleBearer(\\r\\n        uint roleId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getRoleBearer(roleId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an role.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _hasRole[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4c530d36c3ef24041e40c2c07b741e9fc9c5f050699cd5e9ae7c06e69470460d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001c336001610021565b610192565b6001600160a01b0382166100bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f526f6c65426173653a20277461726765742720706172616d657465722069732060448201527f656d707479000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b806100f6576001600160a01b0382166000908152600160205260408120805460ff19169055805481806100ed83610162565b9190505561012d565b6001600160a01b03821660009081526001602081905260408220805460ff191682179055815490918061012883610179565b919050555b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008161017157610171610133565b506000190190565b60006001820161018b5761018b610133565b5060010190565b610594806101a16000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bfda4a491161005b578063bfda4a49146100e9578063ddf963581461012a578063dfe23f8414610141578063ed82d28a1461014957600080fd5b80634762155d146100825780637ef09bca146100aa578063a8912cbc146100d6575b600080fd5b6100956100903660046103c0565b610172565b60405190151581526020015b60405180910390f35b6100956100b83660046103c0565b6001600160a01b031660009081526001602052604090205460ff1690565b6100956100e43660046103f8565b6101be565b6101126100f73660046104bd565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100a1565b61013360005481565b6040519081526020016100a1565b61009561022d565b6101126101573660046104bd565b6000908152600260205260409020546001600160a01b031690565b3360009081526001602052604081205460ff166101aa5760405162461bcd60e51b81526004016101a1906104d6565b60405180910390fd5b6101b58260006102cd565b5060015b919050565b3360009081526001602052604081205460ff166101ed5760405162461bcd60e51b81526004016101a1906104d6565b600160005b83518110156102265761021e84828151811061021057610210610502565b6020026020010151836102cd565b6001016101f2565b5092915050565b3360009081526001602052604081205460ff1661025c5760405162461bcd60e51b81526004016101a1906104d6565b6001600054116102bc5760405162461bcd60e51b815260206004820152602560248201527f4174206c65617374203220726f6c657320697320726571756972656420746f206044820152646c6561766560d81b60648201526084016101a1565b6102c73360006102cd565b50600190565b6001600160a01b0382166103315760405162461bcd60e51b815260206004820152602560248201527f526f6c65426173653a20277461726765742720706172616d6574657220697320604482015264656d70747960d81b60648201526084016101a1565b8061036c576001600160a01b0382166000908152600160205260408120805460ff19169055805481806103638361052e565b919050556103a3565b6001600160a01b03821660009081526001602081905260408220805460ff191682179055815490918061039e83610545565b919050555b50505050565b80356001600160a01b03811681146101b957600080fd5b6000602082840312156103d257600080fd5b6103db826103a9565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561040b57600080fd5b823567ffffffffffffffff8082111561042357600080fd5b818501915085601f83011261043757600080fd5b813581811115610449576104496103e2565b8060051b604051601f19603f8301168101818110858211171561046e5761046e6103e2565b60405291825284820192508381018501918883111561048c57600080fd5b938501935b828510156104b1576104a2856103a9565b84529385019392850192610491565b98975050505050505050565b6000602082840312156104cf57600080fd5b5035919050565b60208082526012908201527143616c6c657220686173206e6f20726f6c6560701b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008161053d5761053d610518565b506000190190565b60006001820161055757610557610518565b506001019056fea264697066735822122041adfa99b626c9274751e40de2477d3a519121955a7d839c7337e9c835d5c59764736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bfda4a491161005b578063bfda4a49146100e9578063ddf963581461012a578063dfe23f8414610141578063ed82d28a1461014957600080fd5b80634762155d146100825780637ef09bca146100aa578063a8912cbc146100d6575b600080fd5b6100956100903660046103c0565b610172565b60405190151581526020015b60405180910390f35b6100956100b83660046103c0565b6001600160a01b031660009081526001602052604090205460ff1690565b6100956100e43660046103f8565b6101be565b6101126100f73660046104bd565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100a1565b61013360005481565b6040519081526020016100a1565b61009561022d565b6101126101573660046104bd565b6000908152600260205260409020546001600160a01b031690565b3360009081526001602052604081205460ff166101aa5760405162461bcd60e51b81526004016101a1906104d6565b60405180910390fd5b6101b58260006102cd565b5060015b919050565b3360009081526001602052604081205460ff166101ed5760405162461bcd60e51b81526004016101a1906104d6565b600160005b83518110156102265761021e84828151811061021057610210610502565b6020026020010151836102cd565b6001016101f2565b5092915050565b3360009081526001602052604081205460ff1661025c5760405162461bcd60e51b81526004016101a1906104d6565b6001600054116102bc5760405162461bcd60e51b815260206004820152602560248201527f4174206c65617374203220726f6c657320697320726571756972656420746f206044820152646c6561766560d81b60648201526084016101a1565b6102c73360006102cd565b50600190565b6001600160a01b0382166103315760405162461bcd60e51b815260206004820152602560248201527f526f6c65426173653a20277461726765742720706172616d6574657220697320604482015264656d70747960d81b60648201526084016101a1565b8061036c576001600160a01b0382166000908152600160205260408120805460ff19169055805481806103638361052e565b919050556103a3565b6001600160a01b03821660009081526001602081905260408220805460ff191682179055815490918061039e83610545565b919050555b50505050565b80356001600160a01b03811681146101b957600080fd5b6000602082840312156103d257600080fd5b6103db826103a9565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561040b57600080fd5b823567ffffffffffffffff8082111561042357600080fd5b818501915085601f83011261043757600080fd5b813581811115610449576104496103e2565b8060051b604051601f19603f8301168101818110858211171561046e5761046e6103e2565b60405291825284820192508381018501918883111561048c57600080fd5b938501935b828510156104b1576104a2856103a9565b84529385019392850192610491565b98975050505050505050565b6000602082840312156104cf57600080fd5b5035919050565b60208082526012908201527143616c6c657220686173206e6f20726f6c6560701b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008161053d5761053d610518565b506000190190565b60006001820161055757610557610518565b506001019056fea264697066735822122041adfa99b626c9274751e40de2477d3a519121955a7d839c7337e9c835d5c59764736f6c63430008180033",
  "devdoc": {
    "author": "Simplifinance Code written by Isaac Jesse (a.k.a Bobeu) Github: https://github.com/bobeu",
    "kind": "dev",
    "methods": {
      "getRoleBearer(uint256)": {
        "details": "Returns role bearer. Can be called externally by contracts.",
        "params": {
          "roleId": ": Role Id. "
        }
      },
      "hasRole(address)": {
        "details": "Check if target is an role.",
        "params": {
          "target": ": Target address."
        }
      },
      "removeRole(address)": {
        "details": "Remove an address as owner.",
        "params": {
          "target": ": Target address"
        }
      },
      "renounceRole()": {
        "details": "An owner can renounce their role. This however will not leave the contract empty without an owner. There must be at least one owner left."
      },
      "setRole(address[])": {
        "details": "Add a new owner address",
        "params": {
          "roleBearers": ": New roles"
        }
      }
    },
    "title": "RoleManager contract cuts across all Simplifi's contracts. Multiple accounts can be given role right to interact with  ecosystem's smart contracts. It is a standalone contract for managing role in Simplifi protocol",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "removeRole(address)": {
        "notice": "Only address with owner permission can remove another owner."
      },
      "renounceRole()": {
        "notice": "Only address with owner permission can renounce role."
      },
      "roleCount()": {
        "notice": "Number of roles."
      },
      "roles(uint256)": {
        "notice": "Mapping of roleCount to addresses. A valid id will return a mapped owner."
      },
      "setRole(address[])": {
        "notice": "Only address with owner permission can add another owner."
      }
    },
    "notice": "Accounts with role access cannot access users'fund. Users'funds are isolated from the main contract. Funds are  managed in a special safe called Bank. Each of the pools operates a unique and reusable safe.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10648,
        "contract": "contracts/standalone/RoleManager.sol:RoleManager",
        "label": "roleCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10653,
        "contract": "contracts/standalone/RoleManager.sol:RoleManager",
        "label": "_hasRole",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10658,
        "contract": "contracts/standalone/RoleManager.sol:RoleManager",
        "label": "roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}