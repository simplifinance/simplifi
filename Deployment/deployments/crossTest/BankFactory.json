{
  "address": "0x9041F75414dEE439E0C5Fc618862642B93F84cb4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOwnerShip",
          "name": "_ownershipManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ManagerAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermittedToCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "createBank",
      "outputs": [
        {
          "internalType": "address",
          "name": "_bank",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getBank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipManager",
      "outputs": [
        {
          "internalType": "contract IOwnerShip",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setOwnershipManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBanks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfce355b620204dce1502a3749a9b1812078f8485da3322c8d1e3548974dbca4e",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0x9041F75414dEE439E0C5Fc618862642B93F84cb4",
    "transactionIndex": 0,
    "gasUsed": "1494994",
    "logsBloom": "0x
    "blockHash": "0xa1112ceaf71b30ce303497a628b65ab4829c97a2d2138d8f476cebf8d8ae5470",
    "transactionHash": "0xfce355b620204dce1502a3749a9b1812078f8485da3322c8d1e3548974dbca4e",
    "logs": [],
    "blockNumber": 8108430,
    "cumulativeGasUsed": "1494994",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x85f9819923B0C3B38516dbBb0156B93811e42DcE",
    "0xD7c271d20c9E323336bFC843AEb8deC23B346352"
  ],
  "numDeployments": 1,
  "solcInputHash": "e8736083370991cf784bacd988b240e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOwnerShip\",\"name\":\"_ownershipManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ManagerAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermittedToCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"createBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipManager\",\"outputs\":[{\"internalType\":\"contract IOwnerShip\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setOwnershipManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBanks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBank(uint256)\":{\"details\":\"Create a new bank.\"},\"getBank(uint256)\":{\"params\":{\"unit\":\": Unit amount\"}},\"setOwnershipManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}}},\"stateVariables\":{\"bankMap\":{\"details\":\"Mapping of addresses to strategies. Also used as reverse map of strategies to status.\"}},\"title\":\"SmartBankAdmin: A standalone contract that manages bank creation,  deletion, read and write data. Author: Simplifinance\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBank(uint256)\":{\"notice\":\"'unit' should not own a bank before now.          only address with owner permission can call.\"},\"getBank(uint256)\":{\"notice\":\"Returns then bank for 'unit'\"},\"setOwnershipManager(address)\":{\"notice\":\"Set Ownership manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/strategies/BankFactory.sol\":\"BankFactory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d\",\"license\":\"MIT\"},\"contracts/abstracts/OnlyOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { MsgSender } from \\\"../implementations/OwnerShip.sol\\\";\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n\\r\\nabstract contract OnlyOwner is MsgSender {\\r\\n    error ManagerAddressIsZero();\\r\\n    error NotPermittedToCall();\\r\\n\\r\\n    IOwnerShip public ownershipManager;\\r\\n\\r\\n    constructor(IOwnerShip _ownershipManager)\\r\\n    {\\r\\n        _setOwnershipManager(_ownershipManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        IOwnerShip mgr = ownershipManager;\\r\\n        if(address(mgr) == address(0)) revert ManagerAddressIsZero();\\r\\n        if(!IOwnerShip(mgr).isOwner(_msgSender())) revert NotPermittedToCall();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setOwnershipManager(\\r\\n        IOwnerShip newManager\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        ownershipManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Ownership manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setOwnershipManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setOwnershipManager(IOwnerShip(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6d34bfc0e1c2b6cd550c7cea1442036213925283ff98f0010b7ec78c50863f6e\",\"license\":\"MIT\"},\"contracts/apis/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\nimport { Counters } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\\\";\\r\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface Common {\\r\\n  /**\\r\\n   * @dev Tags/Placeholders for functions available in the implementation contract.\\r\\n   */\\r\\n\\r\\n  enum Stage {\\r\\n    JOIN, \\r\\n    GET, \\r\\n    PAYBACK, \\r\\n    WITHDRAW,\\r\\n    CANCELED,\\r\\n    ENDED\\r\\n  }\\r\\n\\r\\n  ////////////////////////////////////////////////////////// V3\\r\\n  enum Status { AVAILABLE, TAKEN }\\r\\n\\r\\n  enum Router { PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n  struct Pool {\\r\\n    LInt lInt;\\r\\n    BigInt bigInt;\\r\\n    Addresses addrs;\\r\\n    Router router;\\r\\n    Stage stage;\\r\\n    Interest interest;\\r\\n    Status status;\\r\\n  }\\r\\n    // Status status;\\r\\n\\r\\n  struct Point {\\r\\n    uint contributor;\\r\\n    uint creator; \\r\\n  }\\r\\n\\r\\n  /** \\r\\n   *  @param isMember : Whether user is a member or not\\r\\n   *  @param turnStartTime: Time when the contributor's turn start to count.\\r\\n   *  @param getFinanceTime: Date when loan was disbursed\\r\\n   *  @param paybackTime: Date which the borrowed fund must be retured\\r\\n   *  @param loan: Total debts owed by the last fund recipient.\\r\\n   *  @param colBals: Collateral balances of the last recipient.\\r\\n   *  @param sentQuota : Whether an user/current msg.sender has received or not.\\r\\n   *  @param id : Address of the last recipient.    \\r\\n  */\\r\\n  struct Contributor {\\r\\n    uint durOfChoice;\\r\\n    uint paybackTime;\\r\\n    uint turnStartTime;\\r\\n    uint getFinanceTime;\\r\\n    uint loan;\\r\\n    uint colBals;\\r\\n    address id;\\r\\n    bool sentQuota;\\r\\n    uint interestPaid;\\r\\n  }\\r\\n\\r\\n  // struct Rank {\\r\\n  //   bool admin;\\r\\n  //   bool member;\\r\\n  // }\\r\\n\\r\\n  \\r\\n  struct UpdateMemberDataParam {\\r\\n    uint24 durOfChoice;\\r\\n    address expected;\\r\\n    uint256 unit;\\r\\n    uint uId;\\r\\n    uint fee;\\r\\n    uint128 colPriceInDecimals;\\r\\n    Pool pool;\\r\\n  }\\r\\n\\r\\n  struct AddTobandParam {\\r\\n    uint unit;\\r\\n    bool isPermissioned;\\r\\n  }\\r\\n\\r\\n  struct GetPoolResult {\\r\\n    Pool data;\\r\\n    uint uId;\\r\\n  }\\r\\n\\r\\n  struct PaybackParam {\\r\\n    uint unit;\\r\\n    address user;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Structured data types to convey parameters to avoid Stack too deep error.\\r\\n    @param quorum : The maximum number of users that can form a contribution group.\\r\\n    @param duration : The number of days the contribution contract will expires. It should be \\r\\n                      specified in hour.\\r\\n    @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \\r\\n                  in order to be able to get financed. This should be specified in percentage i.e \\r\\n                  if raw ccr is 1.2 , actual ccr should be 1.2 * 100 = 120. It is pertinent to be\\r\\n                  mindful how this works in our protocol. Even if ccr is 1 indicating that contributor\\r\\n                  must hold at least 100% of collateral in their wallet before they can GF, it must \\r\\n                  be rendered in input section as 1 * 100. 100 is the minimum admins of bands\\r\\n                  can give as collateral coverage ratio.\\r\\n    @param value : The total value of pooled fund.\\r\\n    @param members : List of members in a group.\\r\\n    @param intRate : The rate of interest to charge for the duration of use of the fund.\\r\\n    @param asset : The contract address of an approved assets in this group. \\r\\n                    @notice The pooled asset of this group is denominated in this currency. \\r\\n  */\\r\\n  struct CreatePoolParam {\\r\\n    uint16 intRate;\\r\\n    uint8 quorum;\\r\\n    uint16 duration;\\r\\n    uint24 colCoverage; \\r\\n    uint unit;\\r\\n    address[] members;\\r\\n    address asset;\\r\\n    uint rId;\\r\\n    uint uId;\\r\\n    bool isTaken;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice Structured types - uint256\\r\\n   *  @param unit : Unit contribution.\\r\\n   *  @param currentPool : Total contributed to date.\\r\\n   */\\r\\n  struct BigInt {\\r\\n    uint256 unit;\\r\\n    uint256 currentPool;\\r\\n    uint recordId;\\r\\n    uint unitId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice Structured types - unit less than uint124\\r\\n   *  @param intRate : Rate of interest per duration. \\r\\n   *  @param quorum : The maximum number of users that can form a contribution group.\\r\\n   *  @param selector : This is like the hand or ticker of a clock that is used to select\\r\\n   *                    the next contributor to get finance.\\r\\n   *  @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \\r\\n                  in order to be able to get financed.\\r\\n      @param duration : The number of days the contribution contract will expires.\\r\\n      @param cSlot : Slot ref No where the contributors are stored.\\r\\n      @param allGh : Indicator showing whether all th members have been financed or not.\\r\\n      @param userCount : Indicating the current number of contributors.\\r\\n   */\\r\\n  struct LInt {\\r\\n    uint quorum;\\r\\n    uint selector;\\r\\n    uint colCoverage;\\r\\n    uint duration;\\r\\n    uint intRate;\\r\\n    uint cSlot;\\r\\n    uint allGh;\\r\\n    uint userCount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structured types - Address\\r\\n   * @param asset : Contract address of the asset in use.\\r\\n   * @param lastPaid: Last contributor who got finance.\\r\\n   * @param bank : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n   * @param admin : Pool creator.\\r\\n   * \\r\\n   */\\r\\n  struct Addresses {\\r\\n    address asset;\\r\\n    address lastPaid;\\r\\n    address bank;\\r\\n    address admin;\\r\\n  }\\r\\n  \\r\\n  struct ReturnValue {\\r\\n    Pool pool;\\r\\n    uint uId;\\r\\n    uint rId;\\r\\n  }\\r\\n\\r\\n  struct CreatePoolReturnValue {\\r\\n    Pool pool;\\r\\n    Contributor cData; \\r\\n  }\\r\\n\\r\\n  struct Interest {\\r\\n    uint fullInterest;\\r\\n    uint intPerSec;\\r\\n    uint intPerChoiceOfDur;\\r\\n  }\\r\\n\\r\\n  struct CommonEventData {\\r\\n    Pool pool;\\r\\n    uint debtBal;\\r\\n    uint colBal;\\r\\n  }\\r\\n\\r\\n  // struct Contributor {\\r\\n  //   Contributor cData;\\r\\n  //   // Rank rank;\\r\\n  //   // uint8 slot;\\r\\n  // }\\r\\n\\r\\n  struct Balances {\\r\\n    uint collateral;\\r\\n    uint assetBase;\\r\\n  }\\r\\n\\r\\n  struct DebtReturnValue {\\r\\n    uint debt;\\r\\n    uint pos;\\r\\n  }\\r\\n\\r\\n  struct SwapProfileArg {\\r\\n    Slot expSlot;\\r\\n    address expCaller;\\r\\n    address actCaller;\\r\\n    uint unit;\\r\\n    uint cSlot;\\r\\n    Contributor expcData;\\r\\n  }\\r\\n\\r\\n  struct Slot {\\r\\n    uint value;\\r\\n    bool isMember;\\r\\n    bool isAdmin;\\r\\n  }\\r\\n\\r\\n  struct UpdateUserParam {\\r\\n    Contributor cData;\\r\\n    Slot slot;\\r\\n    uint cSlot;\\r\\n    uint256 unit;\\r\\n    address user;\\r\\n  }\\r\\n\\r\\n  struct Price {\\r\\n    uint128 price;\\r\\n    uint8 decimals;\\r\\n  }\\r\\n\\r\\n  struct ReadDataReturnValue {\\r\\n    Pool pool;\\r\\n    Contributor[] cData;\\r\\n  }\\r\\n\\r\\n  struct Payback_Bank {\\r\\n    address user; \\r\\n    address asset; \\r\\n    uint256 debt;\\r\\n    uint256 attestedInitialBal;\\r\\n    bool allGF; \\r\\n    Contributor[] cData;\\r\\n    bool isSwapped;\\r\\n    address defaulted;\\r\\n    uint rId;\\r\\n    IERC20 collateralToken;\\r\\n  }\\r\\n\\r\\n  error CollateralCoverageCannotGoBelow_100(uint24 ccr);\\r\\n  error InsufficientAllowance();\\r\\n  error TransferFailed();\\r\\n  error UnitIsTaken();\\r\\n  error SafeAddupFailed();\\r\\n  error CurrentReceiverIsNotADefaulter();\\r\\n  error CancellationNotAllowed();\\r\\n  error TurnTimeHasNotPassed();\\r\\n  error OnlyAdminIsAllowed();\\r\\n  error PoolNotComplete();\\r\\n  error PoolIsFilled();\\r\\n  error NoDebtFound();\\r\\n  error NotAMember();\\r\\n  error UserDoesNotHaveAccess();\\r\\n\\r\\n  // struct ViewFactoryData {\\r\\n  //   Analytics analytics;\\r\\n  //   uint currentEpoches;\\r\\n  //   uint recordEpoches;\\r\\n  //   uint makerRate;\\r\\n  //   uint totalSafe;\\r\\n  //   IERC20[] baseAssets; \\r\\n  // }\\r\\n\\r\\n}\",\"keccak256\":\"0x46e673714dbd67d1abdf1012bc88d04f727d7d8413608a85206efb7a21127245\",\"license\":\"MIT\"},\"contracts/apis/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IBank {\\r\\n  error AssetTransferFailed();\\r\\n  \\r\\n  function addUp(address user, uint rId) external returns(bool);\\r\\n  function getFinance(\\r\\n    address user, \\r\\n    address asset, \\r\\n    uint256 loan, \\r\\n    uint fee, \\r\\n    uint256 calculatedCol,\\r\\n    uint rId\\r\\n  ) \\r\\n    external \\r\\n    returns(uint);\\r\\n\\r\\n  function payback(Common.Payback_Bank memory) external returns(bool);\\r\\n  function cancel(address user, address asset, uint unit, uint rId) external returns(bool);\\r\\n  function getData() external view returns(ViewData memory);\\r\\n\\r\\n  struct ViewData {\\r\\n    uint totalClients;\\r\\n    uint aggregateFee;\\r\\n  }\\r\\n\\r\\n  struct ViewUserData {\\r\\n    bool access;\\r\\n    uint collateralBalance;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xfecb8d22c0a0a6c2e3711e49ad4c0c2696c6761cdde23d6e944f83970b762e87\",\"license\":\"MIT\"},\"contracts/apis/IBankFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title Interface of the Bank manager\\r\\n * @author : Simplifinance\\r\\n */\\r\\ninterface IBankFactory {\\r\\n  error ZeroAddress(address);\\r\\n  \\r\\n  /**\\r\\n   * Query bank for user\\r\\n   * @param unit : Address to get bank for\\r\\n   * @return A bank if none was found, it returns address(0).\\r\\n   */\\r\\n  function getBank(uint256 unit) external view returns(address);\\r\\n  // function getBank(address user) external view returns(address);\\r\\n\\r\\n/**\\r\\n * Clones and return a new bank \\r\\n * @param unit : Target address for whom to create bank\\r\\n */\\r\\n  function createBank(uint256 unit) external returns(address bank);\\r\\n\\r\\n  /**\\r\\n   * Bank struct map\\r\\n   * key: user address { EOA }\\r\\n   * value: Bank { Contract } \\r\\n   */\\r\\n  struct BankData {\\r\\n    address key;\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x6a01bf482825083edeb2addb7d6077ef5ff6f071b2ee3791a0d6eafc175b2c08\",\"license\":\"MIT\"},\"contracts/apis/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Same as lockToken except that this function is called by the Factory contract to \\r\\n     * lock collateral amount to user's wallet\\r\\n     * @param target : Account to lock to token to.\\r\\n     * @param _routeTo : Escape address.\\r\\n     * @param amount : Amount to lock\\r\\n     */\\r\\n    function lockSpecial(\\r\\n        address target, \\r\\n        address _routeTo, \\r\\n        uint256 amount\\r\\n    ) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf332d9c05004b468d236256e4a409725d01998bafd95455d874f79c148e2bdc1\",\"license\":\"MIT\"},\"contracts/apis/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/apis/IOwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IOwnerShip \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IOwnerShip {\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xe21511940e88a7e8036b4b6adfde25125f7f3d49cde2732bffd219847b3ed6c0\",\"license\":\"MIT\"},\"contracts/implementations/OwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title OwnerShip contract cuts across all contracts in the Simplifinance ecosystem. Multiple accounts can be given ownership right to interact with \\r\\n * ecosystem's smart contracts. It is a standalone contract for managing ownership in Simplifi protocol\\r\\n * @author Simplifinance Code written by Isaac Jesse (a.k.a Bobeu) Github: https://github.com/bobeu\\r\\n * @notice Accounts with ownership access cannot access users'fund. Users'funds are isolated from the main contract. Funds are \\r\\n * managed in a special safe called Bank. Each of the pools operates a unique and reusable safe.\\r\\n */\\r\\ncontract OwnerShip is IOwnerShip, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of owners.\\r\\n     */\\r\\n    uint public ownersCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with ownership permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _isOwner;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of ownersCount to addresses.\\r\\n     * A valid id will return a mapped owner.\\r\\n     */\\r\\n    mapping (uint => address) public owners;\\r\\n\\r\\n    /**\\r\\n     * @dev Only owner is allowed.\\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        require(_isOwner[_msgSender()], \\\"Oop! Caller is not recognized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     */\\r\\n    function _getOwner(uint ownerId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _owner) \\r\\n    {\\r\\n        _owner = owners[ownerId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as owner.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setOwner(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"Simplifi OwnerShip: 'target' parameter is empty\\\");\\r\\n        add? (_isOwner[target] = true, ownersCount ++) : (_isOwner[target] = false, ownersCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new owner address\\r\\n     * @param newOwners: New owners\\r\\n     * @notice Only address with owner permission can add another owner.\\r\\n     */\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < newOwners.length; r++) {\\r\\n            _setOwner(newOwners[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as owner.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with owner permission can remove another owner.\\r\\n     */\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setOwner(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An owner can renounce their ownership. This however will not leave the\\r\\n     * contract empty without an owner. There must be at least one owner left.\\r\\n     * @notice Only address with owner permission can renounce ownership.\\r\\n     */\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(ownersCount > 1, \\\"At least 2 owners is required to leave\\\"); \\r\\n        _setOwner(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param ownerId : Owner Id. \\r\\n     */\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getOwner(ownerId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an owner.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _isOwner[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcacb7af12f543387d578515a163f7c3d57c32b441a0c68484940aaefaf0fdab0\",\"license\":\"MIT\"},\"contracts/implementations/strategies/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\nimport { SafeMath } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\\\";\\r\\nimport { SafeCallERC20, IERC20 } from \\\"../../libraries/SafeCallERC20.sol\\\";\\r\\nimport { IBank } from \\\"../../apis/IBank.sol\\\";\\r\\nimport { Common } from \\\"../../apis/Common.sol\\\";\\r\\nimport { OnlyOwner, IOwnerShip } from \\\"../../abstracts/OnlyOwner.sol\\\";\\r\\n\\r\\ncontract Bank is IBank, OnlyOwner, ReentrancyGuard {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // Number of contributors currently operating this safe\\r\\n    uint private userCount;\\r\\n\\r\\n    // Total fee collected\\r\\n    uint private aggregateFee;\\r\\n\\r\\n    // Collateral token\\r\\n    // IERC20 public collateralToken;\\r\\n\\r\\n    // Fee Receiver\\r\\n    address public feeTo;\\r\\n\\r\\n    // Mapping of user to record Id to access\\r\\n    mapping(address => mapping(uint => bool)) private access;\\r\\n\\r\\n    // Mapping of users to unitId to Collateral\\r\\n    mapping(address => mapping(uint => uint256)) private collateralBalances;\\r\\n\\r\\n    ///@dev Only users with access role are allowed\\r\\n    modifier hasAccess(address user, uint rId) {\\r\\n        if (!access[user][rId]) revert Common.UserDoesNotHaveAccess();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes state variables.\\r\\n     * OnlyOwner function.\\r\\n     */\\r\\n    constructor(\\r\\n        IOwnerShip _ownershipManager,\\r\\n        address _feeTo\\r\\n    ) OnlyOwner(_ownershipManager) {\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        (bool s, ) = feeTo.call{value: msg.value}(\\\"\\\");\\r\\n        require(s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers new user\\r\\n     * @param user New user\\r\\n\\r\\n    */\\r\\n    function _addUser(address user, uint rId) private {\\r\\n        assert(!access[user][rId]);\\r\\n        access[user][rId] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Implementation of IBank.addUp\\r\\n     * See IBank.addUp\\r\\n     */\\r\\n    function addUp(address user, uint rId) external onlyOwner returns (bool) {\\r\\n        unchecked {\\r\\n            userCount++;\\r\\n        }\\r\\n        _addUser(user, rId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UnLocks collateral balances\\r\\n     * @param user Existing user\\r\\n\\r\\n    */\\r\\n    function _removeUser(address user, uint rId) private {\\r\\n        assert(access[user][rId]);\\r\\n        if(userCount > 0) {\\r\\n            userCount--;\\r\\n        }\\r\\n        access[user][rId] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve spender contributor 'to' to spend from contract's balance\\r\\n     * @param to : Contributor\\r\\n     * @param asset : Currency in use\\r\\n     * @param amount : Value\\r\\n     * @notice Consideration is given to the previous allowances given to users.\\r\\n     */\\r\\n    function _setAllowance(address to, address asset, uint256 amount) private {\\r\\n        uint prev = IERC20(asset).allowance(address(this), to);\\r\\n        IERC20(asset).approve(to, amount.add(prev));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev End the current epoch\\r\\n     * @param asset : AssetBase\\r\\n     * @param cData : Contributors data\\r\\n     */\\r\\n    function _tryRoundUp(\\r\\n        address asset,\\r\\n        Common.Contributor[] memory cData\\r\\n    ) internal {\\r\\n        uint erc20Balances = IERC20(asset).balanceOf(address(this));\\r\\n        uint fees = aggregateFee;\\r\\n        if (erc20Balances > 0) {\\r\\n            if (erc20Balances > fees && fees > 0) {\\r\\n                erc20Balances -= fees;\\r\\n                aggregateFee = 0;\\r\\n                if (!IERC20(asset).transfer(feeTo, fees))\\r\\n                    revert AssetTransferFailed();\\r\\n            }\\r\\n            if (erc20Balances > 0) {\\r\\n                fees = erc20Balances.div(cData.length); // Reusing the fee memory slot\\r\\n                for (uint i = 0; i < cData.length; i++) {\\r\\n                    address to = cData[i].id;\\r\\n                    _setAllowance(to, asset, fees);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        userCount = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get Finance - We send USD to user and accept collateral.\\r\\n     * @param user : Beneficiary.\\r\\n     * @param asset : Asset base\\r\\n     * @param loan : Amount to receive as loan.\\r\\n     * @param fee : Amount charged as platform fee\\r\\n     * @param calculatedCol : Amount required to pay as collateral\\r\\n     * @param rId : Record Id\\r\\n     */\\r\\n    function getFinance(\\r\\n        address user,\\r\\n        address asset,\\r\\n        uint256 loan,\\r\\n        uint fee,\\r\\n        uint256 calculatedCol,\\r\\n        uint rId\\r\\n    ) external hasAccess(user, rId) onlyOwner returns (uint) {\\r\\n        assert(asset != address(0) && user != address(0));\\r\\n        collateralBalances[user][rId] = calculatedCol;\\r\\n        uint loanable = loan;\\r\\n        if (fee > 0) {\\r\\n            unchecked {\\r\\n                aggregateFee += fee;\\r\\n                if (loanable > fee) {\\r\\n                    loanable -= fee;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _setAllowance(user, asset, loanable);\\r\\n        return loan;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pays back loan\\r\\n     * @param _p : Parameters of type PaybackParam\\r\\n     * _p.user : Current txn.origin not msg.sender\\r\\n     * _p.asset : Asset base\\r\\n     * _p.debt : Amount owing by user\\r\\n     * _p.attestedInitialBal : Initial recorded balance of this contract before asset was transfered from the user.\\r\\n     * _p.allGF : Whether all the contributors have get finance or not\\r\\n     * _p.cData : Contributors data\\r\\n     * _p.isSwapped : If isSwapped is true, meaning the actual contributor defaulted.\\r\\n     * _p.defaulted : Address of the defaulted\\r\\n     * _p.rId : Record Id. Every pool has a record Id i.e pool.bigInt.recordId\\r\\n     */\\r\\n    function payback(Common.Payback_Bank memory _p) \\r\\n        external \\r\\n        onlyOwner \\r\\n        hasAccess(_p.isSwapped? _p.defaulted : _p.user, _p.rId) \\r\\n        returns (bool) \\r\\n    {\\r\\n        uint col = collateralBalances[_p.user][_p.rId];\\r\\n        if (_p.isSwapped) {\\r\\n            col = collateralBalances[_p.defaulted][_p.rId];\\r\\n            collateralBalances[_p.defaulted][_p.rId] = 0;\\r\\n            _removeUser(_p.defaulted, _p.rId);\\r\\n        } else {\\r\\n            _removeUser(_p.user, _p.rId);\\r\\n        }\\r\\n        collateralBalances[_p.user][_p.rId] = 0;\\r\\n        \\r\\n        assert(\\r\\n            IERC20(_p.asset).balanceOf(address(this)) >=\\r\\n                (_p.attestedInitialBal + _p.debt)\\r\\n        );\\r\\n        _setAllowance(_p.user, address(_p.collateralToken), col);\\r\\n        if (_p.allGF) _tryRoundUp(_p.asset, _p.cData);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Called when a contributor remove a pool\\r\\n     * @param user : Contributor\\r\\n     * @param asset : Asset base\\r\\n     * @param unit : Unit contribution\\r\\n     * @param rId : Record Id\\r\\n     */\\r\\n    function cancel(\\r\\n        address user,\\r\\n        address asset,\\r\\n        uint unit,\\r\\n        uint rId\\r\\n    ) external onlyOwner hasAccess(user, rId) returns (bool) {\\r\\n        _setAllowance(user, asset, unit);\\r\\n        _removeUser(user, rId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns Safe-related data\\r\\n     */\\r\\n    function getData() external view returns (ViewData memory) {\\r\\n        return ViewData(userCount, aggregateFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns User-related data\\r\\n     * @param user : Contributor\\r\\n     * @param rId : Record Id\\r\\n     */\\r\\n    function getUserData(\\r\\n        address user,\\r\\n        uint rId\\r\\n    ) external view returns (ViewUserData memory) {\\r\\n        return ViewUserData(access[user][rId], collateralBalances[user][rId]);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    // function withdrawFee(\\r\\n    //     address recipient, \\r\\n    //     address asset\\r\\n    // ) \\r\\n    //     external \\r\\n    //     nonReentrant \\r\\n    //     onlyOwner\\r\\n    // {\\r\\n    //     uint fees = aggregateFee;\\r\\n    //     if(fees == 0) revert NoFeeToWithdraw();\\r\\n    //     if(asset == address(0)) revert TokenAddressIsZero();\\r\\n    //     aggregateFee = 0;\\r\\n    //     IERC20(asset).transfer(recipient, fees);\\r\\n\\r\\n\\r\\n    // }\\r\\n\\r\\n        // assert(asset != address(0) && user != address(0));\\r\\n        // Collateral memory col = collateralBalances[user][rId];\\r\\n        // uint primaryBal = col.balance.add(msg.value);\\r\\n        // if(calculatedCol <= primaryBal){\\r\\n        //     col.withdrawable = col.withdrawable.add(primaryBal.sub(calculatedCol));\\r\\n        // } else {\\r\\n        // uint agBalance = col.balance.add(msg.value).add(col.withdrawable);\\r\\n        // require(agBalance >= calculatedCol, \\\"Aggregate balances is insufficient\\\");\\r\\n        // col.withdrawable = agBalance.sub(calculatedCol);\\r\\n        // }\\r\\n        // col.balance = calculatedCol;\\r\\n        // collateralBalances[user][rId] = col;\\r\\n        // primaryBal = loan;\\r\\n        // if(fee > 0) {\\r\\n        // unchecked {\\r\\n        //     aggregateFee += fee;\\r\\n        // }\\r\\n        // if(loan > fee){\\r\\n        //     unchecked {\\r\\n        //     primaryBal -= fee;\\r\\n        //     }\\r\\n        // }\\r\\n\\r\\n        // }\\r\\n        // _setAllowance(user, asset, primaryBal);\\r\\n        // return loan;\\r\\n\\r\\n        // assert(IERC20(asset).balanceOf(address(this)) >= (attestedInitialBal + debt));\\r\\n        // Collateral memory col = collateralBalances[user][rId];\\r\\n        // if(isSwapped) {\\r\\n        // col = collateralBalances[defaulted][rId];\\r\\n        // delete collateralBalances[defaulted][rId];\\r\\n        // collateralBalances[user][rId] = col; \\r\\n        // _removeUser(defaulted, rId);\\r\\n        // _addUser(user, rId);\\r\\n\\r\\n        // }\\r\\n        // collateralBalances[user][rId] = Collateral(0, col.withdrawable.add(col.balance));\\r\\n        // if(allGF) { _tryRoundUp(asset, cData); }\\r\\n\\r\\n\\r\\n    // /**\\r\\n    //  *  @dev Withdraw Collateral.\\r\\n    //  * @param rId : Record Slot\\r\\n    //  */\\r\\n    // function withdrawCollateral(uint rId) \\r\\n    //     public \\r\\n    //     hasAccess(_msgSender(), rId)\\r\\n    //     nonReentrant\\r\\n    //     returns(bool) \\r\\n    // {\\r\\n    //     address caller = _msgSender();\\r\\n    //     Collateral memory col = collateralBalances[caller][rId];\\r\\n    //     uint balances = address(this).balance;\\r\\n    //     if(col.withdrawable == 0) revert ZeroWithdrawable();\\r\\n    //     if(col.balance == 0){\\r\\n    //     _removeUser(caller, rId);\\r\\n    //     delete collateralBalances[caller][rId];\\r\\n    //     } else {\\r\\n    //     collateralBalances[caller][rId].withdrawable = 0;\\r\\n    //     }\\r\\n    //     require(balances >= col.withdrawable, \\\"Balance Anomaly\\\");\\r\\n    //     payable(caller).transfer(col.withdrawable);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    //     /**\\r\\n    //  * @notice User can deposit collateral ahead of time\\r\\n    //  * @param amount msg.value\\r\\n    //  * @param rId : Record Slot\\r\\n    //  */\\r\\n    // function _depositCollateral(uint amount, uint rId) \\r\\n    //     internal\\r\\n    //     hasAccess(_msgSender(), rId)\\r\\n    // {\\r\\n    //     unchecked {\\r\\n    //     collateralBalances[_msgSender()][rId].withdrawable += amount;\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n\\r\\n\\r\\n// // import \\\"hardhat/console.sol\\\";\\r\\n// import { SafeMath } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\\\";\\r\\n// import { ReentrancyGuard } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\\\";\\r\\n// import { SafeCallERC20, IERC20 } from \\\"../../libraries/SafeCallERC20.sol\\\";\\r\\n// import { IBank } from \\\"../../apis/IBank.sol\\\";\\r\\n// import { Common } from \\\"../../apis/Common.sol\\\";\\r\\n// import { OnlyOwner } from \\\"../../abstracts/OnlyOwner.sol\\\";\\r\\n\\r\\n// contract Bank is IBank, OnlyOwner, ReentrancyGuard {\\r\\n//   using SafeMath for uint;\\r\\n\\r\\n//   // Number of contributors currently operating this safe\\r\\n//   uint private userCount;\\r\\n\\r\\n//   // Total fee generated from the contributors\\r\\n//   uint private aggregateFee;\\r\\n\\r\\n//   // Fee Receiver\\r\\n//   address public feeTo;\\r\\n\\r\\n//   // Collateral token\\r\\n//   IERC20 public collateralToken;\\r\\n\\r\\n//   // Mapping of unitId to addresses\\r\\n//   mapping (uint => address[]) private usersLists;\\r\\n\\r\\n//   // Mapping of user to unitId to access\\r\\n//   mapping (address => mapping(uint => User)) private access;\\r\\n\\r\\n//   // Mapping of users to unitId to Collateral\\r\\n//   mapping (address => mapping(uint => uint256)) private collateralBalances;\\r\\n\\r\\n//   ///@dev Only users with access role are permitted\\r\\n//   modifier hasAccess(address user, uint unitId) {\\r\\n//     if(!access[user][unitId]) revert AccessDenied();\\r\\n//     _;\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Initializes state variables.\\r\\n//    * OnlyOwner function.\\r\\n//    */\\r\\n//   constructor (\\r\\n//     address _ownershipManager, \\r\\n//     address _feeTo,\\r\\n//     IERC20 _collateralToken\\r\\n//   ) OnlyOwner(_ownershipManager)  {\\r\\n//     feeTo = _feeTo;\\r\\n//     collateralToken = _collateralToken;\\r\\n//   }\\r\\n\\r\\n//   receive() external payable {\\r\\n//     (bool s,) = ownershipManager.call{value: msg.value}('');\\r\\n//     require(s);\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Registers new user\\r\\n//    * @param user New user\\r\\n//    * @param unitId : Unit Id\\r\\n//    */\\r\\n//   function _addNewUser(address user, uint unitId, Users memory usr) private {\\r\\n//     access[user][unitId] = usr;\\r\\n//     usersLists[unitId].push(user);\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Implementation of IBank.addUp\\r\\n//    * See IBank.addUp\\r\\n//   */\\r\\n//   function addUp(address user, uint unitId) \\r\\n//     external\\r\\n//     onlyOwner\\r\\n//   {\\r\\n//     userCount ++;\\r\\n//     _addNewUser(user, unitId, Users(true, usersLists[unitId].length));\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Swap two addresses without incrementing userCount\\r\\n//   */\\r\\n//   function _swap(address oldUser, address newUser, uint unitId) \\r\\n//     internal\\r\\n//   {\\r\\n//     // _removeUser(oldUser, unitId);\\r\\n//     Users memory usr = access[oldUser][unitId];\\r\\n//     Users memory usr_new = access[newUser][unitId];\\r\\n//     if(usr_new.hasAccess) {\\r\\n//       access[oldUser][unitId] = usr_new;\\r\\n//       usersLists[unitId][usr_new.index] = oldUser;\\r\\n//     }\\r\\n//     access[newUser][unitId] = usr;\\r\\n//     usersLists[unitId][usr.index] = newUser;\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev UnLocks collateral balances\\r\\n//    * @param user Existing user\\r\\n//    * @param unitId : Unit Id\\r\\n//    */\\r\\n//   function _removeUser(address user, uint unitId) private {\\r\\n//     Users memory usr = access[user][unitId];\\r\\n//     if(usr.hasAccess) {\\r\\n//       access[user][unitId] = Users(false, 0);\\r\\n//       usersLists[unitId][usr.index] = address(0);\\r\\n//     }\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Approve spender contributor 'to' to spend from contract's balance\\r\\n//    * @param to : Contributor\\r\\n//    * @param asset : Currency in use\\r\\n//    * @param amount : Value\\r\\n//    * @notice Consideration is not given to the previous allowances given to users.\\r\\n//    *          Users are expected to withdraw allowances immediately they complete \\r\\n//    *          related transactions such as 'getFinance'.\\r\\n//    */\\r\\n//   function _setAllowance(\\r\\n//     address to, \\r\\n//     IERC20 asset, \\r\\n//     uint256 amount\\r\\n//   ) \\r\\n//     private \\r\\n//   {\\r\\n//     IERC20(asset).approve(to, amount);\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Complete a round if all the contributors have been financed \\r\\n//    * @param asset : Base asset used for contribution.\\r\\n//    * @param unitId : Unit Id or pool Id\\r\\n//    */\\r\\n//   function _tryRoundUp(IERC20 asset, uint unitId) internal {\\r\\n//     uint erc20Balances = IERC20(asset).balanceOf(address(this));\\r\\n//     uint fees = aggregateFee;\\r\\n//     if(erc20Balances > 0) {\\r\\n//       if(erc20Balances > fees && fees > 0) {\\r\\n//         erc20Balances -= fees;\\r\\n//         aggregateFee = 0;\\r\\n//         if(!IERC20(asset).transfer(feeTo, fees)) revert AssetTransferFailed();\\r\\n//       }\\r\\n//       address[] memory users = usersLists[unitId];\\r\\n//       if(erc20Balances > 0) {\\r\\n//         fees = erc20Balances.div(users.length); // Reusing the fee memory slot\\r\\n//         for(uint i = 0; i < users.length; i++) {\\r\\n//           address to = users[i].id;\\r\\n//           _setAllowance(to, asset, fees);\\r\\n//         }\\r\\n//       }\\r\\n//     }\\r\\n//     userCount = 0;\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Get Finance - We send USD to user and accept collateral.\\r\\n//    * @param user : Beneficiary.\\r\\n//    * @param loan : Amount to receive as loan.\\r\\n//    * @param asset : base asset\\r\\n//    * @param fee : Fee collacted\\r\\n//    * @param calculatedCol : Collateral amount user is expected to deposit\\r\\n//    * @param unitId : Unit Id\\r\\n//    */\\r\\n//   function getFinance(\\r\\n//     address oldUser, \\r\\n//     IERC20 asset, \\r\\n//     uint256 loan, \\r\\n//     uint fee, \\r\\n//     uint256 calculatedCol,\\r\\n//     uint unitId,\\r\\n//     bool swap,\\r\\n//     address newUser\\r\\n//   ) \\r\\n//     external \\r\\n//     onlyOwner\\r\\n//     returns(uint) \\r\\n//   {\\r\\n//     assert(address(asset) != address(0) && user != address(0));\\r\\n//     address user = oldUser;\\r\\n//     if(swap) {\\r\\n//       user = newUser;\\r\\n//       if(oldUser != newUser) _swap(oldUser, newUser, unitId);\\r\\n//     };\\r\\n//     IERC20 token = collateralToken;\\r\\n//     collateralBalances[user][unitId] = calculatedCol;\\r\\n//     uint loanable = loan;\\r\\n//     if(fee > 0) {\\r\\n//       unchecked {\\r\\n//         aggregateFee += fee;\\r\\n//       }\\r\\n//       if(loan > fee){\\r\\n//         unchecked {\\r\\n//           loanable -= fee;\\r\\n//         }\\r\\n//       }\\r\\n\\r\\n//     }\\r\\n//     _setAllowance(user, asset, loanable);\\r\\n//     return loan;\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Payback loan\\r\\n//    * @param user : User. Not msg.sender\\r\\n//    * @param asset : Base asset in use\\r\\n//    * @param debt : amount owe as debt\\r\\n//    * @param attestedInitialBal : Initial balance that was recorded before execution get to this point\\r\\n//    * @param allGF : If all has get finance or not\\r\\n//    * @param cData : Contributors array\\r\\n//    * @param isSwapped : If the expected contributor defaults, and they're being liquidated, this flag becomes true\\r\\n//    * @param defaulted : Defaulted account\\r\\n//    * @param unitId : Unit Id\\r\\n//    */\\r\\n//   function payback(\\r\\n//     address user, \\r\\n//     IERC20 asset, \\r\\n//     uint256 debt,\\r\\n//     uint256 attestedInitialBal,\\r\\n//     bool allGF, \\r\\n//     bool isSwapped,\\r\\n//     address defaulted,\\r\\n//     uint unitId\\r\\n//   ) external onlyOwner{\\r\\n//     uint col = collateralBalances[user][unitId];\\r\\n//     if(isSwapped) {\\r\\n//       col = collateralBalances[defaulted][unitId];\\r\\n//       collateralBalances[defaulted][unitId] = 0;\\r\\n//       _swap(defaulted, user, unitId);\\r\\n//     }\\r\\n//     assert(IERC20(asset).balanceOf(address(this)) >= (attestedInitialBal + debt));\\r\\n//     _setAllowance(user, collateralToken, col);\\r\\n//     if(allGF) _tryRoundUp(asset, unitId);\\r\\n//   }\\r\\n\\r\\n//   function cancel(\\r\\n//     address user, \\r\\n//     IERC20 asset, \\r\\n//     uint unit,\\r\\n//     uint unitId\\r\\n//   ) external onlyOwner  {\\r\\n//     _setAllowance(user, asset, unit);\\r\\n//     _removeUser(user, unitId);\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//    * @dev Alternate way of withdrawing collateral balance if user forget to do so before this safe\\r\\n//    * is transfered to a new set of contributors. It is advisable to withdraw collaterals before an epoch is \\r\\n//    * completed.\\r\\n//    * @param poolId : Poolid or unitId\\r\\n//    * @param asset : Asset that was in the pool \\r\\n//    */\\r\\n//   function withdrawCollateralFromPool(uint poolId, IERC20 asset) public nonReentrant returns(bool) {\\r\\n//     uint colBal = collateralBalances[_msgSender()][poolId];\\r\\n//     require(colBal > 0, \\\"Zero\\\");\\r\\n//     if(address(asset) == address(0)) revert InvalidIERC20Contract();\\r\\n//     collateralBalances[user][poolId] = 0;\\r\\n//     if(IERC20(collateralToken).balanceOf(address(this)) < colBal) revert InsufficientContractBalance();\\r\\n//     _setAllowance(_msgSender(), asset, colBal);\\r\\n//     return true;\\r\\n//   }\\r\\n\\r\\n//   function getData() external view returns(ViewData memory) {\\r\\n//     return ViewData(userCount, aggregateFee);\\r\\n//   }\\r\\n\\r\\n//   function getUserData(address user, uint unitId) external view returns(ViewUserData memory) {\\r\\n//     return ViewUserData(\\r\\n//       access[user][unitId],\\r\\n//       collateralBalances[user][unitId]\\r\\n//     );\\r\\n//   }\\r\\n\\r\\n// }\\r\\n\",\"keccak256\":\"0xa64fc8d1688c6826186c506a527fd0a4ac56f9ad2c224aa37a4abfbb67e9a238\",\"license\":\"MIT\"},\"contracts/implementations/strategies/BankFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IBankFactory } from \\\"../../apis/IBankFactory.sol\\\";\\r\\nimport { Bank } from \\\"./Bank.sol\\\";\\r\\nimport { OnlyOwner, IOwnerShip } from \\\"../../abstracts/OnlyOwner.sol\\\";\\r\\n\\r\\n/**@title SmartBankAdmin: A standalone contract that manages bank creation, \\r\\n   deletion, read and write data.\\r\\n\\r\\n   Author: Simplifinance\\r\\n */\\r\\ncontract BankFactory is IBankFactory, OnlyOwner {\\r\\n  // using Clones for address;\\r\\n\\r\\n  // Bank count \\r\\n  uint public totalBanks;\\r\\n\\r\\n  address public feeTo;\\r\\n\\r\\n/**\\r\\n * @dev List of Strategies and their keys \\r\\n */\\r\\n  // BankData[] private strategies;\\r\\n\\r\\n /**\\r\\n * @dev Mapping of addresses to strategies.\\r\\n * Also used as reverse map of strategies to status.\\r\\n */\\r\\n  mapping(uint256 => address) private bankMap;\\r\\n\\r\\n  constructor (IOwnerShip _ownershipManager, address _feeTo) OnlyOwner(_ownershipManager) {\\r\\n    feeTo = _feeTo;\\r\\n  }\\r\\n\\r\\n  receive() \\r\\n    external \\r\\n    payable \\r\\n  {\\r\\n    revert();\\r\\n  }\\r\\n  \\r\\n  /**@dev Return if account owns a bank or not\\r\\n  */\\r\\n  function _hasBank(\\r\\n    uint256 unit\\r\\n  ) \\r\\n    internal \\r\\n    view \\r\\n    returns (bool) \\r\\n  {\\r\\n    return bankMap[unit] != address(0);\\r\\n  }\\r\\n\\r\\n  // Returns smartBank for 'user'\\r\\n  function _getBank(\\r\\n    uint256 unit\\r\\n  ) \\r\\n    internal \\r\\n    view returns(address) \\r\\n  { \\r\\n    return bankMap[unit];\\r\\n  }\\r\\n  \\r\\n  // function _getBank(\\r\\n  //   address user\\r\\n  // ) \\r\\n  //   internal \\r\\n  //   view returns(address) \\r\\n  // { \\r\\n  //   return bankMap[user];\\r\\n  // }\\r\\n  \\r\\n  /**@dev Create a new bank.\\r\\n   * @notice 'unit' should not own a bank before now.\\r\\n   *          only address with owner permission can call.\\r\\n  */\\r\\n  function createBank(\\r\\n    uint256 unit\\r\\n  )\\r\\n    external\\r\\n    onlyOwner\\r\\n    returns(address _bank) \\r\\n  {\\r\\n    if(!_hasBank(unit)){\\r\\n      _bank = _createBank(unit);\\r\\n    } else {\\r\\n      _bank = _getBank(unit);\\r\\n    }\\r\\n    return _bank;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @param unit : Amount\\r\\n   * \\r\\n   * @notice Even if user is trying to rekey or upgrade smartbank, same amount of fee is required\\r\\n   * for successful upgrade.\\r\\n   */\\r\\n  function _createBank(\\r\\n    uint256 unit\\r\\n  ) \\r\\n    private \\r\\n    returns(address bank) \\r\\n  {\\r\\n    totalBanks ++;\\r\\n    // address ssi = instance;\\r\\n    // bank = ssi.cloneDeterministic(keccak256(abi.encodePacked(totalBanks, caller)));\\r\\n    bank = address(new Bank(ownershipManager, feeTo));\\r\\n    _updateBank(unit, bank);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Update storage with the new Bank instance : {internal}\\r\\n   * @param unit : Unit amount \\r\\n   * @param bank : New Bank address\\r\\n   */\\r\\n  function _updateBank(\\r\\n    uint256 unit, \\r\\n    address bank\\r\\n  ) \\r\\n    private \\r\\n  {\\r\\n    bankMap[unit] = bank;\\r\\n  }\\r\\n\\r\\n  /// Returns then bank for 'unit'\\r\\n  /// @param unit : Unit amount\\r\\n  function getBank(\\r\\n    uint unit\\r\\n  ) \\r\\n    external \\r\\n    view \\r\\n    returns(address) \\r\\n  { \\r\\n    return _getBank(unit);\\r\\n  }\\r\\n\\r\\n  function setFeeTp(address newFeeTo) public onlyOwner {\\r\\n    feeTo = newFeeTo;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x09462e590eb5ded04e47902c647d5f6b471f09bd3b841998a4fddfe07ad27ddb\",\"license\":\"MIT\"},\"contracts/libraries/SafeCallERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nlibrary SafeCallERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    unchecked {\\r\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n      uint256 newAllowance = oldAllowance - value;\\r\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** Imported from Openzeppelin\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data);\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation failed\\\");\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0x1ebfd9e7dce674579aac96b985ccd3ff43de834337082071cf3691c767d2c5b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516119fb3803806119fb83398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b61193a806100c16000396000f3fe6080604052600436106100745760003560e01c8063bf74912c1161004e578063bf74912c14610110578063c3b95b1b14610132578063e487862714610168578063f01cc0a61461018857600080fd5b8063017e7e581461008357806361737d62146100c0578063b88a3915146100f057600080fd5b3661007e57600080fd5b600080fd5b34801561008f57600080fd5b506002546100a3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100cc57600080fd5b506100e06100db366004610527565b6101ac565b60405190151581526020016100b7565b3480156100fc57600080fd5b506000546100a3906001600160a01b031681565b34801561011c57600080fd5b5061013061012b366004610527565b610292565b005b34801561013e57600080fd5b506100a361014d366004610550565b6000908152600360205260409020546001600160a01b031690565b34801561017457600080fd5b506100a3610183366004610550565b610374565b34801561019457600080fd5b5061019e60015481565b6040519081526020016100b7565b600080546001600160a01b0316806101d757604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610569565b61026c576040516315ed864b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038516179055600191505b50919050565b6000546001600160a01b0316806102bc57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610569565b610351576040516315ed864b60e21b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03168061039f57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190610569565b610434576040516315ed864b60e21b815260040160405180910390fd5b6000838152600360205260409020546001600160a01b03166104605761045983610480565b915061028c565b6000838152600360205260409020546001600160a01b03165b9392505050565b60018054600091826104918361058b565b90915550506000546002546040516001600160a01b0392831692909116906104b89061051a565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156104eb573d6000803e3d6000fd5b50600083815260036020526040902080546001600160a01b0319166001600160a01b0383161790559050919050565b611352806105b383390190565b60006020828403121561053957600080fd5b81356001600160a01b038116811461047957600080fd5b60006020828403121561056257600080fd5b5035919050565b60006020828403121561057b57600080fd5b8151801515811461047957600080fd5b6000600182016105ab57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161135238038061135283398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b03199182161790915560018055600480549290931691161790556100b6565b6001600160a01b038116811461007957600080fd5b50565b6000806040838503121561008f57600080fd5b825161009a81610064565b60208401519092506100ab81610064565b809150509250929050565b61128d806100c56000396000f3fe60806040526004361061008a5760003560e01c806361737d621161005957806361737d62146101eb578063b88a39151461020b578063bb16369f1461022b578063d4e869441461024b578063fae34f7f1461027957600080fd5b8063017e7e58146100f65780633bc5de301461013357806341a8d7ce1461017e5780634cd01af1146101ae57600080fd5b366100f1576004546040516000916001600160a01b03169034908381818185875af1925050503d80600081146100dc576040519150601f19603f3d011682016040523d82523d6000602084013e6100e1565b606091505b50509050806100ef57600080fd5b005b600080fd5b34801561010257600080fd5b50600454610116906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013f57600080fd5b5060408051808201825260008082526020918201528151808301835260025480825260035491830191825283519081529051918101919091520161012a565b34801561018a57600080fd5b5061019e610199366004610df8565b610299565b604051901515815260200161012a565b3480156101ba57600080fd5b506101ce6101c9366004610df8565b610376565b60408051825115158152602092830151928101929092520161012a565b3480156101f757600080fd5b5061019e610206366004610e24565b6103d4565b34801561021757600080fd5b50600054610116906001600160a01b031681565b34801561023757600080fd5b5061019e610246366004610e41565b6104b8565b34801561025757600080fd5b5061026b610266366004610e87565b6105e3565b60405190815260200161012a565b34801561028557600080fd5b5061019e610294366004611088565b610771565b600080546001600160a01b0316806102c457604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c9190611180565b610359576040516315ed864b60e21b815260040160405180910390fd5b60028054600101905561036c8484610a31565b5060019392505050565b60408051808201825260008082526020918201819052825180840184526001600160a01b0386168083526005845284832086845284528483205460ff1615158252825260068352838220858352835292902054908201525b92915050565b600080546001600160a01b0316806103ff57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104779190611180565b610494576040516315ed864b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03851617905550600192915050565b600080546001600160a01b0316806104e357604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b9190611180565b610578576040516315ed864b60e21b815260040160405180910390fd5b6001600160a01b03861660009081526005602090815260408083208684529091529020548690849060ff166105c05760405163442421a560e11b815260040160405180910390fd5b6105cb888888610a95565b6105d58886610b9b565b506001979650505050505050565b6001600160a01b03861660009081526005602090815260408083208484529091528120548790839060ff1661062b5760405163442421a560e11b815260040160405180910390fd5b6000546001600160a01b03168061065557604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190611180565b6106ea576040516315ed864b60e21b815260040160405180910390fd5b6001600160a01b0389161580159061070a57506001600160a01b038a1615155b6107165761071661119d565b6001600160a01b038a166000908152600660209081526040808320888452909152902086905587871561075757600380548901905587811115610757578790035b6107628b8b83610a95565b50969998505050505050505050565b600080546001600160a01b03168061079c57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108149190611180565b610831576040516315ed864b60e21b815260040160405180910390fd5b8260c00151610841578251610847565b8260e001515b6101008401516001600160a01b038216600090815260056020908152604080832084845290915290205460ff166108915760405163442421a560e11b815260040160405180910390fd5b84516001600160a01b03166000908152600660209081526040808320610100890151845290915290205460c086015115610926575060e0850180516001600160a01b0390811660009081526006602081815260408084206101008c018051865290835281852054875190961685529282528084208351855290915282209190915591519151909161092191610b9b565b610939565b6109398660000151876101000151610b9b565b85516001600160a01b031660009081526006602090815260408083206101008a0151845290915280822091909155860151606087015161097991906111c9565b60208701516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e791906111dc565b10156109f5576109f561119d565b610a09866000015187610120015183610a95565b856080015115610a2557610a2586602001518760a00151610c19565b50600195945050505050565b6001600160a01b038216600090815260056020908152604080832084845290915290205460ff1615610a6557610a6561119d565b6001600160a01b03909116600090815260056020908152604080832093835292905220805460ff19166001179055565b604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0991906111dc565b90506001600160a01b03831663095ea7b385610b258585610db1565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190611180565b5050505050565b6001600160a01b038216600090815260056020908152604080832084845290915290205460ff16610bce57610bce61119d565b60025415610bec5760028054906000610be6836111f5565b91905055505b6001600160a01b03909116600090815260056020908152604080832093835292905220805460ff19169055565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8491906111dc565b6003549091508115610da6578082118015610c9f5750600081115b15610d4d57610cae818361120c565b60006003556004805460405163a9059cbb60e01b81526001600160a01b0391821692810192909252602482018490529193509085169063a9059cbb906044016020604051808303816000875af1158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d309190611180565b610d4d57604051634c9b841960e01b815260040160405180910390fd5b8115610da6578251610d60908390610dc4565b905060005b8351811015610da4576000848281518110610d8257610d8261121f565b602002602001015160c001519050610d9b818785610a95565b50600101610d65565b505b505060006002555050565b6000610dbd82846111c9565b9392505050565b6000610dbd8284611235565b6001600160a01b0381168114610de557600080fd5b50565b8035610df381610dd0565b919050565b60008060408385031215610e0b57600080fd5b8235610e1681610dd0565b946020939093013593505050565b600060208284031215610e3657600080fd5b8135610dbd81610dd0565b60008060008060808587031215610e5757600080fd5b8435610e6281610dd0565b93506020850135610e7281610dd0565b93969395505050506040820135916060013590565b60008060008060008060c08789031215610ea057600080fd5b8635610eab81610dd0565b95506020870135610ebb81610dd0565b95989597505050506040840135936060810135936080820135935060a0909101359150565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610f1a57610f1a610ee0565b60405290565b604051610140810167ffffffffffffffff81118282101715610f1a57610f1a610ee0565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f6d57610f6d610ee0565b604052919050565b8015158114610de557600080fd5b8035610df381610f75565b600082601f830112610f9f57600080fd5b8135602067ffffffffffffffff821115610fbb57610fbb610ee0565b610fc9818360051b01610f44565b8281526101209283028501820192828201919087851115610fe957600080fd5b8387015b8581101561107b5781818a0312156110055760008081fd5b61100d610ef6565b81358152858201358682015260408083013590820152606080830135908201526080808301359082015260a0808301359082015260c061104e818401610de8565b9082015260e061105f838201610f83565b9082015261010082810135908201528452928401928101610fed565b5090979650505050505050565b60006020828403121561109a57600080fd5b813567ffffffffffffffff808211156110b257600080fd5b9083019061014082860312156110c757600080fd5b6110cf610f20565b6110d883610de8565b81526110e660208401610de8565b6020820152604083013560408201526060830135606082015261110b60808401610f83565b608082015260a08301358281111561112257600080fd5b61112e87828601610f8e565b60a08301525061114060c08401610f83565b60c082015261115160e08401610de8565b60e082015261010083810135908201526101209150611171828401610de8565b91810191909152949350505050565b60006020828403121561119257600080fd5b8151610dbd81610f75565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156103ce576103ce6111b3565b6000602082840312156111ee57600080fd5b5051919050565b600081611204576112046111b3565b506000190190565b818103818111156103ce576103ce6111b3565b634e487b7160e01b600052603260045260246000fd5b60008261125257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ae96452f7940e9e57e1236891dbe7aaa6db30de846e3283a2c30f647dfdda3e064736f6c63430008180033a2646970667358221220bc1a65e8dae337eab7dae5f8c04d7637cdcb13c4f6b0ded66bd3b701b1223faf64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063bf74912c1161004e578063bf74912c14610110578063c3b95b1b14610132578063e487862714610168578063f01cc0a61461018857600080fd5b8063017e7e581461008357806361737d62146100c0578063b88a3915146100f057600080fd5b3661007e57600080fd5b600080fd5b34801561008f57600080fd5b506002546100a3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100cc57600080fd5b506100e06100db366004610527565b6101ac565b60405190151581526020016100b7565b3480156100fc57600080fd5b506000546100a3906001600160a01b031681565b34801561011c57600080fd5b5061013061012b366004610527565b610292565b005b34801561013e57600080fd5b506100a361014d366004610550565b6000908152600360205260409020546001600160a01b031690565b34801561017457600080fd5b506100a3610183366004610550565b610374565b34801561019457600080fd5b5061019e60015481565b6040519081526020016100b7565b600080546001600160a01b0316806101d757604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610569565b61026c576040516315ed864b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038516179055600191505b50919050565b6000546001600160a01b0316806102bc57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610569565b610351576040516315ed864b60e21b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03168061039f57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190610569565b610434576040516315ed864b60e21b815260040160405180910390fd5b6000838152600360205260409020546001600160a01b03166104605761045983610480565b915061028c565b6000838152600360205260409020546001600160a01b03165b9392505050565b60018054600091826104918361058b565b90915550506000546002546040516001600160a01b0392831692909116906104b89061051a565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156104eb573d6000803e3d6000fd5b50600083815260036020526040902080546001600160a01b0319166001600160a01b0383161790559050919050565b611352806105b383390190565b60006020828403121561053957600080fd5b81356001600160a01b038116811461047957600080fd5b60006020828403121561056257600080fd5b5035919050565b60006020828403121561057b57600080fd5b8151801515811461047957600080fd5b6000600182016105ab57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161135238038061135283398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b03199182161790915560018055600480549290931691161790556100b6565b6001600160a01b038116811461007957600080fd5b50565b6000806040838503121561008f57600080fd5b825161009a81610064565b60208401519092506100ab81610064565b809150509250929050565b61128d806100c56000396000f3fe60806040526004361061008a5760003560e01c806361737d621161005957806361737d62146101eb578063b88a39151461020b578063bb16369f1461022b578063d4e869441461024b578063fae34f7f1461027957600080fd5b8063017e7e58146100f65780633bc5de301461013357806341a8d7ce1461017e5780634cd01af1146101ae57600080fd5b366100f1576004546040516000916001600160a01b03169034908381818185875af1925050503d80600081146100dc576040519150601f19603f3d011682016040523d82523d6000602084013e6100e1565b606091505b50509050806100ef57600080fd5b005b600080fd5b34801561010257600080fd5b50600454610116906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013f57600080fd5b5060408051808201825260008082526020918201528151808301835260025480825260035491830191825283519081529051918101919091520161012a565b34801561018a57600080fd5b5061019e610199366004610df8565b610299565b604051901515815260200161012a565b3480156101ba57600080fd5b506101ce6101c9366004610df8565b610376565b60408051825115158152602092830151928101929092520161012a565b3480156101f757600080fd5b5061019e610206366004610e24565b6103d4565b34801561021757600080fd5b50600054610116906001600160a01b031681565b34801561023757600080fd5b5061019e610246366004610e41565b6104b8565b34801561025757600080fd5b5061026b610266366004610e87565b6105e3565b60405190815260200161012a565b34801561028557600080fd5b5061019e610294366004611088565b610771565b600080546001600160a01b0316806102c457604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c9190611180565b610359576040516315ed864b60e21b815260040160405180910390fd5b60028054600101905561036c8484610a31565b5060019392505050565b60408051808201825260008082526020918201819052825180840184526001600160a01b0386168083526005845284832086845284528483205460ff1615158252825260068352838220858352835292902054908201525b92915050565b600080546001600160a01b0316806103ff57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104779190611180565b610494576040516315ed864b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03851617905550600192915050565b600080546001600160a01b0316806104e357604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b9190611180565b610578576040516315ed864b60e21b815260040160405180910390fd5b6001600160a01b03861660009081526005602090815260408083208684529091529020548690849060ff166105c05760405163442421a560e11b815260040160405180910390fd5b6105cb888888610a95565b6105d58886610b9b565b506001979650505050505050565b6001600160a01b03861660009081526005602090815260408083208484529091528120548790839060ff1661062b5760405163442421a560e11b815260040160405180910390fd5b6000546001600160a01b03168061065557604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190611180565b6106ea576040516315ed864b60e21b815260040160405180910390fd5b6001600160a01b0389161580159061070a57506001600160a01b038a1615155b6107165761071661119d565b6001600160a01b038a166000908152600660209081526040808320888452909152902086905587871561075757600380548901905587811115610757578790035b6107628b8b83610a95565b50969998505050505050505050565b600080546001600160a01b03168061079c57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108149190611180565b610831576040516315ed864b60e21b815260040160405180910390fd5b8260c00151610841578251610847565b8260e001515b6101008401516001600160a01b038216600090815260056020908152604080832084845290915290205460ff166108915760405163442421a560e11b815260040160405180910390fd5b84516001600160a01b03166000908152600660209081526040808320610100890151845290915290205460c086015115610926575060e0850180516001600160a01b0390811660009081526006602081815260408084206101008c018051865290835281852054875190961685529282528084208351855290915282209190915591519151909161092191610b9b565b610939565b6109398660000151876101000151610b9b565b85516001600160a01b031660009081526006602090815260408083206101008a0151845290915280822091909155860151606087015161097991906111c9565b60208701516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e791906111dc565b10156109f5576109f561119d565b610a09866000015187610120015183610a95565b856080015115610a2557610a2586602001518760a00151610c19565b50600195945050505050565b6001600160a01b038216600090815260056020908152604080832084845290915290205460ff1615610a6557610a6561119d565b6001600160a01b03909116600090815260056020908152604080832093835292905220805460ff19166001179055565b604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0991906111dc565b90506001600160a01b03831663095ea7b385610b258585610db1565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190611180565b5050505050565b6001600160a01b038216600090815260056020908152604080832084845290915290205460ff16610bce57610bce61119d565b60025415610bec5760028054906000610be6836111f5565b91905055505b6001600160a01b03909116600090815260056020908152604080832093835292905220805460ff19169055565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8491906111dc565b6003549091508115610da6578082118015610c9f5750600081115b15610d4d57610cae818361120c565b60006003556004805460405163a9059cbb60e01b81526001600160a01b0391821692810192909252602482018490529193509085169063a9059cbb906044016020604051808303816000875af1158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d309190611180565b610d4d57604051634c9b841960e01b815260040160405180910390fd5b8115610da6578251610d60908390610dc4565b905060005b8351811015610da4576000848281518110610d8257610d8261121f565b602002602001015160c001519050610d9b818785610a95565b50600101610d65565b505b505060006002555050565b6000610dbd82846111c9565b9392505050565b6000610dbd8284611235565b6001600160a01b0381168114610de557600080fd5b50565b8035610df381610dd0565b919050565b60008060408385031215610e0b57600080fd5b8235610e1681610dd0565b946020939093013593505050565b600060208284031215610e3657600080fd5b8135610dbd81610dd0565b60008060008060808587031215610e5757600080fd5b8435610e6281610dd0565b93506020850135610e7281610dd0565b93969395505050506040820135916060013590565b60008060008060008060c08789031215610ea057600080fd5b8635610eab81610dd0565b95506020870135610ebb81610dd0565b95989597505050506040840135936060810135936080820135935060a0909101359150565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610f1a57610f1a610ee0565b60405290565b604051610140810167ffffffffffffffff81118282101715610f1a57610f1a610ee0565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f6d57610f6d610ee0565b604052919050565b8015158114610de557600080fd5b8035610df381610f75565b600082601f830112610f9f57600080fd5b8135602067ffffffffffffffff821115610fbb57610fbb610ee0565b610fc9818360051b01610f44565b8281526101209283028501820192828201919087851115610fe957600080fd5b8387015b8581101561107b5781818a0312156110055760008081fd5b61100d610ef6565b81358152858201358682015260408083013590820152606080830135908201526080808301359082015260a0808301359082015260c061104e818401610de8565b9082015260e061105f838201610f83565b9082015261010082810135908201528452928401928101610fed565b5090979650505050505050565b60006020828403121561109a57600080fd5b813567ffffffffffffffff808211156110b257600080fd5b9083019061014082860312156110c757600080fd5b6110cf610f20565b6110d883610de8565b81526110e660208401610de8565b6020820152604083013560408201526060830135606082015261110b60808401610f83565b608082015260a08301358281111561112257600080fd5b61112e87828601610f8e565b60a08301525061114060c08401610f83565b60c082015261115160e08401610de8565b60e082015261010083810135908201526101209150611171828401610de8565b91810191909152949350505050565b60006020828403121561119257600080fd5b8151610dbd81610f75565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156103ce576103ce6111b3565b6000602082840312156111ee57600080fd5b5051919050565b600081611204576112046111b3565b506000190190565b818103818111156103ce576103ce6111b3565b634e487b7160e01b600052603260045260246000fd5b60008261125257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ae96452f7940e9e57e1236891dbe7aaa6db30de846e3283a2c30f647dfdda3e064736f6c63430008180033a2646970667358221220bc1a65e8dae337eab7dae5f8c04d7637cdcb13c4f6b0ded66bd3b701b1223faf64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBank(uint256)": {
        "details": "Create a new bank."
      },
      "getBank(uint256)": {
        "params": {
          "unit": ": Unit amount"
        }
      },
      "setOwnershipManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      }
    },
    "stateVariables": {
      "bankMap": {
        "details": "Mapping of addresses to strategies. Also used as reverse map of strategies to status."
      }
    },
    "title": "SmartBankAdmin: A standalone contract that manages bank creation,  deletion, read and write data. Author: Simplifinance",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBank(uint256)": {
        "notice": "'unit' should not own a bank before now.          only address with owner permission can call."
      },
      "getBank(uint256)": {
        "notice": "Returns then bank for 'unit'"
      },
      "setOwnershipManager(address)": {
        "notice": "Set Ownership manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 770,
        "contract": "contracts/implementations/strategies/BankFactory.sol:BankFactory",
        "label": "ownershipManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IOwnerShip)1485"
      },
      {
        "astId": 2318,
        "contract": "contracts/implementations/strategies/BankFactory.sol:BankFactory",
        "label": "totalBanks",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2320,
        "contract": "contracts/implementations/strategies/BankFactory.sol:BankFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2325,
        "contract": "contracts/implementations/strategies/BankFactory.sol:BankFactory",
        "label": "bankMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IOwnerShip)1485": {
        "encoding": "inplace",
        "label": "contract IOwnerShip",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}