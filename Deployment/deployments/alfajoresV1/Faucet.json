{
  "address": "0xa8ac853Ec5Ba50eDB0617116b734578Fac6Fb214",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "_roleManager",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_colTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errorMsg",
          "type": "string"
        }
      ],
      "name": "ErrorOccurred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTestTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sendTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmt",
          "type": "uint256"
        }
      ],
      "name": "setBaseAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "setBaseToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmt",
          "type": "uint256"
        }
      ],
      "name": "setCollateralAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "setCollateralToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "testers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "testersMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastColDispensed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBaseDispensed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x858c1504dbca1419f64c5eca5c83de87df6303b91b10cd0a49782c1af0465815",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xa8ac853Ec5Ba50eDB0617116b734578Fac6Fb214",
    "transactionIndex": 1,
    "gasUsed": "828018",
    "logsBloom": "0x
    "blockHash": "0xa43add37d9570cdaea1925f68e2c288dc956e5aec4bb1993f4fa045aa62d7597",
    "transactionHash": "0x858c1504dbca1419f64c5eca5c83de87df6303b91b10cd0a49782c1af0465815",
    "logs": [],
    "blockNumber": 44660461,
    "cumulativeGasUsed": "871776",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x79dF2FCc7DfDdc0C85Cc1f82B1f631b4b9D994B0",
    "0x962289B0F4f0Aa00d84D7a55DAFC68F28C54fAC0",
    "0x476ED9B38aB286f6ce5DD70830067e645c754094",
    "1000000000000000000000",
    "3000000000000000000000"
  ],
  "numDeployments": 7,
  "solcInputHash": "3d10f51210d4c37defce26367a2891d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"_roleManager\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_colTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errorMsg\",\"type\":\"string\"}],\"name\":\"ErrorOccurred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTestTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"}],\"name\":\"mintBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"setBaseAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setBaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"setCollateralAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setCollateralToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"testersMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastColDispensed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBaseDispensed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mintBatch(address[])\":{\"details\":\"Admin account (s) can send test tokens to multiple users.\",\"params\":{\"tos\":\": A list of recipients\"}},\"setBaseAmount(uint256)\":{\"params\":{\"newAmt\":\": New token contract\"}},\"setBaseToken(address)\":{\"params\":{\"newToken\":\": New token contract\"}},\"setCollateralAmount(uint256)\":{\"params\":{\"newAmt\":\": New token contract\"}},\"setCollateralToken(address)\":{\"params\":{\"newToken\":\": New token contract\"}},\"setRoleManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintBatch(address[])\":{\"notice\":\"Sender must have role permission\"},\"setBaseAmount(uint256)\":{\"notice\":\"Set base amount\"},\"setBaseToken(address)\":{\"notice\":\"Set base token\"},\"setCollateralAmount(uint256)\":{\"notice\":\"Set Collateral amount\"},\"setCollateralToken(address)\":{\"notice\":\"Set Collateral token\"},\"setRoleManager(address)\":{\"notice\":\"Set Role manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standalone/tokens/test/Faucet.sol\":\"Faucet\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/apis/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from './IERC20.sol';\\r\\n\\r\\ninterface Common {\\r\\n    event PoolCreated(Pool);\\r\\n    event NewContributorAdded(Pool);\\r\\n    event GetFinanced(Pool);\\r\\n    event Payback(Pool);\\r\\n    event Liquidated(Pool);\\r\\n    event Cancellation(uint unit);\\r\\n    event PoolEdited(Pool);\\r\\n\\r\\n    enum Stage {\\r\\n        JOIN, \\r\\n        GET, \\r\\n        PAYBACK, \\r\\n        CANCELED,\\r\\n        ENDED\\r\\n    }\\r\\n\\r\\n    enum Phase { BETA, ALPHA, MAINNET }\\r\\n\\r\\n    enum Status { AVAILABLE, TAKEN }\\r\\n\\r\\n    enum Branch { CURRENT, RECORD }\\r\\n\\r\\n    enum Router { NONE, PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n    struct Pool {\\r\\n        Low low;\\r\\n        Big big;\\r\\n        Addresses addrs;\\r\\n        Router router;\\r\\n        Stage stage;\\r\\n        Status status;\\r\\n    }\\r\\n\\r\\n    struct Low {\\r\\n        uint8 maxQuorum;\\r\\n        uint8 selector;\\r\\n        uint24 colCoverage;\\r\\n        uint32 duration;\\r\\n        uint8 allGh;\\r\\n        uint8 userCount;\\r\\n    }\\r\\n\\r\\n    struct Big {\\r\\n        uint256 unit;\\r\\n        uint256 currentPool;\\r\\n        uint96 recordId;\\r\\n        uint96 unitId;\\r\\n    }\\r\\n\\r\\n    struct Point {\\r\\n        uint contributor;\\r\\n        uint creator;\\r\\n        uint referrals;\\r\\n        address user;\\r\\n        Phase phase;\\r\\n    }\\r\\n\\r\\n    struct PointsReturnValue {\\r\\n        string key;\\r\\n        Point[] value;\\r\\n    }\\r\\n\\r\\n    struct Interest {\\r\\n        uint fullInterest;\\r\\n        uint intPerSec;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Structured types - Address\\r\\n     * @param asset : Contract address of the asset in use.\\r\\n     * @param lastPaid: Last contributor who got finance.\\r\\n     * @param safe : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n     * @param admin : Pool creator.\\r\\n     * \\r\\n    */\\r\\n    struct Addresses {\\r\\n        IERC20 colAsset;\\r\\n        address lastPaid;\\r\\n        address safe;\\r\\n        address admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @param isMember : Whether user is a member or not\\r\\n     *  @param turnStartTime: Time when the contributor's turn start to count.\\r\\n     *  @param getFinanceTime: Date when loan was disbursed\\r\\n     *  @param paybackTime: Date which the borrowed fund must be retured\\r\\n     *  @param loan: Total debts owed by the last fund recipient.\\r\\n     *  @param colBals: Collateral balances of the last recipient.\\r\\n     *  @param sentQuota : Whether an user/current msg.sender has received or not.\\r\\n     *  @param id : Address of the last recipient.\\r\\n     * @param interestPaid : The amount of interest paid  \\r\\n    */\\r\\n    struct Contributor {\\r\\n        uint32 paybackTime;\\r\\n        uint32 turnStartTime;\\r\\n        uint32 getFinanceTime;\\r\\n        uint loan;\\r\\n        uint colBals;\\r\\n        address id;\\r\\n        bool sentQuota;\\r\\n    }\\r\\n\\r\\n    struct Price {\\r\\n        uint128 price;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct Provider {\\r\\n        uint slot;\\r\\n        uint amount;\\r\\n        uint rate;\\r\\n        uint earnStartDate;\\r\\n        address account;\\r\\n        Interest accruals;\\r\\n    }\\r\\n\\r\\n    struct Payback_Safe {\\r\\n        address user; \\r\\n        IERC20 baseAsset; \\r\\n        uint256 debt;\\r\\n        uint256 attestedInitialBal;\\r\\n        bool allGF; \\r\\n        Contributor[] cData;\\r\\n        bool isSwapped;\\r\\n        address defaulted;\\r\\n        uint96 recordId;\\r\\n        IERC20 collateralAsset;\\r\\n    }\\r\\n\\r\\n    struct Slot {\\r\\n        uint value;\\r\\n        bool isMember;\\r\\n        bool isAdmin;\\r\\n    }\\r\\n\\r\\n    struct ReadPoolDataReturnValue {\\r\\n        Pool pool;\\r\\n        ContributorReturnValue[] cData;\\r\\n    }\\r\\n\\r\\n    struct ReadRecordDataReturnValue {\\r\\n        Pool pool;\\r\\n        Contributor[] cData;\\r\\n    }\\r\\n\\r\\n    struct UpdatePoolData {\\r\\n        uint unit;\\r\\n        uint96 unitId;\\r\\n        uint96 recordId;\\r\\n        uint8 maxQuorum;\\r\\n        uint24 colCoverage;\\r\\n        IERC20 colAsset;\\r\\n        uint16 durationInHours;\\r\\n        address creator;\\r\\n        Router router; \\r\\n    }\\r\\n\\r\\n    struct Analytics {\\r\\n        uint256 tvlCollateral;\\r\\n        uint256 tvlBase;\\r\\n        uint totalPermissioned;\\r\\n        uint totalPermissionless;\\r\\n    }\\r\\n\\r\\n    struct ViewFactoryData {\\r\\n        Analytics analytics;\\r\\n        uint16 makerRate;\\r\\n        uint currentEpoches;\\r\\n        uint recordEpoches;\\r\\n    }\\r\\n\\r\\n    struct ContributorReturnValue {\\r\\n        Contributor profile;\\r\\n        Slot slot;\\r\\n        Common.Provider[] providers;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x47a3d0ec1786098932782f83fc4a146e39ec23e4c1f7b47b4618a3a421cae181\",\"license\":\"MIT\"},\"contracts/apis/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f16e22e9c3da96f41e8237352b0d826ca0421b69340e09aedae74eb222428e6\",\"license\":\"MIT\"},\"contracts/apis/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/apis/IRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IRoleBase \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IRoleBase {\\r\\n    function setRole(\\r\\n        address[] memory newRoleTos\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRoleBearer(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xa166efe0dfbcd8f4e00f33c155797b3e2d652087f630893518b0dec1f823519b\",\"license\":\"MIT\"},\"contracts/libraries/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary ErrorLib {\\r\\n    error ErrorOccurred(string errorMsg);\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts any operation.\\r\\n     * @param _error : Error struct\\r\\n     */\\r\\n    function _throw(string memory _error) internal pure {\\r\\n        if(bytes(_error).length > 0){ \\r\\n            revert ErrorOccurred(_error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x967582ca2a833932c7403e6950ede1972f1b7f94ecfedd2d3ddee9175d309e5a\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\nimport { ErrorLib } from \\\"./ErrorLib.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    using Address for address;\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    /**     @dev Calculation of percentage.\\r\\n        *   This is how we calculate percentage to arrive at expected value with \\r\\n        *   precision.\\r\\n        *   We choose a base value (numerator as 10000) repesenting a 100% of the principal value. This means if Alice wish to set \\r\\n        *   her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \\r\\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \\r\\n        *   zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\\r\\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\\r\\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \\r\\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\\r\\n        *   @param interest : Interest rate. \\r\\n        *   \\r\\n        *   Rules\\r\\n        *   -----\\r\\n        *   - Principal cannot be less than base.\\r\\n        *   - Interest cannot be greater than (2 ^ 16) - 1\\r\\n    */\\r\\n    function _getPercentage(\\r\\n        uint principal, \\r\\n        uint16 interest\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns (uint _return) \\r\\n    {\\r\\n        uint16 base = _getBase(); \\r\\n        if(interest == 0 || principal == 0) return 0;\\r\\n        if(interest >= type(uint16).max) 'Interest overflow'._throw(); \\r\\n        if(principal <= base) 'Principal should be greater than 10000'._throw();\\r\\n        unchecked {\\r\\n            _return = (principal * interest) / base;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Percentage base\\r\\n     */\\r\\n    function _getBase() internal pure returns(uint16 base) {\\r\\n        base = 10000;\\r\\n    }\\r\\n    \\r\\n    function _decimals(address asset) internal view returns(uint8 decimals) {\\r\\n        decimals = IERC20Metadata(asset).decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes collateral on the requested loan amount\\r\\n     * @param ccr : Collateral ratio. Must be multiply by 100 before parsing as input i.e if raw ccr\\r\\n     *              is 1.2, it should be rendered as 1.2 * 100 = 120.\\r\\n     * @param price : Price of Collateral token base with decimals.\\r\\n     * @param loanReqInDecimals : Total requested contribution in USD\\r\\n     * @notice Based on Simplifi mvp, loans are collaterized in XFI until we add more pairs\\r\\n     *         in the future.\\r\\n     * Example: Alice, Bob and Joe formed a band to contribute $100 each where duration is for \\r\\n     * 10 days each. Alice being the admin set ccr to 1.5 equivalent to 150% of the total sum \\r\\n     * contribution of $300. If the price of XFI as at the time of GF is $0.5/XFI, where XFI decimals\\r\\n     * is in 18, we calculate the required XFI to stake as follows:   \\r\\n     *  \\r\\n     *                    totalContribution *  (10** XFIdecimals)   |                 raw ccr\\r\\n     *   totalLoanInXFI = --------------------------------------    |    actualCCR = (1.5 * 100) * 100 = 1500\\r\\n     *                        (xfiPriceIndecimals)                  |\\r\\n     * \\r\\n     *                     totalLoanInXFI * actualCCR\\r\\n     *        XFINeeded = ----------------------------\\r\\n     *                             _getBase()\\r\\n     * \\r\\n     *  Therefore, Alice is required to stake 900XFI to GF $300 for 10 days.\\r\\n     *   \\r\\n     */\\r\\n    function computeCollateral(\\r\\n        Common.Price memory price,\\r\\n        uint24 ccr,\\r\\n        uint loanReqInDecimals\\r\\n    ) \\r\\n        internal\\r\\n        pure \\r\\n        returns(uint256 expCol) \\r\\n    {\\r\\n        // uint8 minCCR = 100;\\r\\n        // if(ccr < minCCR) revert CollateralCoverageCannotGoBelow_100();\\r\\n        if(ccr == 0) expCol = 0;\\r\\n        else {\\r\\n            unchecked {\\r\\n                uint48 _ccr = uint48(ccr * 100);\\r\\n                uint totalLoan = (loanReqInDecimals * (10**price.decimals)) / price.price;\\r\\n                expCol = (totalLoan * _ccr) / _getBase();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Computes maker fee.\\r\\n        @param makerRate : The amount of fee (in %) charged by the platform on the principal given to a borrower.\\r\\n            Note : Raw rate must multiply by 100 to get the expected value i.e\\r\\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\\r\\n            See `_getPercentage()`.\\r\\n        @param amount should be in decimals.\\r\\n    */\\r\\n    function computeFee(\\r\\n        uint amount, \\r\\n        uint16 makerRate\\r\\n    ) \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint mFee) \\r\\n    {\\r\\n        mFee = _getPercentage(amount, makerRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compute interest based on specified rate.\\r\\n     * @param rate : Interest rate.\\r\\n     * @param principal : Total expected contribution.\\r\\n     * @param fullDurationInSec : Total duration.\\r\\n     * \\r\\n     * Rules\\r\\n     * -----\\r\\n     * - Duration cannot exceed 30days i.e 2592000 seconds uint24 seconds\\r\\n     */\\r\\n    function computeInterestsBasedOnDuration(\\r\\n        uint principal,\\r\\n        uint16 rate,\\r\\n        uint32 fullDurationInSec\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns(Common.Interest memory it) \\r\\n    {\\r\\n        assert(fullDurationInSec <= _maxDurationInSec());\\r\\n        it.fullInterest = _getPercentage(principal, rate); // Full interest for fullDurationInSec\\r\\n        if(it.fullInterest > 0) {\\r\\n            unchecked {\\r\\n                it.intPerSec = (it.fullInterest * 1) / fullDurationInSec;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Max duration : 30Days, presented in seconds\\r\\n     */\\r\\n    function _maxDurationInSec() internal pure returns(uint24 max) {\\r\\n        max = 2592000;\\r\\n    }\\r\\n\\r\\n    function _now() internal view returns(uint64 date) {\\r\\n        date = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x79bb8987f06676ef8c3866137e5a943dd680dae0344531a304fc454377fcc484\",\"license\":\"MIT\"},\"contracts/peripherals/OnlyRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IRoleBase } from \\\"../apis/IRoleBase.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract OnlyRoleBase is MsgSender {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Role manager address\\r\\n    IRoleBase public roleManager;\\r\\n\\r\\n    // ============= constructor ============\\r\\n    constructor(IRoleBase _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyRoleBearer {\\r\\n        _onlyRoleBearer();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Allow only account with role access\\r\\n    function _onlyRoleBearer() internal view {\\r\\n        IRoleBase mgr = roleManager;\\r\\n        if(address(mgr) == address(0)) 'Manager is zero'._throw();\\r\\n        if(!_hasRole(_msgSender())) 'Access denied'._throw();\\r\\n    }\\r\\n\\r\\n    function _hasRole(address target) internal view returns(bool result) {\\r\\n        result = IRoleBase(roleManager).hasRole(target);\\r\\n    }  \\r\\n\\r\\n    /// @dev Set role manager\\r\\n    function _setRoleManager(IRoleBase newManager) private{\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Role manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleBearer\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(IRoleBase(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa16a1ee72f3b6ef52356210cdc85a46ddd5a88d56c0c044c0740b68cf5b83438\",\"license\":\"MIT\"},\"contracts/standalone/tokens/test/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { OnlyRoleBase, MsgSender, IRoleBase } from \\\"../../../peripherals/OnlyRoleBase.sol\\\";\\r\\nimport { IERC20 } from \\\"../../../apis/IERC20.sol\\\";\\r\\nimport { ErrorLib } from \\\"../../../libraries/ErrorLib.sol\\\";\\r\\nimport { Utils } from \\\"../../../libraries/Utils.sol\\\";\\r\\n\\r\\ncontract Faucet is OnlyRoleBase {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    struct Tester {\\r\\n        uint lastColDispensed;\\r\\n        uint lastBaseDispensed;\\r\\n        bool isWhitelisted;\\r\\n    }\\r\\n\\r\\n    // Amount of base token to dispense\\r\\n    uint public baseTokenAmount;\\r\\n\\r\\n    // Amount of collateral token to dispense\\r\\n    uint public collateralTokenAmount;\\r\\n\\r\\n    // List of testers\\r\\n    address[] public testers;\\r\\n\\r\\n    // Collateral token\\r\\n    IERC20 public collateralToken;\\r\\n\\r\\n    // Base token\\r\\n    IERC20 public baseToken;\\r\\n\\r\\n    mapping (address => Tester) public testersMap;\\r\\n\\r\\n    constructor(\\r\\n        IRoleBase _roleManager,\\r\\n        IERC20 _collateralToken,\\r\\n        IERC20 _baseToken,\\r\\n        uint _baseTokenAmount,\\r\\n        uint _colTokenAmount\\r\\n    ) OnlyRoleBase(_roleManager) {\\r\\n        if(_collateralToken == collateralToken) \\\"Collateral token is zero\\\"._throw();\\r\\n        (address(_roleManager) != address(0), \\\"RoleManager addr is zero\\\");\\r\\n        collateralToken = _collateralToken;\\r\\n        baseToken = _baseToken;\\r\\n        baseTokenAmount = _baseTokenAmount;\\r\\n        collateralTokenAmount = _colTokenAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim test token \\r\\n     * @param to : Recipient\\r\\n     * @notice Two assets are sent to recipient:\\r\\n     *      1. Base contribution asset\\r\\n     *      2. Collateral token\\r\\n     *  Sender must registered and be approved in order to claim test tokens\\r\\n     */\\r\\n    function _claimTokens(address to) internal {\\r\\n        uint colAmt = collateralTokenAmount;\\r\\n        uint baseAmt = baseTokenAmount;\\r\\n        Tester memory tester = testersMap[to];\\r\\n\\r\\n        if(colAmt > 0) {\\r\\n            uint userBal = IERC20(collateralToken).balanceOf(to);\\r\\n            if(userBal == 0 && Utils._now() > (tester.lastColDispensed + 24 hours)){\\r\\n                uint myBal = IERC20(collateralToken).balanceOf(address(this));\\r\\n                if(myBal >= colAmt) {\\r\\n                    tester.lastColDispensed = Utils._now();\\r\\n                    IERC20(collateralToken).transfer(to, colAmt);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(baseAmt > 0) {\\r\\n            uint userBal = IERC20(baseToken).balanceOf(to);\\r\\n            if(userBal == 0 && Utils._now() > (tester.lastBaseDispensed + 24 hours)){\\r\\n                uint myBal = IERC20(baseToken).balanceOf(address(this));\\r\\n                if(myBal >= baseAmt) {\\r\\n                    tester.lastBaseDispensed = Utils._now();\\r\\n                    IERC20(baseToken).transfer(to, baseAmt);\\r\\n                }\\r\\n            }\\r\\n        } \\r\\n\\r\\n        if(!tester.isWhitelisted) {\\r\\n            tester.isWhitelisted = true;\\r\\n            testers.push(to);\\r\\n        }\\r\\n        testersMap[to] = tester;\\r\\n    }\\r\\n\\r\\n    // User claim test tokens\\r\\n    function claimTestTokens() public returns(bool) {\\r\\n        _claimTokens(_msgSender());\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Admin overrides cooldown time to send test tokens to users\\r\\n    function sendTokens(address to) public onlyRoleBearer returns(bool) {\\r\\n        _claimTokens(to);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Admin account (s) can send test tokens to multiple users.\\r\\n     * @param tos : A list of recipients\\r\\n     * @notice Sender must have role permission\\r\\n     */\\r\\n    function mintBatch(address[] memory tos) public onlyRoleBearer returns(bool) {\\r\\n        for(uint i = 0; i < tos.length; i++) {\\r\\n            _claimTokens(tos[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Set Collateral token\\r\\n     * @param newToken : New token contract\\r\\n     */\\r\\n    function setCollateralToken(IERC20 newToken) public onlyRoleBearer returns(bool) {\\r\\n        if(newToken == collateralToken || address(newToken) == address(0)) \\\"New Token is the existing or zero\\\"._throw();\\r\\n        collateralToken = newToken;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Set base token\\r\\n     * @param newToken : New token contract\\r\\n     */\\r\\n    function setBaseToken(IERC20 newToken) public onlyRoleBearer returns(bool) {\\r\\n        if(newToken == baseToken || address(newToken) == address(0)) \\\"New Token is the existing or zero\\\"._throw();\\r\\n        baseToken = newToken;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set base amount\\r\\n     * @param newAmt : New token contract\\r\\n     */\\r\\n    function setBaseAmount(uint newAmt) public onlyRoleBearer returns(bool) {\\r\\n        baseTokenAmount = newAmt;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Collateral amount\\r\\n     * @param newAmt : New token contract\\r\\n     */\\r\\n    function setCollateralAmount(uint newAmt) public onlyRoleBearer returns(bool) {\\r\\n        baseTokenAmount = newAmt;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xd843534c599173cf332b31e9b468f6ef482cf932ff73bef3c46262b0328b26d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610dcc380380610dcc83398101604081905261002f91610138565b600080546001600160a01b0319166001600160a01b0387161790556004546001600160a01b039081169085160361009d5760408051808201909152601881527f436f6c6c61746572616c20746f6b656e206973207a65726f0000000000000000602082015261009d906100dc565b600480546001600160a01b039586166001600160a01b0319918216179091556005805494909516931692909217909255600191909155600255506101e5565b80511561012057806040517fcc8610630000000000000000000000000000000000000000000000000000000081526004016101179190610196565b60405180910390fd5b50565b6001600160a01b038116811461012057600080fd5b600080600080600060a0868803121561015057600080fd5b855161015b81610123565b602087015190955061016c81610123565b604087015190945061017d81610123565b6060870151608090970151959894975095949392505050565b60006020808352835180602085015260005b818110156101c4578581018301518582016040015282016101a8565b506000604082860101526040601f19601f8301168501019250505092915050565b610bd8806101f46000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c8063666181a911610097578063a8d7c20b11610066578063a8d7c20b14610219578063b2016bd414610222578063c55dae6314610235578063f1d588c51461024857600080fd5b8063666181a9146101cd578063837197b2146101e0578063927f59ba146101f3578063a2edf1731461020657600080fd5b8063224a7c6a116100d3578063224a7c6a146101545780633655eaad146101675780633d4f04ad146101545780634df760de146101b657600080fd5b8062435da5146100f957806310f00ae11461012957806316bb6c1314610141575b600080fd5b60005461010c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013161025b565b6040519015158152602001610120565b61013161014f36600461099d565b61026c565b6101316101623660046109c1565b6102e3565b61019961017536600461099d565b60066020526000908152604090208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610120565b6101bf60025481565b604051908152602001610120565b6101316101db36600461099d565b6102f6565b6101316101ee36600461099d565b61036e565b6101316102013660046109fb565b610389565b61010c6102143660046109c1565b6103d2565b6101bf60015481565b60045461010c906001600160a01b031681565b60055461010c906001600160a01b031681565b61013161025636600461099d565b6103fc565b600061026633610426565b50600190565b6000610276610869565b6005546001600160a01b038381169116148061029957506001600160a01b038216155b156102bf576102bf604051806060016040528060218152602001610b82602191396108e8565b50600580546001600160a01b0319166001600160a01b03831617905560015b919050565b60006102ed610869565b50600190815590565b6000610300610869565b6004546001600160a01b038381169116148061032357506001600160a01b038216155b1561034957610349604051806060016040528060218152602001610b82602191396108e8565b50600480546001600160a01b0383166001600160a01b03199091161790556001919050565b6000610378610869565b61038182610426565b506001919050565b6000610393610869565b60005b82518110156103c9576103c18382815181106103b4576103b4610ac0565b6020026020010151610426565b600101610396565b50600192915050565b600381815481106103e257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610406610869565b600080546001600160a01b0319166001600160a01b038416179055610381565b60028054600180546001600160a01b03851660009081526006602090815260409182902082516060810184528154815294810154918501919091529094015460ff16151593820193909352909190821561062157600480546040516370a0823160e01b81526001600160a01b0387811693820193909352600092909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610ad6565b905080158015610515575081516105089062015180610aef565b4267ffffffffffffffff16115b1561061f57600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190610ad6565b905084811061061d574267ffffffffffffffff1683526004805460405163a9059cbb60e01b81526001600160a01b03898116938201939093526024810188905291169063a9059cbb906044016020604051808303816000875af11580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610b10565b505b505b505b81156107c8576005546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190610ad6565b9050801580156106c0575060208201516106b39062015180610aef565b4267ffffffffffffffff16115b156107c6576005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190610ad6565b90508381106107c4574267ffffffffffffffff16602084015260055460405163a9059cbb60e01b81526001600160a01b038881166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af115801561079e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c29190610b10565b505b505b505b8060400151610822576001604082018190526003805491820181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b0393909316600090815260066020908152604091829020855181559085015160018201559301516002909301805460ff1916931515939093179092555050565b6000546001600160a01b0316806108aa576108aa6040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b8152506108e8565b6108b333610913565b6108e5576108e56040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b8152506108e8565b50565b8051156108e5578060405163cc86106360e01b815260040161090a9190610b32565b60405180910390fd5b60008054604051633f784de560e11b81526001600160a01b03848116600483015290911690637ef09bca90602401602060405180830381865afa15801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190610b10565b92915050565b6001600160a01b03811681146108e557600080fd5b6000602082840312156109af57600080fd5b81356109ba81610988565b9392505050565b6000602082840312156109d357600080fd5b5035919050565b80356102de81610988565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610a0e57600080fd5b823567ffffffffffffffff80821115610a2657600080fd5b818501915085601f830112610a3a57600080fd5b813581811115610a4c57610a4c6109e5565b8060051b604051601f19603f83011681018181108582111715610a7157610a716109e5565b604052918252848201925083810185019188831115610a8f57600080fd5b938501935b82851015610ab457610aa5856109da565b84529385019392850192610a94565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610ae857600080fd5b5051919050565b8082018082111561098257634e487b7160e01b600052601160045260246000fd5b600060208284031215610b2257600080fd5b815180151581146109ba57600080fd5b60006020808352835180602085015260005b81811015610b6057858101830151858201604001528201610b44565b506000604082860101526040601f19601f830116850101925050509291505056fe4e657720546f6b656e20697320746865206578697374696e67206f72207a65726fa2646970667358221220a09895fac63b9431b3ab842a06892d23cb656f40ce7145b2bff5de56ec637de564736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c8063666181a911610097578063a8d7c20b11610066578063a8d7c20b14610219578063b2016bd414610222578063c55dae6314610235578063f1d588c51461024857600080fd5b8063666181a9146101cd578063837197b2146101e0578063927f59ba146101f3578063a2edf1731461020657600080fd5b8063224a7c6a116100d3578063224a7c6a146101545780633655eaad146101675780633d4f04ad146101545780634df760de146101b657600080fd5b8062435da5146100f957806310f00ae11461012957806316bb6c1314610141575b600080fd5b60005461010c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013161025b565b6040519015158152602001610120565b61013161014f36600461099d565b61026c565b6101316101623660046109c1565b6102e3565b61019961017536600461099d565b60066020526000908152604090208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610120565b6101bf60025481565b604051908152602001610120565b6101316101db36600461099d565b6102f6565b6101316101ee36600461099d565b61036e565b6101316102013660046109fb565b610389565b61010c6102143660046109c1565b6103d2565b6101bf60015481565b60045461010c906001600160a01b031681565b60055461010c906001600160a01b031681565b61013161025636600461099d565b6103fc565b600061026633610426565b50600190565b6000610276610869565b6005546001600160a01b038381169116148061029957506001600160a01b038216155b156102bf576102bf604051806060016040528060218152602001610b82602191396108e8565b50600580546001600160a01b0319166001600160a01b03831617905560015b919050565b60006102ed610869565b50600190815590565b6000610300610869565b6004546001600160a01b038381169116148061032357506001600160a01b038216155b1561034957610349604051806060016040528060218152602001610b82602191396108e8565b50600480546001600160a01b0383166001600160a01b03199091161790556001919050565b6000610378610869565b61038182610426565b506001919050565b6000610393610869565b60005b82518110156103c9576103c18382815181106103b4576103b4610ac0565b6020026020010151610426565b600101610396565b50600192915050565b600381815481106103e257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610406610869565b600080546001600160a01b0319166001600160a01b038416179055610381565b60028054600180546001600160a01b03851660009081526006602090815260409182902082516060810184528154815294810154918501919091529094015460ff16151593820193909352909190821561062157600480546040516370a0823160e01b81526001600160a01b0387811693820193909352600092909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610ad6565b905080158015610515575081516105089062015180610aef565b4267ffffffffffffffff16115b1561061f57600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190610ad6565b905084811061061d574267ffffffffffffffff1683526004805460405163a9059cbb60e01b81526001600160a01b03898116938201939093526024810188905291169063a9059cbb906044016020604051808303816000875af11580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610b10565b505b505b505b81156107c8576005546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190610ad6565b9050801580156106c0575060208201516106b39062015180610aef565b4267ffffffffffffffff16115b156107c6576005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190610ad6565b90508381106107c4574267ffffffffffffffff16602084015260055460405163a9059cbb60e01b81526001600160a01b038881166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af115801561079e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c29190610b10565b505b505b505b8060400151610822576001604082018190526003805491820181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b0393909316600090815260066020908152604091829020855181559085015160018201559301516002909301805460ff1916931515939093179092555050565b6000546001600160a01b0316806108aa576108aa6040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b8152506108e8565b6108b333610913565b6108e5576108e56040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b8152506108e8565b50565b8051156108e5578060405163cc86106360e01b815260040161090a9190610b32565b60405180910390fd5b60008054604051633f784de560e11b81526001600160a01b03848116600483015290911690637ef09bca90602401602060405180830381865afa15801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190610b10565b92915050565b6001600160a01b03811681146108e557600080fd5b6000602082840312156109af57600080fd5b81356109ba81610988565b9392505050565b6000602082840312156109d357600080fd5b5035919050565b80356102de81610988565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610a0e57600080fd5b823567ffffffffffffffff80821115610a2657600080fd5b818501915085601f830112610a3a57600080fd5b813581811115610a4c57610a4c6109e5565b8060051b604051601f19603f83011681018181108582111715610a7157610a716109e5565b604052918252848201925083810185019188831115610a8f57600080fd5b938501935b82851015610ab457610aa5856109da565b84529385019392850192610a94565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610ae857600080fd5b5051919050565b8082018082111561098257634e487b7160e01b600052601160045260246000fd5b600060208284031215610b2257600080fd5b815180151581146109ba57600080fd5b60006020808352835180602085015260005b81811015610b6057858101830151858201604001528201610b44565b506000604082860101526040601f19601f830116850101925050509291505056fe4e657720546f6b656e20697320746865206578697374696e67206f72207a65726fa2646970667358221220a09895fac63b9431b3ab842a06892d23cb656f40ce7145b2bff5de56ec637de564736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "mintBatch(address[])": {
        "details": "Admin account (s) can send test tokens to multiple users.",
        "params": {
          "tos": ": A list of recipients"
        }
      },
      "setBaseAmount(uint256)": {
        "params": {
          "newAmt": ": New token contract"
        }
      },
      "setBaseToken(address)": {
        "params": {
          "newToken": ": New token contract"
        }
      },
      "setCollateralAmount(uint256)": {
        "params": {
          "newAmt": ": New token contract"
        }
      },
      "setCollateralToken(address)": {
        "params": {
          "newToken": ": New token contract"
        }
      },
      "setRoleManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintBatch(address[])": {
        "notice": "Sender must have role permission"
      },
      "setBaseAmount(uint256)": {
        "notice": "Set base amount"
      },
      "setBaseToken(address)": {
        "notice": "Set base token"
      },
      "setCollateralAmount(uint256)": {
        "notice": "Set Collateral amount"
      },
      "setCollateralToken(address)": {
        "notice": "Set Collateral token"
      },
      "setRoleManager(address)": {
        "notice": "Set Role manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3981,
        "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
        "label": "roleManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoleBase)1118"
      },
      {
        "astId": 8483,
        "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
        "label": "baseTokenAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8485,
        "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
        "label": "collateralTokenAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8488,
        "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
        "label": "testers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8491,
        "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
        "label": "collateralToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)980"
      },
      {
        "astId": 8494,
        "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
        "label": "baseToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)980"
      },
      {
        "astId": 8499,
        "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
        "label": "testersMap",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Tester)8481_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)980": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleBase)1118": {
        "encoding": "inplace",
        "label": "contract IRoleBase",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Tester)8481_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Faucet.Tester)",
        "numberOfBytes": "32",
        "value": "t_struct(Tester)8481_storage"
      },
      "t_struct(Tester)8481_storage": {
        "encoding": "inplace",
        "label": "struct Faucet.Tester",
        "members": [
          {
            "astId": 8476,
            "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
            "label": "lastColDispensed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8478,
            "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
            "label": "lastBaseDispensed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8480,
            "contract": "contracts/standalone/tokens/test/Faucet.sol:Faucet",
            "label": "isWhitelisted",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}