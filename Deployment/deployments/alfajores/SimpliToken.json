{
  "address": "0x69Fed46F7Ec9EcDB37020afB5B0fE6f756199b38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attorney_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reserve_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initTokenReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IOwnerShip",
          "name": "_ownershipMgr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManagerAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoPreviousLockDetected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCallable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermittedToCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "accountBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "spendable",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "escapeTo",
                  "type": "address"
                }
              ],
              "internalType": "struct IERC20.Protected",
              "name": "locked",
              "type": "tuple"
            }
          ],
          "internalType": "struct IERC20.Balances",
          "name": "_bal",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_bal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "batchTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAttorney",
      "outputs": [
        {
          "internalType": "address",
          "name": "_attorney",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "getLockedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "escapeTo",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20.Protected",
          "name": "_locked",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_routeTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipManager",
      "outputs": [
        {
          "internalType": "contract IOwnerShip",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountToRetrieve",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "spendable",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "escapeTo",
                  "type": "address"
                }
              ],
              "internalType": "struct IERC20.Protected",
              "name": "locked",
              "type": "tuple"
            }
          ],
          "internalType": "struct IERC20.Balances",
          "name": "_bal",
          "type": "tuple"
        }
      ],
      "name": "panicUnlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "feedback",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAttorney",
          "type": "address"
        }
      ],
      "name": "setAttorney",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setOwnershipManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf5fcc93f0009358ff368415e1317fb6d7ccec7d0cb5be82562be748797335656",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0x69Fed46F7Ec9EcDB37020afB5B0fE6f756199b38",
    "transactionIndex": 1,
    "gasUsed": "1535143",
    "logsBloom": "0x
    "blockHash": "0x277dbf8b3ef343c191906e9273c574b974175d3962dfe483a9fe2288a96d3617",
    "transactionHash": "0xf5fcc93f0009358ff368415e1317fb6d7ccec7d0cb5be82562be748797335656",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 42155306,
        "transactionHash": "0xf5fcc93f0009358ff368415e1317fb6d7ccec7d0cb5be82562be748797335656",
        "address": "0x69Fed46F7Ec9EcDB37020afB5B0fE6f756199b38",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000388463471656e23816337f37dfaa5dd3fa02d378"
        ],
        "data": "0x0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000",
        "logIndex": 0,
        "blockHash": "0x277dbf8b3ef343c191906e9273c574b974175d3962dfe483a9fe2288a96d3617"
      }
    ],
    "blockNumber": 42155306,
    "cumulativeGasUsed": "1578901",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4611729C05c0fA4039e31C191630943cB809A839",
    "0xAc5406d1192b81c6A7198187f29b423fDC024f5a",
    "0x388463471656E23816337f37DfAA5DD3Fa02D378",
    "0xF5aE8bE0B39FA81A89C410d0D764C692d368758f"
  ],
  "numDeployments": 2,
  "solcInputHash": "228b6c39fe69b484419db29febdecc43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attorney_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserve_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IOwnerShip\",\"name\":\"_ownershipMgr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPreviousLockDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCallable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermittedToCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"accountBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"spendable\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"escapeTo\",\"type\":\"address\"}],\"internalType\":\"struct IERC20.Protected\",\"name\":\"locked\",\"type\":\"tuple\"}],\"internalType\":\"struct IERC20.Balances\",\"name\":\"_bal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAttorney\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_attorney\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getLockedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"escapeTo\",\"type\":\"address\"}],\"internalType\":\"struct IERC20.Protected\",\"name\":\"_locked\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipManager\",\"outputs\":[{\"internalType\":\"contract IOwnerShip\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountToRetrieve\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"spendable\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"escapeTo\",\"type\":\"address\"}],\"internalType\":\"struct IERC20.Protected\",\"name\":\"locked\",\"type\":\"tuple\"}],\"internalType\":\"struct IERC20.Balances\",\"name\":\"_bal\",\"type\":\"tuple\"}],\"name\":\"panicUnlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"feedback\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAttorney\",\"type\":\"address\"}],\"name\":\"setAttorney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setOwnershipManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"accountBalances(address)\":{\"details\":\"See {IERC20-accountBalances}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\",\"params\":{\"account\":\": Bytes32 address type Note: The function `balanceOf` complies with that ERC20 standard\"}},\"burn(uint256)\":{\"details\":\"Burns token of `amount`\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getAttorney()\":{\"details\":\"Returns contracts account connected to the token contracts i.e.    - Attorney Note: Attorney account acts on behalf of a holders to retrive their token        in the event they lost access to their accounts.\"},\"getLockedInfo(address)\":{\"details\":\"See IERC20.sol {getInfo}\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"lockToken(address,uint256)\":{\"details\":\"See IERC20.sol {lockToken}\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setAttorney(address)\":{\"details\":\"Replaces the attorney account. Only authorized owner account can perform this action.\"},\"setOwnershipManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"unlockToken(uint256)\":{\"details\":\"See IERC20.sol {unlock}\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransfer(uint256[],address[])\":{\"notice\":\"See IERC20.sol {batchTransfer} A dynamic transfer utility.  Note: The size of the amount array must match that of the  account's. Another benefit is that each of the addresses on the  list can be dynamically mapped to different amount.\"},\"panicUnlock(address,(uint256,(uint256,address)))\":{\"notice\":\"See IERC20.sol {panicUnlock} Method is executed only of the caller is the attorney Note: Since the user is able to prove to the attorney that they own the lost account, they are also able to reclaim all balances.\"},\"setOwnershipManager(address)\":{\"notice\":\"Set Ownership manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/SimpliToken.sol\":\"SimpliToken\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/abstracts/OnlyOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { MsgSender } from \\\"../implementations/OwnerShip.sol\\\";\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n\\r\\nabstract contract OnlyOwner is MsgSender {\\r\\n    error ManagerAddressIsZero();\\r\\n    error NotPermittedToCall();\\r\\n\\r\\n    IOwnerShip public ownershipManager;\\r\\n\\r\\n    constructor(IOwnerShip _ownershipManager)\\r\\n    {\\r\\n        _setOwnershipManager(_ownershipManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        IOwnerShip mgr = ownershipManager;\\r\\n        if(address(mgr) == address(0)) revert ManagerAddressIsZero();\\r\\n        if(!IOwnerShip(mgr).isOwner(_msgSender())) revert NotPermittedToCall();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setOwnershipManager(\\r\\n        IOwnerShip newManager\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        ownershipManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Ownership manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setOwnershipManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setOwnershipManager(IOwnerShip(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6d34bfc0e1c2b6cd550c7cea1442036213925283ff98f0010b7ec78c50863f6e\",\"license\":\"MIT\"},\"contracts/abstracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { OnlyOwner, IOwnerShip } from \\\"./OnlyOwner.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n * \\r\\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\\r\\n * Thanks to the OZ team.\\r\\n */\\r\\nabstract contract Pausable is OnlyOwner {\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is paused.\\r\\n     */\\r\\n    error EnforcedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is not paused.\\r\\n     */\\r\\n    error ExpectedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor(\\r\\n        IOwnerShip _ownershipManager\\r\\n    ) OnlyOwner(_ownershipManager) {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view {\\r\\n        if (paused()) {\\r\\n            revert EnforcedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        if (!paused()) {\\r\\n            revert ExpectedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * Only owner role can call.\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function pause() \\r\\n        public \\r\\n        onlyOwner\\r\\n        whenNotPaused \\r\\n    {\\r\\n        _paused = true; \\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Only owner role can call.\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function unpause() \\r\\n        public \\r\\n        onlyOwner \\r\\n        whenPaused \\r\\n    {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e87695a5f30fb5e9ec85d587a46b3d7beaa4e20ea50703dd98226963f048502\",\"license\":\"MIT\"},\"contracts/apis/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    // /**\\r\\n    //  * @dev Same as lockToken except that this function is called by the Factory contract to \\r\\n    //  * lock collateral amount to user's wallet\\r\\n    //  * @param target : Account to lock to token to.\\r\\n    //  * @param _routeTo : Escape address.\\r\\n    //  * @param amount : Amount to lock\\r\\n    //  */\\r\\n    // function lockSpecial(\\r\\n    //     address target, \\r\\n    //     address _routeTo, \\r\\n    //     uint256 amount\\r\\n    // ) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf4c8759612ba2d4079d40784a503178ea77002b73dde97ad310f2953d7bfe82c\",\"license\":\"MIT\"},\"contracts/apis/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/apis/IOwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IOwnerShip \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IOwnerShip {\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xe21511940e88a7e8036b4b6adfde25125f7f3d49cde2732bffd219847b3ed6c0\",\"license\":\"MIT\"},\"contracts/implementations/OwnerShip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IOwnerShip } from \\\"../apis/IOwnerShip.sol\\\";\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title OwnerShip contract cuts across all contracts in the Simplifinance ecosystem. Multiple accounts can be given ownership right to interact with \\r\\n * ecosystem's smart contracts. It is a standalone contract for managing ownership in Simplifi protocol\\r\\n * @author Simplifinance Code written by Isaac Jesse (a.k.a Bobeu) Github: https://github.com/bobeu\\r\\n * @notice Accounts with ownership access cannot access users'fund. Users'funds are isolated from the main contract. Funds are \\r\\n * managed in a special safe called Bank. Each of the pools operates a unique and reusable safe.\\r\\n */\\r\\ncontract OwnerShip is IOwnerShip, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of owners.\\r\\n     */\\r\\n    uint public ownersCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with ownership permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _isOwner;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of ownersCount to addresses.\\r\\n     * A valid id will return a mapped owner.\\r\\n     */\\r\\n    mapping (uint => address) public owners;\\r\\n\\r\\n    /**\\r\\n     * @dev Only owner is allowed.\\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        require(_isOwner[_msgSender()], \\\"Oop! Caller is not recognized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     */\\r\\n    function _getOwner(uint ownerId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _owner) \\r\\n    {\\r\\n        _owner = owners[ownerId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as owner.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setOwner(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"Simplifi OwnerShip: 'target' parameter is empty\\\");\\r\\n        add? (_isOwner[target] = true, ownersCount ++) : (_isOwner[target] = false, ownersCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new owner address\\r\\n     * @param newOwners: New owners\\r\\n     * @notice Only address with owner permission can add another owner.\\r\\n     */\\r\\n    function setPermission(\\r\\n        address[] memory newOwners\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < newOwners.length; r++) {\\r\\n            _setOwner(newOwners[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as owner.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with owner permission can remove another owner.\\r\\n     */\\r\\n    function removeOwner(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setOwner(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An owner can renounce their ownership. This however will not leave the\\r\\n     * contract empty without an owner. There must be at least one owner left.\\r\\n     * @notice Only address with owner permission can renounce ownership.\\r\\n     */\\r\\n    function renounceOwnerShip() \\r\\n        external\\r\\n        onlyOwner\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(ownersCount > 1, \\\"At least 2 owners is required to leave\\\"); \\r\\n        _setOwner(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns owner variable.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param ownerId : Owner Id. \\r\\n     */\\r\\n    function getOwner(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getOwner(ownerId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an owner.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function isOwner(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _isOwner[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcacb7af12f543387d578515a163f7c3d57c32b441a0c68484940aaefaf0fdab0\",\"license\":\"MIT\"},\"contracts/implementations/SimpliToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { ERC20Abstract, IOwnerShip } from \\\"./token/ERC20Abstract.sol\\\";\\r\\n\\r\\n/*\\r\\n    @title SToken is the native token of the Simplifinance platform.\\r\\n            It is a utility token that gives its holders access to Simplifinance\\r\\n            products.\\r\\n        Standard: Custom and ERC20 compatible.\\r\\n        Type: Deflationary.\\r\\n        Max Supply: 1_000_000_000.\\r\\n        Decimal: 18.\\r\\n*/\\r\\ncontract SimpliToken is ERC20Abstract {\\r\\n    event Locked(address from, uint256 amount);\\r\\n    event UnLocked(address from, uint256 amount);\\r\\n\\r\\n    constructor( \\r\\n        address attorney_,\\r\\n        address reserve_,\\r\\n        address initTokenReceiver,\\r\\n        IOwnerShip _ownershipMgr\\r\\n    ) ERC20Abstract(attorney_, reserve_, initTokenReceiver, _ownershipMgr) { }\\r\\n\\r\\n    ///@dev Contract accepts no platform coin\\r\\n    receive() external payable {\\r\\n        revert(\\\"NA\\\");\\r\\n    }\\r\\n\\r\\n    ///@dev See IERC20.sol {lockToken}\\r\\n    function lockToken(address _routeTo, uint256 amount) public returns (bool) {\\r\\n        _lock(_msgSender(), _routeTo, amount);\\r\\n\\r\\n        emit Locked(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ///@dev See IERC20.sol {lockSpecial}\\r\\n    // function lockSpecial(\\r\\n    //     address target, \\r\\n    //     address _routeTo, \\r\\n    //     uint256 amount\\r\\n    // ) external onlyOwner returns (bool) {\\r\\n    //     _lock(target, _routeTo, amount);\\r\\n\\r\\n    //     emit Locked(_msgSender(), amount);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    ///@dev See IERC20.sol {unlock}\\r\\n    function unlockToken(uint256 amount) public returns (bool) {\\r\\n        _unlock(_msgSender(), amount);\\r\\n\\r\\n        emit UnLocked(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    ///@dev Burns token of `amount`\\r\\n    function burn(uint amount) public {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        See IERC20.sol {batchTransfer}\\r\\n        A dynamic transfer utility. \\r\\n        Note: The size of the amount array must match that of the \\r\\n        account's. Another benefit is that each of the addresses on the \\r\\n        list can be dynamically mapped to different amount.\\r\\n     */\\r\\n    function batchTransfer(\\r\\n        uint[] memory amounts,\\r\\n        address[] memory accounts\\r\\n    ) public override returns (bool) {\\r\\n        uint accountSize = accounts.length;\\r\\n        require(accountSize == amounts.length, \\\"Unequal list\\\");\\r\\n        for (uint i = 0; i < accountSize; i++) {\\r\\n            address to = accounts[i];\\r\\n            uint amount = amounts[i];\\r\\n            _transfer(_msgSender(), to, amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // /**\\r\\n    //  * @dev See {ERC20-_beforeTokenTransfer}.\\r\\n    //  *\\r\\n    //  * Requirements:\\r\\n    //  *\\r\\n    //  * - the contract must not be paused.\\r\\n    //  */\\r\\n    // function _beforeTokenTransfer(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 amount\\r\\n    // ) internal virtual override {\\r\\n    //     super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n    //     require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0x16a13cd2fc078b0b5a49da6387929534715ecee3d6074cf4e42d6ee3dcd41f7c\",\"license\":\"MIT\"},\"contracts/implementations/token/ERC20Abstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"../../apis/IERC20.sol\\\";\\r\\nimport { Pausable, IOwnerShip } from \\\"../../abstracts/Pausable.sol\\\";\\r\\n\\r\\nlibrary Lib {\\r\\n  function cannotBeEmptyAddress(address target) internal pure {\\r\\n    require(target != address(0), \\\"Lib: Target is zero address\\\");\\r\\n  }\\r\\n\\r\\n  function mustBeAbove(uint a, uint b) internal pure {\\r\\n    require(a >= b, \\\"B is greater than A\\\");\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint64 result) {\\r\\n    result = uint64(block.timestamp);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * The default value of {decimals} is 18. To change this, you should override\\r\\n * this function so it returns a different value.\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\n\\r\\n/**\\r\\n * @title SimpliFinance Token Implementation { Non deployable }\\r\\n * @author SimpliFinance - https://github.com/bobeu\\r\\n * @notice @dev Simplifinance Token operates a dual ledger model:\\r\\n     *      - Regular balance : Compatible with the standard ERC20 balances.\\r\\n     *      - private balance : This is kept in a seperate ledger but reflects in the total balances when \\r\\n     *          the `balanceOf` is invoked. We introduced this method for internal security reasons to protect\\r\\n     *          SPT holder in the event they lost access to their wallets.\\r\\n     *  HOW IS WORKS\\r\\n     *  ============\\r\\n     *      To be protected, holder must explicitly subscribe to it. During the processs, an alternative \\r\\n     *      EOA referred to as `escapeTo` must be provided as an argument to the function. Holders are adviced to create a seperate account for this purpose\\r\\n     *      and keep the private keys secure. Such account might not be used for regular transaction. Providing this address activates \\r\\n     *      the private balance mode. The specified amount of `inValue` is locked for the period of `lockTil`. During the locked period, if holder \\r\\n     *      lost access to their account, through the `Attorney` contract, provided the lock is activated, they will regain access to their funds.\\r\\n     *      The Attorney will enquire from the Token contract if the caller has previously activated the lock, and if an escape address was set. otherwise\\r\\n     *      the request is ignored.\\r\\n     * Note: An amount is charged by the Attorney for such service.\\r\\n     * Even if an hacker gained access to your private keys, as a SPT holder, the fund is not accessible to them only if the holder had activated the lock feature.\\r\\n     * \\r\\n     * Note: The call must be initiated by an account other than the owner.\\r\\n     *       An attacker only has access to SPT token in your regular ERC20 ledger balances.\\r\\n     *   \\r\\n        The `panicWithdraw` method resides in the Attorney contract. It unlocks all balances in the locked ledger and are sent to the `escape` account provided the  \\r\\n        an address was initially set.\\r\\n */\\r\\nabstract contract ERC20Abstract is IERC20, Pausable {\\r\\n  using Lib for *;\\r\\n\\r\\n  TokenInfo private tokenInfo;\\r\\n  \\r\\n  mapping(address => Balances) private _balances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes state varibles.\\r\\n   * Note: We mint the maxSupply at deployment. 30% of the total supply\\r\\n   * is in circulation while the rest is lcoked in the reserve.\\r\\n   */\\r\\n  constructor(\\r\\n    address attorney_,\\r\\n    address reserve_,\\r\\n    address initTokenReceiver,\\r\\n    IOwnerShip _ownershipManager\\r\\n  )  \\r\\n    Pausable(_ownershipManager)\\r\\n  {\\r\\n    attorney_.cannotBeEmptyAddress();\\r\\n    tokenInfo = TokenInfo(18, 0, \\\"Simplfinance Token\\\", \\\"TSFT\\\", attorney_);\\r\\n    // _mint(_msgSender(), 200000*(10**18)); // For testing, mint to msg.sender\\r\\n    _mint(initTokenReceiver, 1_000_000_000*(10**18));\\r\\n    _lock(initTokenReceiver, reserve_, 700_000_000*(10**18)); // We expect reserve_ to be a grouped account e.g multisig.\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the name of the token.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return tokenInfo.name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n   * name.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return tokenInfo.symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of decimals used to get its user representation.\\r\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n   *\\r\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n   * Ether and Wei. This is the default value returned by this function, unless\\r\\n   * it's overridden.\\r\\n   *\\r\\n   * NOTE: This information is only used for _display_ purposes: it in\\r\\n   * no way affects any of the arithmetic of the contract, including\\r\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n   */\\r\\n  function decimals() public view virtual override returns (uint8) {\\r\\n    return tokenInfo.decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns contracts account connected to the token contracts i.e.\\r\\n   *    - Attorney\\r\\n   * Note: Attorney account acts on behalf of a holders to retrive their token\\r\\n   *        in the event they lost access to their accounts.\\r\\n   */\\r\\n  function getAttorney() public view returns(address _attorney) {\\r\\n    _attorney = tokenInfo.attorney;\\r\\n  }\\r\\n\\r\\n  /// @dev See IERC20.sol {getInfo}\\r\\n  function getLockedInfo(address target) public view returns(Protected memory _locked) {\\r\\n    address msgSender = _msgSender();\\r\\n    if(msgSender == tokenInfo.attorney) {\\r\\n      _locked = _balances[target].locked;\\r\\n    }\\r\\n    return _locked;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view virtual override returns (uint256) {\\r\\n    return tokenInfo.totalSupply;\\r\\n  }\\r\\n\\r\\n  ///@dev See {IERC20-accountBalances}.\\r\\n  function accountBalances(address who) external view returns (Balances memory _bal) {\\r\\n    _bal = _balances[who];\\r\\n    return _bal;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-balanceOf}.\\r\\n   * Returns the spendable balance of @param account: Bytes32 address type\\r\\n   * Note: The function `balanceOf` complies with that ERC20 standard\\r\\n   */\\r\\n  function balanceOf(address account) public view returns (uint256 _bal) {\\r\\n    return _getSpendable(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n  function transfer(address to, uint256 amount) public returns (bool) {\\r\\n    address owner = _msgSender();\\r\\n    _transfer(owner, to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-allowance}.\\r\\n   */\\r\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-approve}.\\r\\n   *\\r\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n      address owner = _msgSender();\\r\\n      _approve(owner, spender, amount);\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n   *\\r\\n   * NOTE: Does not update the allowance if the current allowance\\r\\n   * is the maximum `uint256`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` and `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for ``from``'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\r\\n    address spender = _msgSender();\\r\\n    _spendAllowance(from, spender, amount);\\r\\n    _transfer(from, to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n      address owner = _msgSender();\\r\\n      _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\\r\\n    address owner = _msgSender();\\r\\n    uint256 currentAllowance = allowance(owner, spender);\\r\\n    require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    unchecked {\\r\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // Returns spendable balances of {from} i.e usual ERC20 'balanceOf'\\r\\n  function _getSpendable(address from) internal view returns (uint256) {\\r\\n    return _balances[from].spendable;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n   *\\r\\n   * This internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of at least `amount`.\\r\\n   */\\r\\n  function _transfer(address from, address to, uint256 amount) internal virtual \\r\\n  {\\r\\n    from.cannotBeEmptyAddress();\\r\\n    to.cannotBeEmptyAddress();\\r\\n\\r\\n    _beforeTokenTransfer(from, to, amount);\\r\\n    uint256 fromBalance = _getSpendable(from);\\r\\n    fromBalance.mustBeAbove(amount);\\r\\n    unchecked {\\r\\n        _balances[from].spendable = fromBalance - amount;\\r\\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n        // decrementing then incrementing.\\r\\n        _balances[to].spendable += amount;\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, amount);\\r\\n\\r\\n    _afterTokenTransfer(from, to, amount);\\r\\n  }\\r\\n\\r\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `from` set to the zero address.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   */\\r\\n  function _mint(address account, uint256 amount) internal virtual {\\r\\n    // _requireContext(_isCallable(Internal.MINT));\\r\\n    account.cannotBeEmptyAddress();\\r\\n    _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n    tokenInfo.totalSupply += amount;\\r\\n    unchecked {\\r\\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n        _balances[account].spendable += amount;\\r\\n    }\\r\\n    emit Transfer(address(0), account, amount);\\r\\n\\r\\n    _afterTokenTransfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n   * total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `to` set to the zero address.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   * - `account` must have at least `amount` tokens.\\r\\n   */\\r\\n  function _burn(address account, uint256 amount) internal virtual {\\r\\n    account.cannotBeEmptyAddress();\\r\\n    _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n    uint256 accountBalance = _balances[account].spendable;\\r\\n    accountBalance.mustBeAbove(amount);\\r\\n    unchecked {\\r\\n      _balances[account].spendable = accountBalance - amount;\\r\\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n      tokenInfo.totalSupply -= amount;\\r\\n    }\\r\\n\\r\\n    emit Transfer(account, address(0), amount);\\r\\n\\r\\n    _afterTokenTransfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n   *\\r\\n   * This internal function is equivalent to `approve`, and can be used to\\r\\n   * e.g. set automatic allowances for certain subsystems, etc.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n    owner.cannotBeEmptyAddress();\\r\\n    spender.cannotBeEmptyAddress();\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n   *\\r\\n   * Does not update the allowance amount in case of infinite allowance.\\r\\n   * Revert if not enough allowance is available.\\r\\n   *\\r\\n   * Might emit an {Approval} event.\\r\\n   */\\r\\n  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\r\\n    uint256 currentAllowance = allowance(owner, spender);\\r\\n    if (currentAllowance != type(uint256).max) {\\r\\n      currentAllowance.mustBeAbove(amount);\\r\\n      unchecked {\\r\\n        _approve(owner, spender, currentAllowance - amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before any transfer of tokens. This includes\\r\\n   * minting and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * will be transferred to `to`.\\r\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after any transfer of tokens. This includes\\r\\n   * minting and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * has been transferred to `to`.\\r\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n  \\r\\n  ///@dev Returns current Unix time stamp\\r\\n  function _now() internal view returns(uint32) {\\r\\n    return uint32(block.timestamp);\\r\\n  }\\r\\n  \\r\\n  /**@dev Locks token in the private ledger balances.\\r\\n    When tokens are locked they can be unlocked at any time.\\r\\n      @param _escapeTo : An extra address that token will be forwarded to. This must not be zero address\\r\\n      @param amount : Amount user is willing to send to the safe.\\r\\n      Note: If caller has no lock previously set,`escapeTo` must not be an empty address.\\r\\n            User will always have to provide an escape address each time they want to lock up tokens.\\r\\n      REWARD\\r\\n      ======\\r\\n      Holders are eligible to claim reward if they hold SFT in private ledger for at least 30 days.\\r\\n      The measure of such reward is determined by the team.\\r\\n      @notice Care must be taken when locking and unlocking. Users must first check through the attorney if they're\\r\\n            qualify for reward then they must claim first before lock again, otherwise, the locked time is overriden.\\r\\n            This can nullify their rewards.\\r\\n\\r\\n   */\\r\\n  function _lock(address account, address _escapeTo, uint256 amount) \\r\\n    internal\\r\\n  {\\r\\n    _escapeTo.cannotBeEmptyAddress();\\r\\n    Balances memory balances = _balances[account];\\r\\n\\r\\n    balances.spendable.mustBeAbove(amount);\\r\\n    // _balances[account].locked.escapeTo = _escapeTo;\\r\\n    // _balances[account].locked.lastLocked = amount;\\r\\n    unchecked {\\r\\n      _balances[account] = Balances(\\r\\n        balances.spendable - amount,\\r\\n        Protected(\\r\\n          balances.locked.value + amount,\\r\\n          _escapeTo\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**@dev Unlock token \\r\\n   */\\r\\n  function _unlock(address account, uint amount) internal {\\r\\n    Balances memory balances = _balances[account];\\r\\n    if(balances.locked.escapeTo == address(0)) revert NoPreviousLockDetected();\\r\\n    balances.locked.value.mustBeAbove(amount);\\r\\n    unchecked {\\r\\n      _balances[account].locked.value -= amount;\\r\\n      _balances[balances.locked.escapeTo].spendable += amount;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replaces the attorney account. Only authorized owner account can perform\\r\\n   * this action.\\r\\n   */\\r\\n  function setAttorney(address newAttorney) public onlyOwner {\\r\\n    newAttorney.cannotBeEmptyAddress();\\r\\n    tokenInfo.attorney = newAttorney;\\r\\n  }\\r\\n\\r\\n  /**See IERC20.sol {panicUnlock}\\r\\n    Method is executed only of the caller is the attorney\\r\\n    Note: Since the user is able to prove to the attorney that they\\r\\n    own the lost account, they are also able to reclaim all balances.\\r\\n   */ \\r\\n  function panicUnlock(address accountToRetrieve, Balances memory _bal) external returns(bool feedback) {\\r\\n    tokenInfo.attorney.cannotBeEmptyAddress();\\r\\n    if(_msgSender() == tokenInfo.attorney) {\\r\\n      unchecked {\\r\\n        _balances[accountToRetrieve].locked.value = 0;\\r\\n        _balances[_bal.locked.escapeTo].spendable += _bal.locked.value;\\r\\n      }\\r\\n      if(_bal.spendable > 0) {\\r\\n        _transfer(accountToRetrieve, _bal.locked.escapeTo, _bal.spendable);\\r\\n      } \\r\\n      feedback = true;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xef4fea1d3e53c52932f352ac99730fdc48927de07e299a6218ab611e278a1c93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001d1d38038062001d1d833981016040819052620000349162000415565b600080546001600160a01b0319166001600160a01b038316179055838383836000805460ff60a01b19169055620000746001600160a01b038516620001b7565b6040805160a081018252601280825260006020808401918252845180860186529283527f53696d706c66696e616e636520546f6b656e0000000000000000000000000000838201528385019283528451808601909552600485527f54534654000000000000000000000000000000000000000000000000000000009085015260608301939093526001600160a01b038716608083015281516001805460ff191660ff90921691909117815592516002555190919060039062000137908262000555565b50606082015160038201906200014e908262000555565b5060809190910151600490910180546001600160a01b0319166001600160a01b0390921691909117905562000190826b033b2e3c9fd0803ce800000062000230565b620001a982846b024306c4097859c43c000000620002b4565b505050505050505062000662565b6001600160a01b0381166200022d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4c69623a20546172676574206973207a65726f2061646472657373000000000060448201526064015b60405180910390fd5b50565b620002446001600160a01b038316620001b7565b806001800160008282546200025a919062000621565b90915550506001600160a01b0382166000818152600660209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b620002c86001600160a01b038316620001b7565b6001600160a01b0380841660009081526006602090815260409182902082518084018452815481528351808501909452600182015484526002909101549093168282015282015280516200031d908362000393565b60408051808201825282518490038152815180830183526020938401515190940184526001600160a01b039485168385015282810193845294841660009081526006835220935184559051805160018501550151600290920180546001600160a01b03191692909116919091179055565b505050565b80821015620002b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f422069732067726561746572207468616e204100000000000000000000000000604482015260640162000224565b6001600160a01b03811681146200022d57600080fd5b600080600080608085870312156200042c57600080fd5b84516200043981620003ff565b60208601519094506200044c81620003ff565b60408601519093506200045f81620003ff565b60608601519092506200047281620003ff565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c90821680620004c157607f821691505b602082108103620004fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156200038e576000816000526020600020601f850160051c810160208610156200052c5750805b601f850160051c820191505b818110156200054d5782815560010162000538565b505050505050565b81516001600160401b038111156200057157620005716200047d565b6200058981620005828454620004ac565b8462000501565b602080601f831160018114620005c15760008415620005a85750858301515b600019600386901b1c1916600185901b1785556200054d565b600085815260208120601f198616915b82811015620005f257888601518255948401946001909101908401620005d1565b5085821015620006115787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200065c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b6116ab80620006726000396000f3fe60806040526004361061016a5760003560e01c80636ff96d17116100d1578063a543fdf61161008a578063c52c159311610064578063c52c15931461048e578063dd2e0ac0146104ae578063dd62ed3e146104ce578063f627590b146104ee57600080fd5b8063a543fdf61461041c578063a9059cbb1461044e578063b88a39151461046e57600080fd5b80636ff96d171461033857806370a08231146103855780638456cb59146103a55780638afb2207146103ba57806395d89b41146103e7578063a457c2d7146103fc57600080fd5b8063313ce56711610123578063313ce5671461028257806339509351146102a45780633f4ba83a146102c457806342966c68146102d95780635c975abb146102f957806361737d621461031857600080fd5b806306fdde03146101a6578063095ea7b3146101d157806317be3fa51461020157806318160ddd146102215780631fa29aad1461024057806323b872dd1461026257600080fd5b366101a15760405162461bcd60e51b81526020600482015260026024820152614e4160f01b60448201526064015b60405180910390fd5b600080fd5b3480156101b257600080fd5b506101bb61050e565b6040516101c89190611240565b60405180910390f35b3480156101dd57600080fd5b506101f16101ec3660046112ab565b6105a3565b60405190151581526020016101c8565b34801561020d57600080fd5b506101f161021c3660046112ab565b6105bd565b34801561022d57600080fd5b506002545b6040519081526020016101c8565b34801561024c57600080fd5b5061026061025b3660046112d5565b610616565b005b34801561026e57600080fd5b506101f161027d3660046112f7565b61070a565b34801561028e57600080fd5b5060015460405160ff90911681526020016101c8565b3480156102b057600080fd5b506101f16102bf3660046112ab565b61072e565b3480156102d057600080fd5b50610260610750565b3480156102e557600080fd5b506102606102f4366004611333565b610865565b34801561030557600080fd5b50600054600160a01b900460ff166101f1565b34801561032457600080fd5b506101f16103333660046112d5565b610872565b34801561034457600080fd5b506103586103533660046112d5565b610958565b6040805182518152602092830151805184830152909201516001600160a01b0316908201526060016101c8565b34801561039157600080fd5b506102326103a03660046112d5565b6109ab565b3480156103b157600080fd5b506102606109c9565b3480156103c657600080fd5b506103da6103d53660046112d5565b610acb565b6040516101c8919061134c565b3480156103f357600080fd5b506101bb610b32565b34801561040857600080fd5b506101f16104173660046112ab565b610b44565b34801561042857600080fd5b506005546001600160a01b03165b6040516001600160a01b0390911681526020016101c8565b34801561045a57600080fd5b506101f16104693660046112ab565b610bbf565b34801561047a57600080fd5b50600054610436906001600160a01b031681565b34801561049a57600080fd5b506101f16104a9366004611476565b610bcd565b3480156104ba57600080fd5b506101f16104c9366004611333565b610c74565b3480156104da57600080fd5b506102326104e936600461152f565b610ccb565b3480156104fa57600080fd5b506101f1610509366004611562565b610cf6565b606060016002018054610520906115e8565b80601f016020809104026020016040519081016040528092919081815260200182805461054c906115e8565b80156105995780601f1061056e57610100808354040283529160200191610599565b820191906000526020600020905b81548152906001019060200180831161057c57829003601f168201915b5050505050905090565b6000336105b1818585610d81565b60019150505b92915050565b60006105ca338484610e07565b7f9f1ec8c880f76798e7b793325d625e9b60e4082a553c98f42b6cda368dd6000833604080516001600160a01b039092168252602082018590520160405180910390a150600192915050565b6000546001600160a01b03168061064057604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b8919061161c565b6106d5576040516315ed864b60e21b815260040160405180910390fd5b6106e7826001600160a01b0316610edd565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600033610718858285610f33565b610723858585610f67565b506001949350505050565b6000336105b18185856107418383610ccb565b61074b919061163e565b610d81565b6000546001600160a01b03168061077a57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f2919061161c565b61080f576040516315ed864b60e21b815260040160405180910390fd5b61081761101b565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b61086f3382611047565b50565b600080546001600160a01b03168061089d57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610915919061161c565b610932576040516315ed864b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038516179055600191505b50919050565b610960611203565b506001600160a01b0390811660009081526006602090815260409182902082518084018452815481528351808501909452600182015484526002909101549093168282015282015290565b6001600160a01b0381166000908152600660205260408120546105b7565b6000546001600160a01b0316806109f357604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b919061161c565b610a88576040516315ed864b60e21b815260040160405180910390fd5b610a906110d4565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108473390565b604080518082019091526000808252602082015260055433906001600160a01b031681036109525750506001600160a01b03908116600090815260066020908152604091829020825180840190935260018101548352600201549092169181019190915290565b606060016003018054610520906115e8565b60003381610b528286610ccb565b905083811015610bb25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610198565b6107238286868403610d81565b6000336105b1818585610f67565b80518251600091908114610c125760405162461bcd60e51b815260206004820152600c60248201526b155b995c5d585b081b1a5cdd60a21b6044820152606401610198565b60005b81811015610723576000848281518110610c3157610c3161165f565b602002602001015190506000868381518110610c4f57610c4f61165f565b60200260200101519050610c6a610c633390565b8383610f67565b5050600101610c15565b6000610c8033836110ff565b7f4e7407468c9afb1673f0eb43b54dbfa1f26fd38ee8918b42318c78efefac177333604080516001600160a01b039092168252602082018590520160405180910390a1506001919050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b600554600090610d0e906001600160a01b0316610edd565b6005546001600160a01b031633036105b7576001600160a01b038084166000908152600660209081526040808320600101839055858201518051920151909316825291902080549091019055815115610d7857610d78838360200151602001518460000151610f67565b50600192915050565b610d93836001600160a01b0316610edd565b610da5826001600160a01b0316610edd565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b610e19826001600160a01b0316610edd565b6001600160a01b038084166000908152600660209081526040918290208251808401845281548152835180850190945260018201548452600290910154909316828201528201528051610e6c90836111b9565b60408051808201825282518490038152815180830183526020938401515190940184526001600160a01b039485168385015282810193845294841660009081526006835220935184559051805160018501550151600290920180546001600160a01b03191692909116919091179055565b6001600160a01b03811661086f5760405162461bcd60e51b815260206004820152601b60248201527f4c69623a20546172676574206973207a65726f206164647265737300000000006044820152606401610198565b6000610f3f8484610ccb565b90506000198114610f6157610f5481836111b9565b610f618484848403610d81565b50505050565b610f79836001600160a01b0316610edd565b610f8b826001600160a01b0316610edd565b6001600160a01b038316600090815260066020526040902054610fae81836111b9565b6001600160a01b0380851660008181526006602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061100e9086815260200190565b60405180910390a3610f61565b600054600160a01b900460ff1661104557604051638dfc202b60e01b815260040160405180910390fd5b565b611059826001600160a01b0316610edd565b6001600160a01b03821660009081526006602052604090205461107c81836111b9565b6001600160a01b03831660008181526006602090815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610dfa565b600054600160a01b900460ff16156110455760405163d93c066560e01b815260040160405180910390fd5b6001600160a01b0380831660009081526006602090815260409182902082518084018452815481528351808501909452600182015484526002909101548416838301908152918101929092525190911661116c57604051631ec4ebaf60e21b815260040160405180910390fd5b60208101515161117c90836111b9565b6001600160a01b03928316600090815260066020908152604080832060010180548690039055928101510151909316835290912080549091019055565b808210156111ff5760405162461bcd60e51b8152602060048201526013602482015272422069732067726561746572207468616e204160681b6044820152606401610198565b5050565b60405180604001604052806000815260200161123b60405180604001604052806000815260200160006001600160a01b031681525090565b905290565b60006020808352835180602085015260005b8181101561126e57858101830151858201604001528201611252565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146112a657600080fd5b919050565b600080604083850312156112be57600080fd5b6112c78361128f565b946020939093013593505050565b6000602082840312156112e757600080fd5b6112f08261128f565b9392505050565b60008060006060848603121561130c57600080fd5b6113158461128f565b92506113236020850161128f565b9150604084013590509250925092565b60006020828403121561134557600080fd5b5035919050565b815181526020808301516001600160a01b031690820152604081016105b7565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156113a5576113a561136c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113d4576113d461136c565b604052919050565b600067ffffffffffffffff8211156113f6576113f661136c565b5060051b60200190565b600082601f83011261141157600080fd5b81356020611426611421836113dc565b6113ab565b8083825260208201915060208460051b87010193508684111561144857600080fd5b602086015b8481101561146b5761145e8161128f565b835291830191830161144d565b509695505050505050565b6000806040838503121561148957600080fd5b823567ffffffffffffffff808211156114a157600080fd5b818501915085601f8301126114b557600080fd5b813560206114c5611421836113dc565b82815260059290921b840181019181810190898411156114e457600080fd5b948201945b83861015611502578535825294820194908201906114e9565b9650508601359250508082111561151857600080fd5b5061152585828601611400565b9150509250929050565b6000806040838503121561154257600080fd5b61154b8361128f565b91506115596020840161128f565b90509250929050565b600080828403608081121561157657600080fd5b61157f8461128f565b92506060601f198201121561159357600080fd5b61159b611382565b602085013581526040603f19830112156115b457600080fd5b6115bc611382565b9150604085013582526115d16060860161128f565b602083015281602082015280925050509250929050565b600181811c908216806115fc57607f821691505b60208210810361095257634e487b7160e01b600052602260045260246000fd5b60006020828403121561162e57600080fd5b815180151581146112f057600080fd5b808201808211156105b757634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212206cfa38c98a1dbc83c0c57df6dde487ca5954f78c48ab2d3cd31e08e05f677de364736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c80636ff96d17116100d1578063a543fdf61161008a578063c52c159311610064578063c52c15931461048e578063dd2e0ac0146104ae578063dd62ed3e146104ce578063f627590b146104ee57600080fd5b8063a543fdf61461041c578063a9059cbb1461044e578063b88a39151461046e57600080fd5b80636ff96d171461033857806370a08231146103855780638456cb59146103a55780638afb2207146103ba57806395d89b41146103e7578063a457c2d7146103fc57600080fd5b8063313ce56711610123578063313ce5671461028257806339509351146102a45780633f4ba83a146102c457806342966c68146102d95780635c975abb146102f957806361737d621461031857600080fd5b806306fdde03146101a6578063095ea7b3146101d157806317be3fa51461020157806318160ddd146102215780631fa29aad1461024057806323b872dd1461026257600080fd5b366101a15760405162461bcd60e51b81526020600482015260026024820152614e4160f01b60448201526064015b60405180910390fd5b600080fd5b3480156101b257600080fd5b506101bb61050e565b6040516101c89190611240565b60405180910390f35b3480156101dd57600080fd5b506101f16101ec3660046112ab565b6105a3565b60405190151581526020016101c8565b34801561020d57600080fd5b506101f161021c3660046112ab565b6105bd565b34801561022d57600080fd5b506002545b6040519081526020016101c8565b34801561024c57600080fd5b5061026061025b3660046112d5565b610616565b005b34801561026e57600080fd5b506101f161027d3660046112f7565b61070a565b34801561028e57600080fd5b5060015460405160ff90911681526020016101c8565b3480156102b057600080fd5b506101f16102bf3660046112ab565b61072e565b3480156102d057600080fd5b50610260610750565b3480156102e557600080fd5b506102606102f4366004611333565b610865565b34801561030557600080fd5b50600054600160a01b900460ff166101f1565b34801561032457600080fd5b506101f16103333660046112d5565b610872565b34801561034457600080fd5b506103586103533660046112d5565b610958565b6040805182518152602092830151805184830152909201516001600160a01b0316908201526060016101c8565b34801561039157600080fd5b506102326103a03660046112d5565b6109ab565b3480156103b157600080fd5b506102606109c9565b3480156103c657600080fd5b506103da6103d53660046112d5565b610acb565b6040516101c8919061134c565b3480156103f357600080fd5b506101bb610b32565b34801561040857600080fd5b506101f16104173660046112ab565b610b44565b34801561042857600080fd5b506005546001600160a01b03165b6040516001600160a01b0390911681526020016101c8565b34801561045a57600080fd5b506101f16104693660046112ab565b610bbf565b34801561047a57600080fd5b50600054610436906001600160a01b031681565b34801561049a57600080fd5b506101f16104a9366004611476565b610bcd565b3480156104ba57600080fd5b506101f16104c9366004611333565b610c74565b3480156104da57600080fd5b506102326104e936600461152f565b610ccb565b3480156104fa57600080fd5b506101f1610509366004611562565b610cf6565b606060016002018054610520906115e8565b80601f016020809104026020016040519081016040528092919081815260200182805461054c906115e8565b80156105995780601f1061056e57610100808354040283529160200191610599565b820191906000526020600020905b81548152906001019060200180831161057c57829003601f168201915b5050505050905090565b6000336105b1818585610d81565b60019150505b92915050565b60006105ca338484610e07565b7f9f1ec8c880f76798e7b793325d625e9b60e4082a553c98f42b6cda368dd6000833604080516001600160a01b039092168252602082018590520160405180910390a150600192915050565b6000546001600160a01b03168061064057604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b8919061161c565b6106d5576040516315ed864b60e21b815260040160405180910390fd5b6106e7826001600160a01b0316610edd565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600033610718858285610f33565b610723858585610f67565b506001949350505050565b6000336105b18185856107418383610ccb565b61074b919061163e565b610d81565b6000546001600160a01b03168061077a57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f2919061161c565b61080f576040516315ed864b60e21b815260040160405180910390fd5b61081761101b565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b61086f3382611047565b50565b600080546001600160a01b03168061089d57604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610915919061161c565b610932576040516315ed864b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038516179055600191505b50919050565b610960611203565b506001600160a01b0390811660009081526006602090815260409182902082518084018452815481528351808501909452600182015484526002909101549093168282015282015290565b6001600160a01b0381166000908152600660205260408120546105b7565b6000546001600160a01b0316806109f357604051637e70a7e360e01b815260040160405180910390fd5b6001600160a01b038116632f54bf6e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b919061161c565b610a88576040516315ed864b60e21b815260040160405180910390fd5b610a906110d4565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108473390565b604080518082019091526000808252602082015260055433906001600160a01b031681036109525750506001600160a01b03908116600090815260066020908152604091829020825180840190935260018101548352600201549092169181019190915290565b606060016003018054610520906115e8565b60003381610b528286610ccb565b905083811015610bb25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610198565b6107238286868403610d81565b6000336105b1818585610f67565b80518251600091908114610c125760405162461bcd60e51b815260206004820152600c60248201526b155b995c5d585b081b1a5cdd60a21b6044820152606401610198565b60005b81811015610723576000848281518110610c3157610c3161165f565b602002602001015190506000868381518110610c4f57610c4f61165f565b60200260200101519050610c6a610c633390565b8383610f67565b5050600101610c15565b6000610c8033836110ff565b7f4e7407468c9afb1673f0eb43b54dbfa1f26fd38ee8918b42318c78efefac177333604080516001600160a01b039092168252602082018590520160405180910390a1506001919050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b600554600090610d0e906001600160a01b0316610edd565b6005546001600160a01b031633036105b7576001600160a01b038084166000908152600660209081526040808320600101839055858201518051920151909316825291902080549091019055815115610d7857610d78838360200151602001518460000151610f67565b50600192915050565b610d93836001600160a01b0316610edd565b610da5826001600160a01b0316610edd565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b610e19826001600160a01b0316610edd565b6001600160a01b038084166000908152600660209081526040918290208251808401845281548152835180850190945260018201548452600290910154909316828201528201528051610e6c90836111b9565b60408051808201825282518490038152815180830183526020938401515190940184526001600160a01b039485168385015282810193845294841660009081526006835220935184559051805160018501550151600290920180546001600160a01b03191692909116919091179055565b6001600160a01b03811661086f5760405162461bcd60e51b815260206004820152601b60248201527f4c69623a20546172676574206973207a65726f206164647265737300000000006044820152606401610198565b6000610f3f8484610ccb565b90506000198114610f6157610f5481836111b9565b610f618484848403610d81565b50505050565b610f79836001600160a01b0316610edd565b610f8b826001600160a01b0316610edd565b6001600160a01b038316600090815260066020526040902054610fae81836111b9565b6001600160a01b0380851660008181526006602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061100e9086815260200190565b60405180910390a3610f61565b600054600160a01b900460ff1661104557604051638dfc202b60e01b815260040160405180910390fd5b565b611059826001600160a01b0316610edd565b6001600160a01b03821660009081526006602052604090205461107c81836111b9565b6001600160a01b03831660008181526006602090815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610dfa565b600054600160a01b900460ff16156110455760405163d93c066560e01b815260040160405180910390fd5b6001600160a01b0380831660009081526006602090815260409182902082518084018452815481528351808501909452600182015484526002909101548416838301908152918101929092525190911661116c57604051631ec4ebaf60e21b815260040160405180910390fd5b60208101515161117c90836111b9565b6001600160a01b03928316600090815260066020908152604080832060010180548690039055928101510151909316835290912080549091019055565b808210156111ff5760405162461bcd60e51b8152602060048201526013602482015272422069732067726561746572207468616e204160681b6044820152606401610198565b5050565b60405180604001604052806000815260200161123b60405180604001604052806000815260200160006001600160a01b031681525090565b905290565b60006020808352835180602085015260005b8181101561126e57858101830151858201604001528201611252565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146112a657600080fd5b919050565b600080604083850312156112be57600080fd5b6112c78361128f565b946020939093013593505050565b6000602082840312156112e757600080fd5b6112f08261128f565b9392505050565b60008060006060848603121561130c57600080fd5b6113158461128f565b92506113236020850161128f565b9150604084013590509250925092565b60006020828403121561134557600080fd5b5035919050565b815181526020808301516001600160a01b031690820152604081016105b7565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156113a5576113a561136c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113d4576113d461136c565b604052919050565b600067ffffffffffffffff8211156113f6576113f661136c565b5060051b60200190565b600082601f83011261141157600080fd5b81356020611426611421836113dc565b6113ab565b8083825260208201915060208460051b87010193508684111561144857600080fd5b602086015b8481101561146b5761145e8161128f565b835291830191830161144d565b509695505050505050565b6000806040838503121561148957600080fd5b823567ffffffffffffffff808211156114a157600080fd5b818501915085601f8301126114b557600080fd5b813560206114c5611421836113dc565b82815260059290921b840181019181810190898411156114e457600080fd5b948201945b83861015611502578535825294820194908201906114e9565b9650508601359250508082111561151857600080fd5b5061152585828601611400565b9150509250929050565b6000806040838503121561154257600080fd5b61154b8361128f565b91506115596020840161128f565b90509250929050565b600080828403608081121561157657600080fd5b61157f8461128f565b92506060601f198201121561159357600080fd5b61159b611382565b602085013581526040603f19830112156115b457600080fd5b6115bc611382565b9150604085013582526115d16060860161128f565b602083015281602082015280925050509250929050565b600181811c908216806115fc57607f821691505b60208210810361095257634e487b7160e01b600052602260045260246000fd5b60006020828403121561162e57600080fd5b815180151581146112f057600080fd5b808201808211156105b757634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212206cfa38c98a1dbc83c0c57df6dde487ca5954f78c48ab2d3cd31e08e05f677de364736f6c63430008180033",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "accountBalances(address)": {
        "details": "See {IERC20-accountBalances}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}.",
        "params": {
          "account": ": Bytes32 address type Note: The function `balanceOf` complies with that ERC20 standard"
        }
      },
      "burn(uint256)": {
        "details": "Burns token of `amount`"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getAttorney()": {
        "details": "Returns contracts account connected to the token contracts i.e.    - Attorney Note: Attorney account acts on behalf of a holders to retrive their token        in the event they lost access to their accounts."
      },
      "getLockedInfo(address)": {
        "details": "See IERC20.sol {getInfo}"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "lockToken(address,uint256)": {
        "details": "See IERC20.sol {lockToken}"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setAttorney(address)": {
        "details": "Replaces the attorney account. Only authorized owner account can perform this action."
      },
      "setOwnershipManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "unlockToken(uint256)": {
        "details": "See IERC20.sol {unlock}"
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchTransfer(uint256[],address[])": {
        "notice": "See IERC20.sol {batchTransfer} A dynamic transfer utility.  Note: The size of the amount array must match that of the  account's. Another benefit is that each of the addresses on the  list can be dynamically mapped to different amount."
      },
      "panicUnlock(address,(uint256,(uint256,address)))": {
        "notice": "See IERC20.sol {panicUnlock} Method is executed only of the caller is the attorney Note: Since the user is able to prove to the attorney that they own the lost account, they are also able to reclaim all balances."
      },
      "setOwnershipManager(address)": {
        "notice": "Set Ownership manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2446,
        "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
        "label": "ownershipManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IOwnerShip)3545"
      },
      {
        "astId": 2533,
        "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5647,
        "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(TokenInfo)3244_storage"
      },
      {
        "astId": 5652,
        "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Balances)3233_storage)"
      },
      {
        "astId": 5658,
        "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOwnerShip)3545": {
        "encoding": "inplace",
        "label": "contract IOwnerShip",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Balances)3233_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IERC20.Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)3233_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Balances)3233_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.Balances",
        "members": [
          {
            "astId": 3229,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "spendable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3232,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "locked",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Protected)3227_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Protected)3227_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.Protected",
        "members": [
          {
            "astId": 3224,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3226,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "escapeTo",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenInfo)3244_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.TokenInfo",
        "members": [
          {
            "astId": 3235,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3237,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "totalSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3239,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3241,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3243,
            "contract": "contracts/implementations/SimpliToken.sol:SimpliToken",
            "label": "attorney",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}