{
  "address": "0xa398e5b7Ca6a9F87AE02AEC1B8060A92eF05eD49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "_roleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errorMsg",
          "type": "string"
        }
      ],
      "name": "ErrorOccurred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "pingSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSafes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6ce58e98f7582ed7e52565c863f511eaf34c56597992bb242b1dd26b92ecb890",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xa398e5b7Ca6a9F87AE02AEC1B8060A92eF05eD49",
    "transactionIndex": 1,
    "gasUsed": "1605151",
    "logsBloom": "0x
    "blockHash": "0x02bbaa5205b345bd349fc27f4e217a747363038e3281def06e41f7d0b4578809",
    "transactionHash": "0x6ce58e98f7582ed7e52565c863f511eaf34c56597992bb242b1dd26b92ecb890",
    "logs": [],
    "blockNumber": 46105868,
    "cumulativeGasUsed": "1648921",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16884C8C6a494527f4541007A46239218e76F661",
    "0xD7c271d20c9E323336bFC843AEb8deC23B346352"
  ],
  "numDeployments": 2,
  "solcInputHash": "9a7d367fb544331e7a1b23751866d184",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"_roleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errorMsg\",\"type\":\"string\"}],\"name\":\"ErrorOccurred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"pingSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSafes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_feeTo\":\": Fee receiver\",\"_roleManager\":\": Role manager contract\"}},\"getSafe(uint256)\":{\"params\":{\"unit\":\": Unit amount\"}},\"pingSafe(uint256)\":{\"details\":\"Create a new safe.\"},\"setRoleManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}}},\"stateVariables\":{\"safeMap\":{\"details\":\"Mapping of unit contribution to safe.\"}},\"title\":\"SafeFactory: A standalone contract that manages safe creation and retrieval,  deletion, read and write data.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"=========== Constructor ===============\"},\"getSafe(uint256)\":{\"notice\":\"Returns then safe for 'unit'\"},\"pingSafe(uint256)\":{\"notice\":\"'unit' should not own a safe before now.          only address with owner permission can call.\"},\"setRoleManager(address)\":{\"notice\":\"Set Role manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standalone/SafeFactory.sol\":\"SafeFactory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\"},\"contracts/interfaces/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from './IERC20.sol';\\r\\n\\r\\ninterface Common {\\r\\n    event PoolCreated(Pool);\\r\\n    event NewContributorAdded(Pool);\\r\\n    event GetFinanced(Pool);\\r\\n    event Payback(Pool);\\r\\n    event Liquidated(Pool);\\r\\n    event Cancellation(uint unit);\\r\\n    event PoolEdited(Pool);\\r\\n\\r\\n    enum Stage {\\r\\n        JOIN, \\r\\n        GET, \\r\\n        PAYBACK, \\r\\n        CANCELED,\\r\\n        ENDED\\r\\n    }\\r\\n\\r\\n    // enum Network { HARDHAT, CELO, CROSSFI }\\r\\n\\r\\n    enum Phase { ALPHA, MAINNET }\\r\\n\\r\\n    enum Status { AVAILABLE, TAKEN }\\r\\n\\r\\n    enum Branch { CURRENT, RECORD }\\r\\n\\r\\n    enum Router { NONE, PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n    struct Pool {\\r\\n        Low low;\\r\\n        Big big;\\r\\n        Addresses addrs;\\r\\n        Router router;\\r\\n        Stage stage;\\r\\n        Status status;\\r\\n    }\\r\\n\\r\\n    struct Low {\\r\\n        uint8 maxQuorum;\\r\\n        uint8 selector;\\r\\n        uint24 colCoverage;\\r\\n        uint32 duration;\\r\\n        uint8 allGh;\\r\\n        uint8 userCount;\\r\\n    }\\r\\n\\r\\n    struct Big {\\r\\n        uint256 unit;\\r\\n        uint256 currentPool;\\r\\n        uint96 recordId;\\r\\n        uint96 unitId;\\r\\n    }\\r\\n\\r\\n    struct Point {\\r\\n        uint contributor;\\r\\n        uint creator;\\r\\n        uint referrals;\\r\\n        address user;\\r\\n        Phase phase;\\r\\n    }\\r\\n\\r\\n    struct PointsReturnValue {\\r\\n        string key;\\r\\n        Point[] value;\\r\\n    }\\r\\n\\r\\n    struct Interest {\\r\\n        uint fullInterest;\\r\\n        uint intPerSec;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Structured types - Address\\r\\n     * @param asset : Contract address of the asset in use.\\r\\n     * @param lastPaid: Last contributor who got finance.\\r\\n     * @param safe : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n     * @param admin : Pool creator.\\r\\n     * \\r\\n    */\\r\\n    struct Addresses {\\r\\n        IERC20 colAsset;\\r\\n        address lastPaid;\\r\\n        address safe;\\r\\n        address admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @param isMember : Whether user is a member or not\\r\\n     *  @param turnStartTime: Time when the contributor's turn start to count.\\r\\n     *  @param getFinanceTime: Date when loan was disbursed\\r\\n     *  @param paybackTime: Date which the borrowed fund must be retured\\r\\n     *  @param loan: Total debts owed by the last fund recipient.\\r\\n     *  @param colBals: Collateral balances of the last recipient.\\r\\n     *  @param sentQuota : Whether an user/current msg.sender has received or not.\\r\\n     *  @param id : Address of the last recipient.\\r\\n     * @param interestPaid : The amount of interest paid  \\r\\n    */\\r\\n    struct Contributor {\\r\\n        uint32 paybackTime;\\r\\n        uint32 turnStartTime;\\r\\n        uint32 getFinanceTime;\\r\\n        uint loan;\\r\\n        uint colBals;\\r\\n        address id;\\r\\n        bool sentQuota;\\r\\n    }\\r\\n\\r\\n    struct Price {\\r\\n        uint128 price;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct Provider {\\r\\n        uint slot;\\r\\n        uint amount;\\r\\n        uint rate;\\r\\n        uint earnStartDate;\\r\\n        address account;\\r\\n        Interest accruals;\\r\\n    }\\r\\n\\r\\n    struct Payback_Safe {\\r\\n        address user; \\r\\n        IERC20 baseAsset; \\r\\n        uint256 debt;\\r\\n        uint256 attestedInitialBal;\\r\\n        bool allGF; \\r\\n        Contributor[] cData;\\r\\n        bool isSwapped;\\r\\n        address defaulted;\\r\\n        uint96 recordId;\\r\\n        IERC20 collateralAsset;\\r\\n    }\\r\\n\\r\\n    struct Slot {\\r\\n        uint value;\\r\\n        bool isMember;\\r\\n        bool isAdmin;\\r\\n    }\\r\\n\\r\\n    struct ReadPoolDataReturnValue {\\r\\n        Pool pool;\\r\\n        ContributorReturnValue[] cData;\\r\\n    }\\r\\n\\r\\n    struct ReadRecordDataReturnValue {\\r\\n        Pool pool;\\r\\n        Contributor[] cData;\\r\\n    }\\r\\n\\r\\n    struct UpdatePoolData {\\r\\n        uint unit;\\r\\n        uint96 unitId;\\r\\n        uint96 recordId;\\r\\n        uint8 maxQuorum;\\r\\n        uint24 colCoverage;\\r\\n        IERC20 colAsset;\\r\\n        uint16 durationInHours;\\r\\n        address creator;\\r\\n        Router router; \\r\\n    }\\r\\n\\r\\n    struct Analytics {\\r\\n        uint256 tvlCollateral;\\r\\n        uint256 tvlBase;\\r\\n        uint totalPermissioned;\\r\\n        uint totalPermissionless;\\r\\n    }\\r\\n\\r\\n    struct ViewFactoryData {\\r\\n        Analytics analytics;\\r\\n        uint16 makerRate;\\r\\n        uint currentEpoches;\\r\\n        uint recordEpoches;\\r\\n    }\\r\\n\\r\\n    struct ContributorReturnValue {\\r\\n        Contributor profile;\\r\\n        Slot slot;\\r\\n        Common.Provider[] providers;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x46c85b1ab84886a4ef21b9a7b7534216778ac3dd132120498927ec91cd96af5f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f16e22e9c3da96f41e8237352b0d826ca0421b69340e09aedae74eb222428e6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface IFactory is Common {\\r\\n  function contributeThroughProvider(Provider[] memory providers, address borrower, uint unit) external returns(bool);\\r\\n  function getContributorProviders(address target, uint96 recordId) external view returns(Provider[] memory);\\r\\n}\",\"keccak256\":\"0xc37bf239c0cb0b905902e70c09cc4817b891a9e1fb99fe37da5c746c4a748adb\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IRoleBase \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IRoleBase {\\r\\n    function setRole(\\r\\n        address[] memory newRoleTos\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRoleBearer(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xa166efe0dfbcd8f4e00f33c155797b3e2d652087f630893518b0dec1f823519b\",\"license\":\"MIT\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ISafe {\\r\\n  function addUp(address user, uint recordId) external returns(bool);\\r\\n  function getFinance(\\r\\n    address user, \\r\\n    IERC20 baseAsset, \\r\\n    uint256 loan, \\r\\n    uint fee, \\r\\n    uint256 calculatedCol,\\r\\n    uint recordId\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function payback(Common.Payback_Safe memory, uint unit) external returns(uint collateral);\\r\\n  function cancel(address user, IERC20 asset, uint unit, uint recordId) external returns(bool);\\r\\n  function getData() external view returns(ViewData memory);\\r\\n\\r\\n  struct ViewData {\\r\\n    uint totalClients;\\r\\n    uint aggregateFee;\\r\\n  }\\r\\n\\r\\n  struct ViewUserData {\\r\\n    bool access;\\r\\n    uint collateralBalance;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xb113c5e00e96aa0ebf6bd50a40033cbde2e351f7494a38685f2e5bbe2d9929aa\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title Interface of the Safe manager\\r\\n * @author : Simplifinance (Written by Bobeu)\\r\\n */\\r\\ninterface ISafeFactory {  \\r\\n  /**\\r\\n   * Query safe for user\\r\\n   * @param unit : Address to get safe for\\r\\n   * @return A safe if none was found, it returns address(0).\\r\\n   */\\r\\n  function getSafe(uint256 unit) external view returns(address);\\r\\n  // function getSafe(address user) external view returns(address);\\r\\n\\r\\n/**\\r\\n * Clones and return a new safe \\r\\n * @param unit : Target address for whom to create safe\\r\\n */\\r\\n  function pingSafe(uint256 unit) external returns(address safe);\\r\\n\\r\\n  /**\\r\\n   * Safe struct map\\r\\n   * key: user address { EOA }\\r\\n   * value: Safe { Contract } \\r\\n   */\\r\\n  struct SafeData {\\r\\n    address key;\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0xb460c9de77c7f8be953e2a48d864e1307ea33a051e7deff43873ca47ecb8a730\",\"license\":\"MIT\"},\"contracts/libraries/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary ErrorLib {\\r\\n    error ErrorOccurred(string errorMsg);\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts any operation.\\r\\n     * @param _error : Error struct\\r\\n     */\\r\\n    function _throw(string memory _error) internal pure {\\r\\n        if(bytes(_error).length > 0){ \\r\\n            revert ErrorOccurred(_error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x967582ca2a833932c7403e6950ede1972f1b7f94ecfedd2d3ddee9175d309e5a\",\"license\":\"MIT\"},\"contracts/peripherals/OnlyRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IRoleBase } from \\\"../interfaces/IRoleBase.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract OnlyRoleBase is MsgSender {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Role manager address\\r\\n    IRoleBase public roleManager;\\r\\n\\r\\n    // ============= constructor ============\\r\\n    constructor(IRoleBase _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyRoleBearer {\\r\\n        _onlyRoleBearer();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Allow only account with role access\\r\\n    function _onlyRoleBearer() internal view {\\r\\n        IRoleBase mgr = roleManager;\\r\\n        if(address(mgr) == address(0)) 'Manager is zero'._throw();\\r\\n        if(!_hasRole(_msgSender())) 'Access denied'._throw();\\r\\n    }\\r\\n\\r\\n    function _hasRole(address target) internal view returns(bool result) {\\r\\n        result = IRoleBase(roleManager).hasRole(target);\\r\\n    }  \\r\\n\\r\\n    /// @dev Set role manager\\r\\n    function _setRoleManager(IRoleBase newManager) private{\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Role manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleBearer\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(IRoleBase(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd10e299b8bf634ae026b74cefab6933d135d5cc8265acde354aafccbbed4ad23\",\"license\":\"MIT\"},\"contracts/peripherals/Safe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { ReentrancyGuard } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\\\";\\r\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\r\\nimport { ISafe } from \\\"../interfaces/ISafe.sol\\\";\\r\\nimport { Common } from \\\"../interfaces/Common.sol\\\";\\r\\nimport { OnlyRoleBase, IRoleBase } from \\\"../peripherals/OnlyRoleBase.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\ncontract Safe is ISafe, OnlyRoleBase, ReentrancyGuard {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Number of contributors currently operating this safe\\r\\n    uint private userCount;\\r\\n\\r\\n    // Total fee collected\\r\\n    uint private aggregateFee;\\r\\n\\r\\n    // Amount to date paid by contributors\\r\\n    uint256 public totalAmountIn;\\r\\n\\r\\n    // Fee Receiver\\r\\n    address public immutable feeTo;\\r\\n\\r\\n    // Mapping of user to record Id to access\\r\\n    mapping(address => mapping(uint => bool)) private access;\\r\\n\\r\\n    // Mapping of users to recordId to Collateral\\r\\n    mapping(address => mapping(uint => uint256)) private collateralBalances;\\r\\n\\r\\n    // Mapping of contributors to amount paid as debt serviced\\r\\n    mapping(address contributor => uint) public paybacks;\\r\\n\\r\\n    ///@dev Only users with access role are allowed\\r\\n    modifier hasAccess(address user, uint recordId) {\\r\\n        if (!access[user][recordId]) 'User does not have access'._throw();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /** ========== Constructor ===============\\r\\n     * @param _roleManager : RoleBase manager contract\\r\\n     * @param _feeTo : Fee receiver account\\r\\n     */\\r\\n    constructor(IRoleBase _roleManager, address _feeTo) OnlyRoleBase(_roleManager) {\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        (bool s, ) = feeTo.call{value: msg.value}(\\\"\\\");\\r\\n        require(s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers new user\\r\\n     * @param user New user\\r\\n\\r\\n    */\\r\\n    function _addUser(address user, uint recordId) private {\\r\\n        assert(!access[user][recordId]);\\r\\n        access[user][recordId] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Implementation of ISafe.addUp\\r\\n     * See ISafe.addUp\\r\\n     */\\r\\n    function addUp(address user, uint recordId) external onlyRoleBearer returns (bool) {\\r\\n        unchecked {\\r\\n            userCount++;\\r\\n        }\\r\\n        _addUser(user, recordId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UnLocks collateral balances\\r\\n     * @param user Existing user\\r\\n\\r\\n    */\\r\\n    function _removeUser(address user, uint recordId) private {\\r\\n        assert(access[user][recordId]);\\r\\n        if(userCount > 0) {\\r\\n            unchecked {\\r\\n                userCount--;\\r\\n            }\\r\\n        }\\r\\n        access[user][recordId] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve spender contributor 'to' to spend from contract's balance\\r\\n     * @param to : Contributor\\r\\n     * @param asset : Currency in use\\r\\n     * @param amount : Value\\r\\n     * @notice Consideration is given to the previous allowances given to users.\\r\\n     */\\r\\n    function _setAllowance(address to, IERC20 asset, uint256 amount) private {\\r\\n        uint prev = IERC20(asset).allowance(address(this), to);\\r\\n        unchecked {\\r\\n            IERC20(asset).approve(to, amount + prev);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev End the current epoch\\r\\n     * @param baseAsset : AssetBase\\r\\n     * @param data : Contributors data\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _tryRoundUp(\\r\\n        IERC20 baseAsset,\\r\\n        uint unit,\\r\\n        uint96 recordId,\\r\\n        Common.Contributor[] memory data\\r\\n    ) internal {\\r\\n        uint erc20Balances = IERC20(baseAsset).balanceOf(address(this));\\r\\n        uint fees = aggregateFee;\\r\\n        unchecked {\\r\\n            if(erc20Balances > 0) {\\r\\n                if(fees > 0 && erc20Balances > fees) {\\r\\n                    erc20Balances -= fees;\\r\\n                    aggregateFee = 0;\\r\\n                    if(!IERC20(baseAsset).transfer(feeTo, fees)) 'Fee transfer failed'._throw();\\r\\n                }\\r\\n                if(erc20Balances > 0) {\\r\\n                    for(uint i = 0; i < data.length; i++) {\\r\\n                        erc20Balances -= _settleAccruals(data[i], unit, recordId, baseAsset);\\r\\n                    }\\r\\n                    if(erc20Balances > 0) {\\r\\n                        if(!IERC20(baseAsset).transfer(feeTo, erc20Balances)) 'Fee2 transfer failed'._throw();\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        userCount = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get Finance - We send USD to user and accept collateral.\\r\\n     * @param user : Beneficiary.\\r\\n     * @param baseAsset : Asset base\\r\\n     * @param loan : Amount to receive as loan.\\r\\n     * @param fee : Amount charged as platform fee\\r\\n     * @param calculatedCol : Amount required to pay as collateral\\r\\n     * @param recordId : Record Id\\r\\n     */\\r\\n    function getFinance(\\r\\n        address user,\\r\\n        IERC20 baseAsset,\\r\\n        uint256 loan,\\r\\n        uint fee,\\r\\n        uint256 calculatedCol,\\r\\n        uint recordId\\r\\n    ) external hasAccess(user, recordId) onlyRoleBearer returns(bool) {\\r\\n        assert(address(baseAsset) != address(0) && user != address(0));\\r\\n        collateralBalances[user][recordId] = calculatedCol;\\r\\n        uint loanable = loan;\\r\\n        if (fee > 0) {\\r\\n            unchecked {\\r\\n                aggregateFee += fee;\\r\\n                if (loanable > fee) {\\r\\n                    loanable -= fee;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _setAllowance(user, baseAsset, loanable);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pays back loan\\r\\n     * @param _p : Parameters of type PaybackParam\\r\\n     * _p.user : Current txn.origin not msg.sender\\r\\n     * _p.baseAsset : Asset base\\r\\n     * _p.debt : Amount owing by user\\r\\n     * _p.attestedInitialBal : Initial recorded balance of this contract before asset was transfered from the user.\\r\\n     * _p.allGF : Whether all the contributors have get finance or not\\r\\n     * _p.cData : Contributors data\\r\\n     * _p.isSwapped : If isSwapped is true, meaning the actual contributor defaulted.\\r\\n     * _p.defaulted : Address of the defaulted\\r\\n     * _p.collaterAsset: Asset used as collateral\\r\\n     * _p.recordId : Record Id. Every pool has a record Id i.e pool.bigInt.recordId\\r\\n     */\\r\\n    function payback(Common.Payback_Safe memory _p, uint unit) \\r\\n        external \\r\\n        onlyRoleBearer \\r\\n        hasAccess(_p.isSwapped? _p.defaulted : _p.user, _p.recordId) \\r\\n        returns (uint col) \\r\\n    {\\r\\n        col = collateralBalances[_p.user][_p.recordId];\\r\\n        if (_p.isSwapped) {\\r\\n            col = collateralBalances[_p.defaulted][_p.recordId];\\r\\n            collateralBalances[_p.defaulted][_p.recordId] = 0;\\r\\n            _removeUser(_p.defaulted, _p.recordId);\\r\\n        } else {\\r\\n            _removeUser(_p.user, _p.recordId);\\r\\n        }\\r\\n        collateralBalances[_p.user][_p.recordId] = 0;\\r\\n        paybacks[_p.user] = _p.debt;\\r\\n        unchecked {\\r\\n            totalAmountIn += _p.debt;\\r\\n        }\\r\\n        assert(IERC20(_p.baseAsset).balanceOf(address(this)) >= (_p.attestedInitialBal + _p.debt));\\r\\n        _setAllowance(_p.user, _p.collateralAsset, col);\\r\\n        if(_p.allGF) _tryRoundUp(_p.baseAsset, unit, _p.recordId, _p.cData);\\r\\n        return col;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Settles all pending loans and interests due to providers provided the contributor \\r\\n     *      joined via providers' services.\\r\\n     * @notice The amount paid back by the contributor should be enough to settle the providers.\\r\\n     * @param data : Profile of the current contributor.\\r\\n     * @param unit : Unit contribution\\r\\n     * @param baseAsset : Asset used as contribution currency\\r\\n     */\\r\\n    function _settleAccruals(\\r\\n        Common.Contributor memory data, \\r\\n        uint unit, \\r\\n        uint96 recordId,\\r\\n        IERC20 baseAsset\\r\\n    ) internal returns(uint totalPaidOut) {\\r\\n        uint amtLeft = paybacks[data.id];\\r\\n        Common.Provider[] memory providers = IFactory(_msgSender()).getContributorProviders(data.id, recordId);\\r\\n        unchecked {\\r\\n            if(providers.length > 0) {\\r\\n                for(uint i = 0; i < providers.length; i++) {\\r\\n                    uint providerPay = providers[i].amount + (providers[i].accruals.intPerSec * (data.paybackTime - providers[i].earnStartDate));\\r\\n                    assert(amtLeft >= providerPay);\\r\\n                    amtLeft -= providerPay;\\r\\n                    _setAllowance(providers[i].account, baseAsset, providerPay);\\r\\n                }\\r\\n                totalPaidOut += amtLeft;\\r\\n            } else {\\r\\n                totalPaidOut += unit;\\r\\n                _setAllowance(data.id, baseAsset, unit);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Called when a contributor remove a pool\\r\\n     * @param user : Contributor\\r\\n     * @param baseAsset : Asset base\\r\\n     * @param unit : Unit contribution\\r\\n     * @param recordId : Record Id\\r\\n     */\\r\\n    function cancel(\\r\\n        address user,\\r\\n        IERC20 baseAsset,\\r\\n        uint unit,\\r\\n        uint recordId\\r\\n    ) external onlyRoleBearer hasAccess(user, recordId) returns (bool) {\\r\\n        _setAllowance(user, baseAsset, unit);\\r\\n        _removeUser(user, recordId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns Safe-related data\\r\\n     */\\r\\n    function getData() external view returns (ViewData memory) {\\r\\n        return ViewData(userCount, aggregateFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns User-related data\\r\\n     * @param user : Contributor\\r\\n     * @param recordId : Record Id\\r\\n     */\\r\\n    function getUserData(\\r\\n        address user,\\r\\n        uint recordId\\r\\n    ) external view returns (ViewUserData memory) {\\r\\n        return ViewUserData(access[user][recordId], collateralBalances[user][recordId]);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf0b25ac60ee1acbb4d9f2f56d67d9d8549b44354f83148770ee43366b5bce0f9\",\"license\":\"MIT\"},\"contracts/standalone/SafeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { ISafeFactory } from \\\"../interfaces/ISafeFactory.sol\\\";\\r\\nimport { Safe, OnlyRoleBase, IRoleBase } from \\\"../peripherals/Safe.sol\\\";\\r\\n\\r\\n/**@title SafeFactory: A standalone contract that manages safe creation and retrieval, \\r\\n  deletion, read and write data.\\r\\n */\\r\\ncontract SafeFactory is ISafeFactory, OnlyRoleBase {\\r\\n  // using Clones for address;\\r\\n\\r\\n  // Total safe created to date\\r\\n  uint public totalSafes;\\r\\n\\r\\n  // Fee receiver account\\r\\n  address public feeTo;\\r\\n\\r\\n /**\\r\\n * @dev Mapping of unit contribution to safe.\\r\\n */\\r\\n  mapping(uint256 unitContribution => address safeAddresses) private safeMap;\\r\\n\\r\\n  /**\\r\\n   * =========== Constructor ===============\\r\\n   * @param _roleManager : Role manager contract\\r\\n   * @param _feeTo : Fee receiver\\r\\n   */\\r\\n  constructor (IRoleBase _roleManager, address _feeTo) OnlyRoleBase(_roleManager) {\\r\\n    feeTo = _feeTo;\\r\\n  }\\r\\n\\r\\n  // Not accepting values\\r\\n  receive() external payable {\\r\\n    revert();\\r\\n  }\\r\\n  \\r\\n  /**@dev Return if account owns a safe or not\\r\\n  */\\r\\n  function _hasSafe(uint256 unit) internal view returns (bool) {\\r\\n    return safeMap[unit] != address(0);\\r\\n  }\\r\\n\\r\\n  // Returns Safe for 'user'\\r\\n  function _getSafe(uint256 unit) internal view returns(address) { \\r\\n    return safeMap[unit];\\r\\n  }\\r\\n  \\r\\n  /**@dev Create a new safe.\\r\\n   * @notice 'unit' should not own a safe before now.\\r\\n   *          only address with owner permission can call.\\r\\n  */\\r\\n  function pingSafe(uint256 unit) external onlyRoleBearer returns(address _safe) {\\r\\n    if(!_hasSafe(unit)){\\r\\n      _safe = _createSafe(unit);\\r\\n    } else {\\r\\n      _safe = _getSafe(unit);\\r\\n    }\\r\\n    return _safe;\\r\\n  }\\r\\n\\r\\n  /** @dev Creates a new Safe\\r\\n  * @param unit : Amount\\r\\n  * @notice Even if user is trying to rekey or upgrade smartsafe, same amount of fee is required\\r\\n  * for successful upgrade.\\r\\n  */\\r\\n  function _createSafe(uint256 unit) private returns(address safe) {\\r\\n    totalSafes ++;\\r\\n    safe = address(new Safe(roleManager, feeTo));\\r\\n    _updateSafe(unit, safe);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Update storage with the new Safe instance : {internal}\\r\\n   * @param unit : Unit amount \\r\\n   * @param safe : New Safe address\\r\\n   */\\r\\n  function _updateSafe(uint256 unit, address safe) private {\\r\\n    safeMap[unit] = safe;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * Returns then safe for 'unit'\\r\\n    * @param unit : Unit amount\\r\\n  */\\r\\n  function getSafe(uint unit) external view returns(address) { \\r\\n    return _getSafe(unit);\\r\\n  }\\r\\n\\r\\n  function setFeeTo(address newFeeTo) public onlyRoleBearer {\\r\\n    feeTo = newFeeTo;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x6599eb1fd257c4893a7d15b3c993a834dca2f5e6bffb51612d21deecf86d42f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611bfe380380611bfe83398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b611b3d806100c16000396000f3fe6080604052600436106100735760003560e01c806383d0f8d21161004e57806383d0f8d214610103578063f1d588c514610123578063f46901ed14610153578063f72be5691461017557600080fd5b8062435da514610082578063017e7e58146100bf5780632f823186146100df57600080fd5b3661007d57600080fd5b600080fd5b34801561008e57600080fd5b506000546100a2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100cb57600080fd5b506002546100a2906001600160a01b031681565b3480156100eb57600080fd5b506100f560015481565b6040519081526020016100b6565b34801561010f57600080fd5b506100a261011e366004610417565b610195565b34801561012f57600080fd5b5061014361013e366004610430565b6101b4565b60405190151581526020016100b6565b34801561015f57600080fd5b5061017361016e366004610430565b6101e1565b005b34801561018157600080fd5b506100a2610190366004610417565b61020b565b6000818152600360205260408120546001600160a01b03165b92915050565b60006101be610257565b600080546001600160a01b0319166001600160a01b038416179055506001919050565b6101e9610257565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610215610257565b6000828152600360205260409020546001600160a01b031661023a576101ae826102d6565b6000828152600360205260409020546001600160a01b03166101ae565b6000546001600160a01b031680610298576102986040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b815250610370565b6102a13361039b565b6102d3576102d36040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b815250610370565b50565b60018054600091826102e783610460565b90915550506000546002546040516001600160a01b03928316929091169061030e9061040a565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610341573d6000803e3d6000fd5b50600083815260036020526040902080546001600160a01b0319166001600160a01b0383161790559050919050565b8051156102d3578060405163cc86106360e01b81526004016103929190610487565b60405180910390fd5b60008054604051633f784de560e11b81526001600160a01b03848116600483015290911690637ef09bca90602401602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ae91906104d6565b61160f806104f983390190565b60006020828403121561042957600080fd5b5035919050565b60006020828403121561044257600080fd5b81356001600160a01b038116811461045957600080fd5b9392505050565b60006001820161048057634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020808352835180602085015260005b818110156104b557858101830151858201604001528201610499565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156104e857600080fd5b8151801515811461045957600080fdfe60a060405234801561001057600080fd5b5060405161160f38038061160f83398101604081905261002f91610078565b600080546001600160a01b0319166001600160a01b038416179055600180556001600160a01b0316608052506100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b60805161152e6100e16000396000818160a80152818161017a01528181610a9d0152610bb7015261152e6000f3fe60806040526004361061009f5760003560e01c806341a8d7ce1161006457806341a8d7ce146102425780634cd01af114610272578063b28132c714610306578063bb16369f1461031c578063d4e869441461033c578063f1d588c51461035c57600080fd5b8062435da51461012b578063017e7e5814610168578063154e343b1461019c578063397c39bd146101d75780633bc5de30146101f757600080fd5b366101265760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163460405160006040518083038185875af1925050503d8060008114610111576040519150601f19603f3d011682016040523d82523d6000602084013e610116565b606091505b505090508061012457600080fd5b005b600080fd5b34801561013757600080fd5b5060005461014b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017457600080fd5b5061014b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101a857600080fd5b506101c96101b7366004610ef7565b60076020526000908152604090205481565b60405190815260200161015f565b3480156101e357600080fd5b506101c96101f2366004611145565b61037c565b34801561020357600080fd5b5060408051808201825260008082526020918201528151808301835260025480825260035491830191825283519081529051918101919091520161015f565b34801561024e57600080fd5b5061026261025d36600461124e565b610601565b604051901515815260200161015f565b34801561027e57600080fd5b506102e961028d36600461124e565b60408051808201825260008082526020918201819052825180840184526001600160a01b03959095168082526005835283822085835283528382205460ff16151586528152600682528281209381529281529120549082015290565b60408051825115158152602092830151928101929092520161015f565b34801561031257600080fd5b506101c960045481565b34801561032857600080fd5b5061026261033736600461127a565b610628565b34801561034857600080fd5b506102626103573660046112c0565b6106bf565b34801561036857600080fd5b50610262610377366004610ef7565b6107b8565b60006103866107e6565b8260c0015161039657825161039c565b8260e001515b6101008401516001600160a01b03821660009081526005602090815260408083206001600160601b039094168084529390915290205460ff1661041357610413604051806040016040528060198152602001785573657220646f6573206e6f7420686176652061636365737360381b815250610865565b84516001600160a01b031660009081526006602090815260408083206101008901516001600160601b0316845290915290205460c0860151909350156104c35760e0850180516001600160a01b0390811660009081526006602081815260408084206101008c0180516001600160601b0390811687529184528286205488519097168652938352818520845182168652909252832092909255925192519195506104be929116610890565b6104df565b6104df85600001518661010001516001600160601b0316610890565b84516001600160a01b0390811660009081526006602090815260408083206101008a01516001600160601b03168452825280832083905580890180518a51909516845260079092529091209190915551600480548201905560608601516105469190611319565b60208601516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b4919061133a565b10156105c2576105c2611353565b6105d6856000015186610120015185610903565b8460800151156105f9576105f98560200151858761010001518860a001516109f6565b505092915050565b600061060b6107e6565b60028054600101905561061e8383610c79565b5060015b92915050565b60006106326107e6565b6001600160a01b03851660009081526005602090815260408083208584529091529020548590839060ff1661069b5761069b604051806040016040528060198152602001785573657220646f6573206e6f7420686176652061636365737360381b815250610865565b6106a6878787610903565b6106b08785610890565b600192505b5050949350505050565b6001600160a01b03861660009081526005602090815260408083208484529091528120548790839060ff1661072857610728604051806040016040528060198152602001785573657220646f6573206e6f7420686176652061636365737360381b815250610865565b6107306107e6565b6001600160a01b0388161580159061075057506001600160a01b03891615155b61075c5761075c611353565b6001600160a01b0389166000908152600660209081526040808320878452909152902085905586861561079d5760038054880190558681111561079d578690035b6107a88a8a83610903565b5060019998505050505050505050565b60006107c26107e6565b600080546001600160a01b0319166001600160a01b0384161790555060015b919050565b6000546001600160a01b031680610827576108276040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b815250610865565b61083033610cdd565b610862576108626040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b815250610865565b50565b805115610862578060405163cc86106360e01b81526004016108879190611369565b60405180910390fd5b6001600160a01b038216600090815260056020908152604080832084845290915290205460ff166108c3576108c3611353565b600254156108d657600280546000190190555b6001600160a01b03909116600090815260056020908152604080832093835292905220805460ff19169055565b604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610977919061133a565b60405163095ea7b360e01b81526001600160a01b03868116600483015284830160248301529192509084169063095ea7b3906044016020604051808303816000875af11580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef91906113b8565b5050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a61919061133a565b6003549091508115610c6c57600081118015610a7c57508082115b15610b5657600060035560405163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052928290039287169063a9059cbb906044016020604051808303816000875af1158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e91906113b8565b610b5657610b5660405180604001604052806013815260200172119959481d1c985b9cd9995c8819985a5b1959606a1b815250610865565b8115610c6c5760005b8351811015610b9957610b8d848281518110610b7d57610b7d6113d5565b602002602001015187878a610d4c565b90920391600101610b5f565b508115610c6c5760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905287169063a9059cbb906044016020604051808303816000875af1158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3391906113b8565b610c6c57610c6c604051806040016040528060148152602001731199594c881d1c985b9cd9995c8819985a5b195960621b815250610865565b5050600060025550505050565b6001600160a01b038216600090815260056020908152604080832084845290915290205460ff1615610cad57610cad611353565b6001600160a01b03909116600090815260056020908152604080832093835292905220805460ff19166001179055565b60008054604051633f784de560e11b81526001600160a01b03848116600483015290911690637ef09bca90602401602060405180830381865afa158015610d28573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062291906113b8565b60a08401516001600160a01b0316600090815260076020526040812054813360a0880151604051633e3925f760e21b81526001600160a01b0391821660048201526001600160601b038816602482015291169063f8e497dc90604401600060405180830381865afa158015610dc5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ded91908101906113eb565b805190915015610ec35760005b8151811015610eb9576000828281518110610e1757610e176113d5565b602002602001015160600151896000015163ffffffff1603838381518110610e4157610e416113d5565b602002602001015160a001516020015102838381518110610e6457610e646113d5565b60200260200101516020015101905080841015610e8357610e83611353565b8084039350610eb0838381518110610e9d57610e9d6113d5565b6020026020010151608001518783610903565b50600101610dfa565b50918101916106b5565b85830192506106b58760a001518588610903565b6001600160a01b038116811461086257600080fd5b80356107e181610ed7565b600060208284031215610f0957600080fd5b8135610f1481610ed7565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715610f5457610f54610f1b565b60405290565b604051610140810167ffffffffffffffff81118282101715610f5457610f54610f1b565b60405160c0810167ffffffffffffffff81118282101715610f5457610f54610f1b565b6040805190810167ffffffffffffffff81118282101715610f5457610f54610f1b565b604051601f8201601f1916810167ffffffffffffffff81118282101715610fed57610fed610f1b565b604052919050565b801515811461086257600080fd5b80356107e181610ff5565b600067ffffffffffffffff82111561102857611028610f1b565b5060051b60200190565b803563ffffffff811681146107e157600080fd5b600082601f83011261105757600080fd5b8135602061106c6110678361100e565b610fc4565b82815260e0928302850182019282820191908785111561108b57600080fd5b8387015b858110156111215781818a0312156110a75760008081fd5b6110af610f31565b6110b882611032565b81526110c5868301611032565b8682015260406110d6818401611032565b90820152606082810135908201526080808301359082015260a0808301356110fd81610ed7565b9082015260c08281013561111081610ff5565b90820152845292840192810161108f565b5090979650505050505050565b80356001600160601b03811681146107e157600080fd5b6000806040838503121561115857600080fd5b823567ffffffffffffffff8082111561117057600080fd5b90840190610140828703121561118557600080fd5b61118d610f5a565b61119683610eec565b81526111a460208401610eec565b602082015260408301356040820152606083013560608201526111c960808401611003565b608082015260a0830135828111156111e057600080fd5b6111ec88828601611046565b60a0830152506111fe60c08401611003565b60c082015261120f60e08401610eec565b60e0820152610100915061122482840161112e565b828201526101209150611238828401610eec565b9181019190915295602094909401359450505050565b6000806040838503121561126157600080fd5b823561126c81610ed7565b946020939093013593505050565b6000806000806080858703121561129057600080fd5b843561129b81610ed7565b935060208501356112ab81610ed7565b93969395505050506040820135916060013590565b60008060008060008060c087890312156112d957600080fd5b86356112e481610ed7565b955060208701356112f481610ed7565b95989597505050506040840135936060810135936080820135935060a0909101359150565b8082018082111561062257634e487b7160e01b600052601160045260246000fd5b60006020828403121561134c57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b60006020808352835180602085015260005b818110156113975785810183015185820160400152820161137b565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156113ca57600080fd5b8151610f1481610ff5565b634e487b7160e01b600052603260045260246000fd5b600060208083850312156113fe57600080fd5b825167ffffffffffffffff81111561141557600080fd5b8301601f8101851361142657600080fd5b80516114346110678261100e565b81815260e0918202830184019184820191908884111561145357600080fd5b938501935b838510156114ec57848903818112156114715760008081fd5b611479610f7e565b86518152878701518882015260408088015181830152606080890151908301526080808901516114a881610ed7565b9083015260a0609f1984018213156114c05760008081fd5b6114c8610fa1565b89820151815260c08a01518b82015290830152508452509384019391850191611458565b5097965050505050505056fea26469706673582212203d1772ebbf986f7c12bd07d18b77b6008068324d6e15678a01f6bfc7eb6ca28a64736f6c63430008180033a2646970667358221220b98a19f61184f452140a019cdbfe94d33df3d09d81589d1b6124d2f35c8e55ab64736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_feeTo": ": Fee receiver",
          "_roleManager": ": Role manager contract"
        }
      },
      "getSafe(uint256)": {
        "params": {
          "unit": ": Unit amount"
        }
      },
      "pingSafe(uint256)": {
        "details": "Create a new safe."
      },
      "setRoleManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      }
    },
    "stateVariables": {
      "safeMap": {
        "details": "Mapping of unit contribution to safe."
      }
    },
    "title": "SafeFactory: A standalone contract that manages safe creation and retrieval,  deletion, read and write data.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "=========== Constructor ==============="
      },
      "getSafe(uint256)": {
        "notice": "Returns then safe for 'unit'"
      },
      "pingSafe(uint256)": {
        "notice": "'unit' should not own a safe before now.          only address with owner permission can call."
      },
      "setRoleManager(address)": {
        "notice": "Set Role manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4095,
        "contract": "contracts/standalone/SafeFactory.sol:SafeFactory",
        "label": "roleManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoleBase)1191"
      },
      {
        "astId": 8554,
        "contract": "contracts/standalone/SafeFactory.sol:SafeFactory",
        "label": "totalSafes",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8556,
        "contract": "contracts/standalone/SafeFactory.sol:SafeFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8561,
        "contract": "contracts/standalone/SafeFactory.sol:SafeFactory",
        "label": "safeMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleBase)1191": {
        "encoding": "inplace",
        "label": "contract IRoleBase",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}