{
  "address": "0x74C073D9d460458f2703cc27e6eD39fe3270a602",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFactory",
          "name": "_flexpoolFactory",
          "type": "address"
        },
        {
          "internalType": "contract IRoleBase",
          "name": "_roleManager",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "contract ISupportedAsset",
          "name": "_assetManager",
          "type": "address"
        },
        {
          "internalType": "contract ISafeFactory",
          "name": "_safeFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errorMsg",
          "type": "string"
        }
      ],
      "name": "ErrorOccurred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earnStartDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Interest",
              "name": "accruals",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Provider[]",
          "name": "providers",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earnStartDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Interest",
              "name": "accruals",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Provider",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earnStartDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Interest",
              "name": "accruals",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Provider",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetManager",
      "outputs": [
        {
          "internalType": "contract ISupportedAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "providersSlots",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flexpoolFactory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProviders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earnStartDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Interest",
              "name": "accruals",
              "type": "tuple"
            }
          ],
          "internalType": "struct Common.Provider[]",
          "name": "prov",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rate",
          "type": "uint16"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeFactory",
      "outputs": [
        {
          "internalType": "contract ISafeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLiquidity",
          "type": "uint256"
        }
      ],
      "name": "setMinimumLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "slots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasIndex",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66ad775a3bb5b069dc4c04767fcff0873f961e98f2410b89a6292e038e28686e",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0x74C073D9d460458f2703cc27e6eD39fe3270a602",
    "transactionIndex": 1,
    "gasUsed": "1387006",
    "logsBloom": "0x
    "blockHash": "0x7c97b67808b324c33f5bcafdf37dcce53d99ee9f0ccb68f24e0fecd9495cab5f",
    "transactionHash": "0x66ad775a3bb5b069dc4c04767fcff0873f961e98f2410b89a6292e038e28686e",
    "logs": [],
    "blockNumber": 44487724,
    "cumulativeGasUsed": "1430764",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16f0512caA28DA6a890589819Fb70815DFd1206E",
    "0x79dF2FCc7DfDdc0C85Cc1f82B1f631b4b9D994B0",
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1",
    "0xa00E598D0c6c2Ab62E74B1282c9Efd9d2010F47A",
    "0xB868518D5E0dC52A74301e24763312840B2CdB2d"
  ],
  "numDeployments": 7,
  "solcInputHash": "42db8ebf251f385d0f8e47a8d1c5a23d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_flexpoolFactory\",\"type\":\"address\"},{\"internalType\":\"contract IRoleBase\",\"name\":\"_roleManager\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"contract ISupportedAsset\",\"name\":\"_assetManager\",\"type\":\"address\"},{\"internalType\":\"contract ISafeFactory\",\"name\":\"_safeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errorMsg\",\"type\":\"string\"}],\"name\":\"ErrorOccurred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Common.Provider[]\",\"name\":\"providers\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Common.Provider\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Common.Provider\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetManager\",\"outputs\":[{\"internalType\":\"contract ISupportedAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"providersSlots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexpoolFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProviders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"internalType\":\"struct Common.Provider[]\",\"name\":\"prov\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"}],\"name\":\"provideLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeFactory\",\"outputs\":[{\"internalType\":\"contract ISafeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLiquidity\",\"type\":\"uint256\"}],\"name\":\"setMinimumLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasIndex\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Simplifi (Bobeu)\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"borrow(uint256[],uint256)\":{\"details\":\"Users can borrow from liquidity providers to finance a Flexpool\",\"params\":{\"amount\":\": Amount user wish to borrow.\",\"providersSlots\":\": Selected providers' slots are required \"}},\"constructor\":{\"params\":{\"_assetManager\":\": Asset Manager contract.\",\"_baseAsset\":\": Base asset to use for contribution e.g cUSD.\",\"_roleManager\":\": RoleBase manager contract.\"}},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"provideLiquidity(uint16)\":{\"details\":\"Utility for provide liquidity\",\"params\":{\"rate\":\": Interest rate the provider is willing to charge.         We choose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set    her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5.    Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating    zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.   The minimum interest rate to set is 0.01% if interest must be set at least.   To reiterate, raw interest must be multiplied by 100 before giving as input. \"}},\"removeLiquidity()\":{\"details\":\"Remove liquidity.\"},\"setMinimumLiquidity(uint256)\":{\"details\":\"Set minimum liquidity. \",\"params\":{\"_minLiquidity\":\": Minimum liquidity\"}},\"setRoleManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused.\"}},\"stateVariables\":{\"slots\":{\"details\":\"Mapping of providers to their position in the providers list\"}},\"title\":\"Providers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"============= Constructor ================At construction, we initialized the providers array slot 0 with an empty provider data. This is so we can reuse the slot in the future such as reseting a provider's data or ensuring  that providers with zero index are restricted from calling certain functions.\"},\"provideLiquidity(uint16)\":{\"notice\":\"User must approve this contract with the liquidiy amount prior to this call.\"},\"removeLiquidity()\":{\"notice\":\"Liquidity can be removed anytime provided the balance exceeds zero\"},\"setMinimumLiquidity(uint256)\":{\"notice\":\"Only accounts with rolebearer access are allowed\"},\"setRoleManager(address)\":{\"notice\":\"Set Role manager\"},\"slots(address)\":{\"notice\":\"Slot '0' is reserved\"}},\"notice\":\"Deployable Providers contract is a general liquidity pool purposely for funding Flexpools. Contributors that cannot afford unit contributions can access providers pool to source for funds.  Loans accessed in this pool are not withdrawable by the borrower. Since there is a direct relationship between the Providers contract and the Flexpool's, borrowed funds are moved straight to the Flexpool contract and registered on behalf of the contributor. With this contract, you can perform the following actions: - Provider liquidity. - Remove liquidity - Borrow to finance Flexpool - Get the list of providers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standalone/celo/Providers.sol\":\"Providers\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/apis/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from './IERC20.sol';\\r\\n\\r\\ninterface Common {\\r\\n    event PoolCreated(Pool);\\r\\n    event NewContributorAdded(Pool);\\r\\n    event GetFinanced(Pool);\\r\\n    event Payback(Pool);\\r\\n    event Liquidated(Pool);\\r\\n    event Cancellation(uint unit);\\r\\n    event PoolEdited(Pool);\\r\\n\\r\\n    enum Stage {\\r\\n        JOIN, \\r\\n        GET, \\r\\n        PAYBACK, \\r\\n        CANCELED,\\r\\n        ENDED\\r\\n    }\\r\\n\\r\\n    enum Status { AVAILABLE, TAKEN }\\r\\n\\r\\n    enum Branch { CURRENT, RECORD }\\r\\n\\r\\n    enum Router { PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n    struct Pool {\\r\\n        Low low;\\r\\n        Big big;\\r\\n        Addresses addrs;\\r\\n        Router router;\\r\\n        Stage stage;\\r\\n        Status status;\\r\\n    }\\r\\n\\r\\n    struct Low {\\r\\n        uint8 maxQuorum;\\r\\n        uint8 selector;\\r\\n        uint24 colCoverage;\\r\\n        uint32 duration;\\r\\n        uint8 allGh;\\r\\n        uint8 userCount;\\r\\n    }\\r\\n\\r\\n    struct Big {\\r\\n        uint256 unit;\\r\\n        uint256 currentPool;\\r\\n        uint96 recordId;\\r\\n        uint96 unitId;\\r\\n    }\\r\\n\\r\\n    struct Point {\\r\\n        uint contributor;\\r\\n        uint creator;\\r\\n        uint referrals;\\r\\n        address user;\\r\\n    }\\r\\n\\r\\n    struct Interest {\\r\\n        uint fullInterest;\\r\\n        uint intPerSec;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Structured types - Address\\r\\n     * @param asset : Contract address of the asset in use.\\r\\n     * @param lastPaid: Last contributor who got finance.\\r\\n     * @param safe : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n     * @param admin : Pool creator.\\r\\n     * \\r\\n    */\\r\\n    struct Addresses {\\r\\n        IERC20 colAsset;\\r\\n        address lastPaid;\\r\\n        address safe;\\r\\n        address admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @param isMember : Whether user is a member or not\\r\\n     *  @param turnStartTime: Time when the contributor's turn start to count.\\r\\n     *  @param getFinanceTime: Date when loan was disbursed\\r\\n     *  @param paybackTime: Date which the borrowed fund must be retured\\r\\n     *  @param loan: Total debts owed by the last fund recipient.\\r\\n     *  @param colBals: Collateral balances of the last recipient.\\r\\n     *  @param sentQuota : Whether an user/current msg.sender has received or not.\\r\\n     *  @param id : Address of the last recipient.\\r\\n     * @param interestPaid : The amount of interest paid  \\r\\n    */\\r\\n    struct Contributor {\\r\\n        uint32 paybackTime;\\r\\n        uint32 turnStartTime;\\r\\n        uint32 getFinanceTime;\\r\\n        uint loan;\\r\\n        uint colBals;\\r\\n        address id;\\r\\n        bool sentQuota;\\r\\n    }\\r\\n\\r\\n    struct Price {\\r\\n        uint128 price;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct Provider {\\r\\n        uint slot;\\r\\n        uint amount;\\r\\n        uint rate;\\r\\n        uint earnStartDate;\\r\\n        address account;\\r\\n        Interest accruals;\\r\\n    }\\r\\n\\r\\n    struct Payback_Safe {\\r\\n        address user; \\r\\n        IERC20 baseAsset; \\r\\n        uint256 debt;\\r\\n        uint256 attestedInitialBal;\\r\\n        bool allGF; \\r\\n        Contributor[] cData;\\r\\n        bool isSwapped;\\r\\n        address defaulted;\\r\\n        uint96 recordId;\\r\\n        IERC20 collateralAsset;\\r\\n    }\\r\\n\\r\\n    struct Slot {\\r\\n        uint value;\\r\\n        bool isMember;\\r\\n        bool isAdmin;\\r\\n    }\\r\\n\\r\\n    struct ReadPoolDataReturnValue {\\r\\n        Pool pool;\\r\\n        ContributorReturnValue[] cData;\\r\\n    }\\r\\n\\r\\n    struct ReadRecordDataReturnValue {\\r\\n        Pool pool;\\r\\n        Contributor[] cData;\\r\\n    }\\r\\n\\r\\n    struct UpdatePoolData {\\r\\n        uint unit;\\r\\n        uint96 unitId;\\r\\n        uint96 recordId;\\r\\n        uint8 maxQuorum;\\r\\n        uint24 colCoverage;\\r\\n        IERC20 colAsset;\\r\\n        uint16 durationInHours;\\r\\n        address creator;\\r\\n        Router router; \\r\\n    }\\r\\n\\r\\n    struct Analytics {\\r\\n        uint256 tvlCollateral;\\r\\n        uint256 tvlBase;\\r\\n        uint totalPermissioned;\\r\\n        uint totalPermissionless;\\r\\n    }\\r\\n\\r\\n    struct ViewFactoryData {\\r\\n        Analytics analytics;\\r\\n        uint16 makerRate;\\r\\n        uint currentEpoches;\\r\\n        uint recordEpoches;\\r\\n    }\\r\\n\\r\\n    struct ContributorReturnValue {\\r\\n        Contributor profile;\\r\\n        Slot slot;\\r\\n        Common.Provider[] providers;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x5bb349e4b02dfd3e9af2080400de0e562e8809e8f2544c0424821ce71e6b03b8\",\"license\":\"MIT\"},\"contracts/apis/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f16e22e9c3da96f41e8237352b0d826ca0421b69340e09aedae74eb222428e6\",\"license\":\"MIT\"},\"contracts/apis/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/apis/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface IFactory is Common {\\r\\n  function contributeThroughProvider(Provider[] memory providers, address borrower, uint unit) external returns(bool);\\r\\n  function getContributorProviders(address target, uint96 recordId) external view returns(Provider[] memory);\\r\\n}\",\"keccak256\":\"0xc37bf239c0cb0b905902e70c09cc4817b891a9e1fb99fe37da5c746c4a748adb\",\"license\":\"MIT\"},\"contracts/apis/IRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IRoleBase \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IRoleBase {\\r\\n    function setRole(\\r\\n        address[] memory newRoleTos\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRoleBearer(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xa166efe0dfbcd8f4e00f33c155797b3e2d652087f630893518b0dec1f823519b\",\"license\":\"MIT\"},\"contracts/apis/ISafeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title Interface of the Safe manager\\r\\n * @author : Simplifinance (Written by Bobeu)\\r\\n */\\r\\ninterface ISafeFactory {  \\r\\n  /**\\r\\n   * Query safe for user\\r\\n   * @param unit : Address to get safe for\\r\\n   * @return A safe if none was found, it returns address(0).\\r\\n   */\\r\\n  function getSafe(uint256 unit) external view returns(address);\\r\\n  // function getSafe(address user) external view returns(address);\\r\\n\\r\\n/**\\r\\n * Clones and return a new safe \\r\\n * @param unit : Target address for whom to create safe\\r\\n */\\r\\n  function pingSafe(uint256 unit) external returns(address safe);\\r\\n\\r\\n  /**\\r\\n   * Safe struct map\\r\\n   * key: user address { EOA }\\r\\n   * value: Safe { Contract } \\r\\n   */\\r\\n  struct SafeData {\\r\\n    address key;\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0xb460c9de77c7f8be953e2a48d864e1307ea33a051e7deff43873ca47ecb8a730\",\"license\":\"MIT\"},\"contracts/apis/ISupportedAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface ISupportedAsset {\\r\\n  function isSupportedAsset(address _asset) external view returns(bool);\\r\\n  function getDefaultSupportedCollateralAsset() external view returns(address _default);\\r\\n}\",\"keccak256\":\"0x676b33d227f783ad956a0abe0877df24ffcec14f4991119903801ce207e281bf\",\"license\":\"MIT\"},\"contracts/libraries/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary ErrorLib {\\r\\n    error ErrorOccurred(string errorMsg);\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts any operation.\\r\\n     * @param _error : Error struct\\r\\n     */\\r\\n    function _throw(string memory _error) internal pure {\\r\\n        if(bytes(_error).length > 0){ \\r\\n            revert ErrorOccurred(_error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x967582ca2a833932c7403e6950ede1972f1b7f94ecfedd2d3ddee9175d309e5a\",\"license\":\"MIT\"},\"contracts/peripherals/ERC20Manager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"../apis/IERC20.sol\\\";\\r\\nimport { ISupportedAsset } from \\\"../apis/ISupportedAsset.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\nimport { SafeGetter, IRoleBase, ISafeFactory } from \\\"./SafeGetter.sol\\\";\\r\\n\\r\\nabstract contract ERC20Manager is SafeGetter {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Supportasset manager contract\\r\\n    ISupportedAsset public immutable assetManager;\\r\\n\\r\\n    // Base asset contract e.g cUSD\\r\\n    IERC20 public immutable baseAsset;\\r\\n\\r\\n    modifier onlySupportedAsset(IERC20 asset) {\\r\\n        if(asset != baseAsset){\\r\\n            if(!ISupportedAsset(assetManager).isSupportedAsset(address(asset))) 'Unsupported Asset'._throw();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============= Constructor ================\\r\\n\\r\\n    constructor(\\r\\n        ISupportedAsset _assetManager, \\r\\n        IERC20 _baseAsset, \\r\\n        IRoleBase _roleManager, \\r\\n        ISafeFactory _safeFactory\\r\\n    ) SafeGetter(_safeFactory, _roleManager) {\\r\\n        if(_assetManager == assetManager) \\\"_assetManager is zero\\\"._throw();\\r\\n        if(_baseAsset == baseAsset) \\\"_baseAsset is zero\\\"._throw();\\r\\n        assetManager = _assetManager;\\r\\n        baseAsset = _baseAsset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate allowance given by user against actual value\\r\\n     * @param asset : ERC20 compatible contract\\r\\n     * @param owner : Owner account\\r\\n     * @param value : Value to compare allowance to\\r\\n     */\\r\\n    function _validateAllowance(\\r\\n        IERC20 asset, \\r\\n        address owner, \\r\\n        uint value\\r\\n    ) \\r\\n        onlySupportedAsset(asset)\\r\\n        internal \\r\\n        view\\r\\n        returns(uint allowance) \\r\\n    {\\r\\n        assert(address(asset) != address(0));\\r\\n        assert(owner != address(0));\\r\\n        allowance = IERC20(asset).allowance(owner, address(this));\\r\\n        if(allowance < value) 'Value exceed allowance'._throw();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate allowance given by user against actual value\\r\\n     * @param asset : ERC20 compatible contract\\r\\n     * @param owner : Owner account\\r\\n     * @param beneficiary : Recipient of the allowance\\r\\n     * @param value : Value to compare allowance to\\r\\n    */\\r\\n    function _checkAndWithdrawAllowance(IERC20 asset, address owner, address beneficiary, uint value) internal returns(uint allowance) {\\r\\n        allowance = _validateAllowance(asset, owner, value);\\r\\n        assert(beneficiary != address(0));\\r\\n        assert(address(asset) != address(0));\\r\\n        if(allowance > 0){\\r\\n            if(!IERC20(asset).transferFrom(owner, beneficiary, allowance)) 'TrxFer failed'._throw();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve an account to spend from the contract balance\\r\\n     * @param asset : ERC20 compatible contract\\r\\n     * @param spender : Recipient of the allowance\\r\\n     * @param value : Amount to approve\\r\\n    */\\r\\n    function _setApprovalFor(IERC20 asset, address spender, uint value) internal {\\r\\n        assert(spender != address(0));\\r\\n        assert(address(asset) != address(0));\\r\\n        if(!IERC20(asset).approve(spender, value)) 'Approval Failed'._throw();\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xa1f548f2bad6dcafcadc675af77feeb7cbc3b0e3d07bbe34ac9c5c99fee2ee4c\",\"license\":\"MIT\"},\"contracts/peripherals/MinimumLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\nimport { ERC20Manager, IRoleBase, IERC20, ISupportedAsset, ISafeFactory } from \\\"./ERC20Manager.sol\\\";\\r\\n\\r\\nabstract contract MinimumLiquidity is ERC20Manager {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Minimum liquidity a provider can make\\r\\n    uint public minimumLiquidity;\\r\\n\\r\\n    // ============= Constructor ================\\r\\n    constructor(\\r\\n        ISupportedAsset _assetManager,\\r\\n        IERC20 _baseAsset, \\r\\n        IRoleBase _roleManager,\\r\\n        ISafeFactory _safeFactory\\r\\n    ) ERC20Manager(_assetManager, _baseAsset, _roleManager, _safeFactory){\\r\\n        if(address(_roleManager) == address(0)) '_roleManager is zero'._throw();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set minimum liquidity. \\r\\n     * @param _minLiquidity : Minimum liquidity\\r\\n     * @notice Only accounts with rolebearer access are allowed\\r\\n     */\\r\\n    function setMinimumLiquidity(uint _minLiquidity) public onlyRoleBearer {\\r\\n        if(_minLiquidity == minimumLiquidity) 'Param is same'._throw();\\r\\n        minimumLiquidity = _minLiquidity;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2dff52bc2414301c9724e159abe047b34e7f61612b32c6e75d55dfde126d26f7\",\"license\":\"MIT\"},\"contracts/peripherals/OnlyRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IRoleBase } from \\\"../apis/IRoleBase.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract OnlyRoleBase is MsgSender {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Role manager address\\r\\n    IRoleBase public roleManager;\\r\\n\\r\\n    // ============= constructor ============\\r\\n    constructor(IRoleBase _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyRoleBearer {\\r\\n        _onlyRoleBearer();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Allow only account with role access\\r\\n    function _onlyRoleBearer() internal view {\\r\\n        IRoleBase mgr = roleManager;\\r\\n        if(address(mgr) == address(0)) 'Manager is zero'._throw();\\r\\n        if(!_hasRole(_msgSender())) 'Access denied'._throw();\\r\\n    }\\r\\n\\r\\n    function _hasRole(address target) internal view returns(bool result) {\\r\\n        result = IRoleBase(roleManager).hasRole(target);\\r\\n    }  \\r\\n\\r\\n    /// @dev Set role manager\\r\\n    function _setRoleManager(IRoleBase newManager) private{\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Role manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleBearer\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(IRoleBase(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa16a1ee72f3b6ef52356210cdc85a46ddd5a88d56c0c044c0740b68cf5b83438\",\"license\":\"MIT\"},\"contracts/peripherals/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { OnlyRoleBase, IRoleBase } from \\\"./OnlyRoleBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n * \\r\\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\\r\\n * Thanks to the OZ team.\\r\\n */\\r\\nabstract contract Pausable is OnlyRoleBase {\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is paused.\\r\\n     */\\r\\n    error EnforcedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is not paused.\\r\\n     */\\r\\n    error ExpectedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor(\\r\\n        IRoleBase _roleManager\\r\\n    ) OnlyRoleBase(_roleManager) {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view {\\r\\n        if (paused()) {\\r\\n            revert EnforcedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        if (!paused()) {\\r\\n            revert ExpectedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * Only owner role can call.\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function pause() \\r\\n        public \\r\\n        onlyRoleBearer\\r\\n        whenNotPaused \\r\\n    {\\r\\n        _paused = true; \\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Only owner role can call.\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function unpause() \\r\\n        public \\r\\n        onlyRoleBearer \\r\\n        whenPaused \\r\\n    {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd48388157497f29b61ee0598bbb5d490528089a1e4b4e6c6ed7a8dd2adee0c9c\",\"license\":\"MIT\"},\"contracts/peripherals/SafeGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\nimport { ISafeFactory } from \\\"../apis/ISafeFactory.sol\\\";\\r\\nimport { Pausable, IRoleBase } from \\\"./Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title : Safe storage contract\\r\\n * @author : Simplifi. Written by Isaac Jesse, a.k.a Bobeu https://github.com/bobeu\\r\\n * @notice : Safe is non-deployeable consumed by the FlexpoolFactory contract for managing contributors funds.\\r\\n *          We employed this strategy to achieve high security and users confidence while interacting with the protocol.\\r\\n *          The strategy utilizes the SafeGlobal protocol on the frontend to deploy a new Safe account for every unique \\r\\n *          contribution unit.\\r\\n */\\r\\nabstract contract SafeGetter is Pausable {\\r\\n\\r\\n    // Safe factory contract\\r\\n    ISafeFactory public immutable safeFactory;\\r\\n\\r\\n    // Mapping of unit contribution to Safe struct\\r\\n    mapping (uint256 => address) private safes;\\r\\n\\r\\n    constructor(ISafeFactory _safeFactory, IRoleBase _roleManager) Pausable(_roleManager) {\\r\\n        safeFactory = _safeFactory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Checks, validate and return safe for the target address.\\r\\n        * @param unit : Unit contribution.\\r\\n    */\\r\\n    function _getSafe(uint256 unit) internal returns(address safe) {\\r\\n        safe = ISafeFactory(safeFactory).pingSafe(unit);\\r\\n        assert(safe != address(0));\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6608a065f90075c068aae75d64853210e3846f8698b9cd495187d3f5e7292867\",\"license\":\"MIT\"},\"contracts/standalone/celo/Providers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IFactory, Common } from \\\"../../apis/IFactory.sol\\\";\\r\\nimport { MinimumLiquidity, IRoleBase, ErrorLib, IERC20, ISupportedAsset, ISafeFactory } from \\\"../../peripherals/MinimumLiquidity.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Providers\\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Deployable Providers contract is a general liquidity pool purposely for funding Flexpools.\\r\\n * Contributors that cannot afford unit contributions can access providers pool to source for funds. \\r\\n * Loans accessed in this pool are not withdrawable by the borrower. Since there is a direct relationship\\r\\n * between the Providers contract and the Flexpool's, borrowed funds are moved straight to the Flexpool contract\\r\\n * and registered on behalf of the contributor.\\r\\n * With this contract, you can perform the following actions:\\r\\n * - Provider liquidity.\\r\\n * - Remove liquidity\\r\\n * - Borrow to finance Flexpool\\r\\n * - Get the list of providers\\r\\n */\\r\\ncontract Providers is MinimumLiquidity, ReentrancyGuard {\\r\\n    using ErrorLib for *;\\r\\n    event LiquidityProvided(Common.Provider);\\r\\n    event LiquidityRemoved(Common.Provider);\\r\\n    event Borrowed(Common.Provider[] providers, address borrower);\\r\\n\\r\\n    struct Data { \\r\\n        uint id;\\r\\n        bool hasIndex;\\r\\n    }\\r\\n\\r\\n    // Flexpool factory contract\\r\\n    IFactory public immutable flexpoolFactory;\\r\\n\\r\\n    // List of providers\\r\\n    Common.Provider[] private providers;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of providers to their position in the providers list\\r\\n     * @notice Slot '0' is reserved\\r\\n     */\\r\\n    mapping (address provider => Data) public slots;\\r\\n\\r\\n    /**\\r\\n     * ============= Constructor ================\\r\\n     * @param _roleManager : RoleBase manager contract.\\r\\n     * @param _baseAsset : Base asset to use for contribution e.g cUSD.\\r\\n     * @param _assetManager : Asset Manager contract.\\r\\n     * @notice At construction, we initialized the providers array slot 0 with an empty provider data.\\r\\n     * This is so we can reuse the slot in the future such as reseting a provider's data or ensuring \\r\\n     * that providers with zero index are restricted from calling certain functions.\\r\\n     */\\r\\n    constructor(\\r\\n        IFactory _flexpoolFactory,\\r\\n        IRoleBase _roleManager, \\r\\n        IERC20 _baseAsset,\\r\\n        ISupportedAsset _assetManager,\\r\\n        ISafeFactory _safeFactory\\r\\n    )\\r\\n        MinimumLiquidity(_assetManager, _baseAsset, _roleManager, _safeFactory)\\r\\n    {\\r\\n        if(address(_flexpoolFactory) == address(0)) '_flexpoolFactory is zero'._throw();\\r\\n        flexpoolFactory = _flexpoolFactory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Utility for provide liquidity\\r\\n    * @notice User must approve this contract with the liquidiy amount prior to this call.\\r\\n    * @param rate: Interest rate the provider is willing to charge.      \\r\\n    *   We choose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set \\r\\n    *   her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \\r\\n    *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \\r\\n    *   zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\\r\\n    *   The minimum interest rate to set is 0.01% if interest must be set at least.\\r\\n    *   To reiterate, raw interest must be multiplied by 100 before giving as input. \\r\\n    */\\r\\n    function provideLiquidity(uint16 rate) public whenNotPaused returns(bool) {\\r\\n        if(rate >= type(uint16).max) \\\"Invalid rate\\\"._throw();\\r\\n        address sender = _msgSender();\\r\\n        Data memory data = slots[sender];\\r\\n        Common.Interest memory interest;\\r\\n        uint liquidity = _checkAndWithdrawAllowance(baseAsset, sender, address(this), minimumLiquidity);\\r\\n        unchecked {\\r\\n            if(!data.hasIndex){\\r\\n                data.id = providers.length;\\r\\n                data.hasIndex = true;\\r\\n                slots[sender] = data;\\r\\n                providers.push(Common.Provider(data.id, liquidity, rate, 0, sender, interest));\\r\\n            } else {\\r\\n                providers[data.id].amount += liquidity;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityProvided(providers[data.id]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove liquidity.\\r\\n     * @notice Liquidity can be removed anytime provided the balance exceeds zero\\r\\n     */\\r\\n    function removeLiquidity() public whenNotPaused nonReentrant returns(bool) {\\r\\n        (Common.Provider memory prov, uint slot, address caller) = _getProvider();\\r\\n        if(prov.amount == 0) \\\"Nothing to remove\\\"._throw();\\r\\n        providers[slot].amount = 0;\\r\\n        _setApprovalFor(baseAsset, caller, prov.amount);\\r\\n\\r\\n        emit LiquidityRemoved(prov);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Users can borrow from liquidity providers to finance a Flexpool\\r\\n     * @param providersSlots : Selected providers' slots are required \\r\\n     * @param amount : Amount user wish to borrow.\\r\\n     */\\r\\n    function borrow(uint[] memory providersSlots, uint amount) public whenNotPaused returns(bool) {\\r\\n        if(providersSlots.length == 0) 'List is empty'._throw();\\r\\n        if(amount == 0) 'Loan amt is 0'._throw();\\r\\n        Common.Provider[] memory provs = _aggregateLiquidityFromProviders(providersSlots, amount); \\r\\n        if(!IFactory(flexpoolFactory).contributeThroughProvider(provs, _msgSender(), amount)) 'Factory erroed'._throw();\\r\\n\\r\\n        emit Borrowed(provs, _msgSender());\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Loop through the selected providers balances, and check if there is enough balances\\r\\n     * to accommodate the requested loan, otherwise operation fails.\\r\\n     * @param providersSlots : Array of selected providers slots\\r\\n     * @param amount : Requested loan amount\\r\\n     * Return a list of providers that financed the contribution\\r\\n     */\\r\\n    function _aggregateLiquidityFromProviders(\\r\\n        uint[] memory providersSlots, \\r\\n        uint amount\\r\\n    ) \\r\\n        internal \\r\\n        returns(Common.Provider[] memory result)\\r\\n    {\\r\\n        uint amountLeft = amount;\\r\\n        uint providersSize = providersSlots.length;\\r\\n        Common.Provider[] memory _providers = new Common.Provider[](providersSize);\\r\\n        for(uint i = 0; i < providersSize; i++) {\\r\\n            uint slot = providersSlots[i];\\r\\n            if(slot >= providers.length) 'Invalid slot detected'._throw();\\r\\n            Common.Provider memory prov = providers[slot];\\r\\n            unchecked {\\r\\n                if(prov.amount >= amountLeft) {\\r\\n                    providers[slot].amount = prov.amount - amountLeft; \\r\\n                    amountLeft = 0;\\r\\n                } else {\\r\\n                    amountLeft -= prov.amount; \\r\\n                    providers[slot].amount = 0;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint snapshotBal = providers[slot].amount;\\r\\n            prov.amount -= snapshotBal; // Record actual amount the provider lends to the borrower\\r\\n            _providers[i] = prov;\\r\\n            if(amountLeft == 0) break;\\r\\n        }\\r\\n        if(amountLeft > 0) 'Loan exceed aggregate providers bal'._throw();\\r\\n        result = _providers;\\r\\n    }\\r\\n\\r\\n    // ReadOnly function. Return provider's information. \\r\\n    function _getProvider() \\r\\n        internal \\r\\n        view \\r\\n        returns(Common.Provider memory prov, uint slot, address caller) \\r\\n    {\\r\\n        caller = _msgSender();\\r\\n        Data memory data = slots[caller];\\r\\n        if(!data.hasIndex) 'User is not a provider'._throw();\\r\\n        slot = data.id;\\r\\n        prov = providers[slot];\\r\\n    }\\r\\n\\r\\n    // Returns providers in storage.\\r\\n    function getProviders() public view returns(Common.Provider[] memory prov) {\\r\\n        prov = providers;\\r\\n        return prov;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x582befeed654f1a4a7d5bb00bd3769e47e102ec2b0cfffab1a24aa1d98393ca3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c80638456cb5911610097578063c9f8437c11610066578063c9f8437c14610261578063cdf456e114610274578063edc922a91461029b578063f1d588c5146102b057600080fd5b80638456cb59146101f457806394217ad1146101fc5780639e32d7d114610223578063b56cf0111461024a57600080fd5b80633f4ba83a116100d35780633f4ba83a146101af578063468758f5146101b75780635c975abb146101da57806367b9a286146101ec57600080fd5b8062435da514610104578063131e7e1c14610134578063282567b41461015b5780633930142714610170575b600080fd5b600054610117906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101177f000000000000000000000000000000000000000000000000000000000000000081565b61016e610169366004611395565b6102c3565b005b61019a61017e3660046113ae565b6005602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161012b565b61016e610307565b6101ca6101c53660046113de565b610364565b604051901515815260200161012b565b600054600160a01b900460ff166101ca565b6101ca6106b3565b61016e6107ba565b6101177f000000000000000000000000000000000000000000000000000000000000000081565b6101177f000000000000000000000000000000000000000000000000000000000000000081565b61025360025481565b60405190815260200161012b565b6101ca61026f366004611418565b610805565b6101177f000000000000000000000000000000000000000000000000000000000000000081565b6102a3610996565b60405161012b9190611571565b6101ca6102be3660046113ae565b610a49565b6102cb610a76565b6002548103610302576103026040518060400160405280600d81526020016c506172616d2069732073616d6560981b815250610af5565b600255565b61030f610a76565b610317610b20565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061036e610b4c565b61ffff828116106103a6576103a66040518060400160405280600c81526020016b496e76616c6964207261746560a01b815250610af5565b336000818152600560209081526040808320815180830183528154815260019091015460ff16151581840152815180830190925283825291810183905260025491929091610419907f00000000000000000000000000000000000000000000000000000000000000009086903090610b77565b905082602001516105ce57600480548452600160208086018281526001600160a01b0388811660008181526005855260408082208b5181559451948701805460ff191695151595909517909455835160c0810185528a51815280860189815261ffff8f16958201958652606082018381526080830194855260a083018c81528a54998a018b559990935290517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600790980297880155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c87015592517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d86015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e85015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f840180546001600160a01b03191691909216179055915180517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a0830155909101517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a190910155610601565b8060048460000151815481106105e6576105e6611584565b60009182526020909120600160079092020101805490910190555b7f0a528f81d4ce06395729238fd3358a726bef29566b10db382cf88e62fb39185b600484600001518154811061063957610639611584565b906000526020600020906007020160405161069f91908154815260018201546020820152600282015460408201526003820154606082015260048201546001600160a01b03166080820152600582015460a082015260069091015460c082015260e00190565b60405180910390a150600195945050505050565b60006106bd610b4c565b6106c5610c6d565b60008060006106d2610c97565b925092509250826020015160000361071657610716604051806040016040528060118152602001704e6f7468696e6720746f2072656d6f766560781b815250610af5565b60006004838154811061072b5761072b611584565b90600052602060002090600702016001018190555061076f7f0000000000000000000000000000000000000000000000000000000000000000828560200151610da1565b7f1e62e0ceb04999bb91501874d5b75964403c0e7e81111f35d45d188ac9bba4118360405161079e919061159a565b60405180910390a1600193505050506107b76001600355565b90565b6107c2610a76565b6107ca610b4c565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586103473390565b600061080f610b4c565b8251600003610846576108466040518060400160405280600d81526020016c4c69737420697320656d70747960981b815250610af5565b8160000361087c5761087c6040518060400160405280600d81526020016c04c6f616e20616d74206973203609c1b815250610af5565b60006108888484610e79565b604051632ef3946f60e01b81529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632ef3946f906108db908490339088906004016115a8565b6020604051808303816000875af11580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906115d6565b610951576109516040518060400160405280600e81526020016d119858dd1bdc9e48195c9c9bd95960921b815250610af5565b7febdbff8e38cffc3e7a007be6cd1b611012beb1c67223a2fb5ec524704ce41e8881336040516109829291906115f8565b60405180910390a160019150505b92915050565b60606004805480602002602001604051908101604052809291908181526020016000905b82821015610a405760008481526020908190206040805160c0810182526007860290920180548352600180820154848601526002820154848401526003820154606085015260048201546001600160a01b031660808501528251808401909352600582015483526006909101548285015260a083019190915290835290920191016109ba565b50505050905090565b6000610a53610a76565b600080546001600160a01b0319166001600160a01b038416179055506001919050565b6000546001600160a01b031680610ab757610ab76040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b815250610af5565b610ac0336110ec565b610af257610af26040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b815250610af5565b50565b805115610af2578060405163cc86106360e01b8152600401610b179190611622565b60405180910390fd5b600054600160a01b900460ff16610b4a57604051638dfc202b60e01b815260040160405180910390fd5b565b600054600160a01b900460ff1615610b4a5760405163d93c066560e01b815260040160405180910390fd5b6000610b8485858461115b565b90506001600160a01b038316610b9c57610b9c611671565b6001600160a01b038516610bb257610bb2611671565b8015610c65576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018390528616906323b872dd906064016020604051808303816000875af1158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3391906115d6565b610c6557610c656040518060400160405280600d81526020016c151c9e11995c8819985a5b1959609a1b815250610af5565b949350505050565b600260035403610c9057604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b610c9f61133c565b3360008181526005602090815260408083208151808301909252805482526001015460ff16151591810182905291929190610d0b57610d0b604051806040016040528060168152602001752ab9b2b91034b9903737ba103090383937bb34b232b960511b815250610af5565b8060000151925060048381548110610d2557610d25611584565b60009182526020918290206040805160c0810182526007909302909101805483526001810154838501526002810154838301526003810154606084015260048101546001600160a01b03166080840152815180830190925260058101548252600601549281019290925260a08101919091529492935090919050565b6001600160a01b038216610db757610db7611671565b6001600160a01b038316610dcd57610dcd611671565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4091906115d6565b610e7457610e746040518060400160405280600f81526020016e105c1c1c9bdd985b0811985a5b1959608a1b815250610af5565b505050565b8151606090829060008167ffffffffffffffff811115610e9b57610e9b611402565b604051908082528060200260200182016040528015610ed457816020015b610ec161133c565b815260200190600190039081610eb95790505b50905060005b828110156110bb576000878281518110610ef657610ef6611584565b602002602001015190506004805490508110610f4257610f4260405180604001604052806015815260200174125b9d985b1a59081cdb1bdd0819195d1958dd1959605a1b815250610af5565b600060048281548110610f5757610f57611584565b60009182526020918290206040805160c08101825260079093029091018054835260018101548385019081526002820154848401526003820154606085015260048201546001600160a01b031660808501528251808401909352600582015483526006909101549382019390935260a08201529051909150861161100d578581602001510360048381548110610fef57610fef611584565b90600052602060002090600702016001018190555060009550611041565b80602001518603955060006004838154811061102b5761102b611584565b9060005260206000209060070201600101819055505b60006004838154811061105657611056611584565b9060005260206000209060070201600101549050808260200181815161107c9190611687565b9052508451829086908690811061109557611095611584565b6020026020010181905250866000036110b0575050506110bb565b505050600101610eda565b5082156110e3576110e36040518060600160405280602381526020016116c260239139610af5565b95945050505050565b60008054604051633f784de560e11b81526001600160a01b03848116600483015290911690637ef09bca90602401602060405180830381865afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906115d6565b6000837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161461125757604051634df48c7360e11b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639be918e690602401602060405180830381865afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122191906115d6565b6112575761125760405180604001604052806011815260200170155b9cdd5c1c1bdc9d195908105cdcd95d607a1b815250610af5565b6001600160a01b03851661126d5761126d611671565b6001600160a01b03841661128357611283611671565b604051636eb1769f60e11b81526001600160a01b03858116600483015230602483015286169063dd62ed3e90604401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f391906116a8565b915082821015611334576113346040518060400160405280601681526020017556616c75652065786365656420616c6c6f77616e636560501b815250610af5565b509392505050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001611390604051806040016040528060008152602001600081525090565b905290565b6000602082840312156113a757600080fd5b5035919050565b6000602082840312156113c057600080fd5b81356001600160a01b03811681146113d757600080fd5b9392505050565b6000602082840312156113f057600080fd5b813561ffff811681146113d757600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561142b57600080fd5b823567ffffffffffffffff8082111561144357600080fd5b818501915085601f83011261145757600080fd5b813560208282111561146b5761146b611402565b8160051b604051601f19603f8301168101818110868211171561149057611490611402565b6040529283528183019350848101820192898411156114ae57600080fd5b948201945b838610156114cc578535855294820194938201936114b3565b9997909101359750505050505050565b8051825260208101516020830152604081015160408301526060810151606083015260018060a01b03608082015116608083015260a0810151805160a0840152602081015160c0840152505050565b60008151808452602080850194506020840160005b83811015611566576115538783516114dc565b60e0969096019590820190600101611540565b509495945050505050565b6020815260006113d7602083018461152b565b634e487b7160e01b600052603260045260246000fd5b60e0810161099082846114dc565b6060815260006115bb606083018661152b565b6001600160a01b039490941660208301525060400152919050565b6000602082840312156115e857600080fd5b815180151581146113d757600080fd5b60408152600061160b604083018561152b565b905060018060a01b03831660208301529392505050565b60006020808352835180602085015260005b8181101561165057858101830151858201604001528201611634565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052600160045260246000fd5b8181038181111561099057634e487b7160e01b600052601160045260246000fd5b6000602082840312156116ba57600080fd5b505191905056fe4c6f616e20657863656564206167677265676174652070726f7669646572732062616ca26469706673582212208ee4db9c55dc52a052af9f575bfe82501e4dc3a3e8ba23d47f248a2e8c2000fb64736f6c63430008180033",
  "devdoc": {
    "author": "Simplifi (Bobeu)",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "borrow(uint256[],uint256)": {
        "details": "Users can borrow from liquidity providers to finance a Flexpool",
        "params": {
          "amount": ": Amount user wish to borrow.",
          "providersSlots": ": Selected providers' slots are required "
        }
      },
      "constructor": {
        "params": {
          "_assetManager": ": Asset Manager contract.",
          "_baseAsset": ": Base asset to use for contribution e.g cUSD.",
          "_roleManager": ": RoleBase manager contract."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "provideLiquidity(uint16)": {
        "details": "Utility for provide liquidity",
        "params": {
          "rate": ": Interest rate the provider is willing to charge.         We choose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set    her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5.    Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating    zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.   The minimum interest rate to set is 0.01% if interest must be set at least.   To reiterate, raw interest must be multiplied by 100 before giving as input. "
        }
      },
      "removeLiquidity()": {
        "details": "Remove liquidity."
      },
      "setMinimumLiquidity(uint256)": {
        "details": "Set minimum liquidity. ",
        "params": {
          "_minLiquidity": ": Minimum liquidity"
        }
      },
      "setRoleManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused."
      }
    },
    "stateVariables": {
      "slots": {
        "details": "Mapping of providers to their position in the providers list"
      }
    },
    "title": "Providers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "============= Constructor ================At construction, we initialized the providers array slot 0 with an empty provider data. This is so we can reuse the slot in the future such as reseting a provider's data or ensuring  that providers with zero index are restricted from calling certain functions."
      },
      "provideLiquidity(uint16)": {
        "notice": "User must approve this contract with the liquidiy amount prior to this call."
      },
      "removeLiquidity()": {
        "notice": "Liquidity can be removed anytime provided the balance exceeds zero"
      },
      "setMinimumLiquidity(uint256)": {
        "notice": "Only accounts with rolebearer access are allowed"
      },
      "setRoleManager(address)": {
        "notice": "Set Role manager"
      },
      "slots(address)": {
        "notice": "Slot '0' is reserved"
      }
    },
    "notice": "Deployable Providers contract is a general liquidity pool purposely for funding Flexpools. Contributors that cannot afford unit contributions can access providers pool to source for funds.  Loans accessed in this pool are not withdrawable by the borrower. Since there is a direct relationship between the Providers contract and the Flexpool's, borrowed funds are moved straight to the Flexpool contract and registered on behalf of the contributor. With this contract, you can perform the following actions: - Provider liquidity. - Remove liquidity - Borrow to finance Flexpool - Get the list of providers",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1005,
        "contract": "contracts/standalone/celo/Providers.sol:Providers",
        "label": "roleManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoleBase)574"
      },
      {
        "astId": 1116,
        "contract": "contracts/standalone/celo/Providers.sol:Providers",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1253,
        "contract": "contracts/standalone/celo/Providers.sol:Providers",
        "label": "safes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 921,
        "contract": "contracts/standalone/celo/Providers.sol:Providers",
        "label": "minimumLiquidity",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/standalone/celo/Providers.sol:Providers",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1349,
        "contract": "contracts/standalone/celo/Providers.sol:Providers",
        "label": "providers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Provider)222_storage)dyn_storage"
      },
      {
        "astId": 1355,
        "contract": "contracts/standalone/celo/Providers.sol:Providers",
        "label": "slots",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Data)1342_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Provider)222_storage)dyn_storage": {
        "base": "t_struct(Provider)222_storage",
        "encoding": "dynamic_array",
        "label": "struct Common.Provider[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoleBase)574": {
        "encoding": "inplace",
        "label": "contract IRoleBase",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Data)1342_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Providers.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)1342_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Data)1342_storage": {
        "encoding": "inplace",
        "label": "struct Providers.Data",
        "members": [
          {
            "astId": 1339,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1341,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "hasIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Interest)176_storage": {
        "encoding": "inplace",
        "label": "struct Common.Interest",
        "members": [
          {
            "astId": 173,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "fullInterest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 175,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "intPerSec",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Provider)222_storage": {
        "encoding": "inplace",
        "label": "struct Common.Provider",
        "members": [
          {
            "astId": 210,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "slot",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 212,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 214,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "rate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 216,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "earnStartDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 218,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "account",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 221,
            "contract": "contracts/standalone/celo/Providers.sol:Providers",
            "label": "accruals",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Interest)176_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}