{
  "address": "0x5b3d1a90717f6EDbD08b6c4aC8a6d900942BcAa6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errorMsg",
          "type": "string"
        }
      ],
      "name": "ErrorOccurred",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "contributor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "creator",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "referrals",
          "type": "uint8"
        }
      ],
      "name": "deductPoint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPhase",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_phase",
          "type": "uint8"
        }
      ],
      "name": "getPoint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "contributor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referrals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "enum Common.Phase",
              "name": "phase",
              "type": "uint8"
            }
          ],
          "internalType": "struct Common.Point",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "contributor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "creator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "referrals",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "enum Common.Phase",
                  "name": "phase",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Point[]",
              "name": "value",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Common.PointsReturnValue[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "phase",
      "outputs": [
        {
          "internalType": "enum Common.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerToEarnPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "contributor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "creator",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "referrals",
          "type": "uint8"
        }
      ],
      "name": "setPoint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switchPhase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f85db4ff4a9a4e477c9846e464574021d0c484c71d5844b843da32818e0a652",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0x5b3d1a90717f6EDbD08b6c4aC8a6d900942BcAa6",
    "transactionIndex": 1,
    "gasUsed": "1139929",
    "logsBloom": "0x
    "blockHash": "0x1bf6b06459e2c9450532ac71bddb3d89251c52951faade839cf3c740d41274d8",
    "transactionHash": "0x7f85db4ff4a9a4e477c9846e464574021d0c484c71d5844b843da32818e0a652",
    "logs": [],
    "blockNumber": 44660472,
    "cumulativeGasUsed": "1200787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x79dF2FCc7DfDdc0C85Cc1f82B1f631b4b9D994B0"
  ],
  "numDeployments": 6,
  "solcInputHash": "c967811ea5a58e8a311453c5141ade6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errorMsg\",\"type\":\"string\"}],\"name\":\"ErrorOccurred\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"contributor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creator\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referrals\",\"type\":\"uint8\"}],\"name\":\"deductPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"getPoint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contributor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Common.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoints\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contributor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Common.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Point[]\",\"name\":\"value\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Common.PointsReturnValue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"enum Common.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerToEarnPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"contributor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creator\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referrals\",\"type\":\"uint8\"}],\"name\":\"setPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deductPoint(address,uint8,uint8,uint8)\":{\"details\":\"Update points for the target user for the current phase if they are already initialized otherwise create a new spot for them. \",\"params\":{\"contributor\":\": Point for contributing;\",\"creator\":\": Point earned as a pool creator\",\"referrals\":\": Point earned from referrals system\",\"user\":\": Unit contribution\"}},\"getPoint(address,uint8)\":{\"details\":\"Returns the point See _getPoint\"},\"registerToEarnPoints()\":{\"details\":\"Register user to earn points for the current phase\"},\"setPoint(address,uint8,uint8,uint8)\":{\"details\":\"Update points for the target user for the current phase if they are already initialized otherwise create a new spot for them. \",\"params\":{\"contributor\":\": Point for contributing;\",\"creator\":\": Point earned as a pool creator\",\"referrals\":\": Point earned from referrals system\",\"user\":\": Unit contribution\"}},\"setRoleManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}},\"switchPhase()\":{\"details\":\"Move to the next phase. Only rolebearer function\"}},\"stateVariables\":{\"points\":{\"details\":\"Mapping showing users rewards for all phases\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deductPoint(address,uint8,uint8,uint8)\":{\"notice\":\"Function will always use the current phase\"},\"registerToEarnPoints()\":{\"notice\":\"Users automatically earn free 5 points for signing up\"},\"setPoint(address,uint8,uint8,uint8)\":{\"notice\":\"Function will always use the current phase\"},\"setRoleManager(address)\":{\"notice\":\"Set Role manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standalone/Points.sol\":\"Points\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/apis/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from './IERC20.sol';\\r\\n\\r\\ninterface Common {\\r\\n    event PoolCreated(Pool);\\r\\n    event NewContributorAdded(Pool);\\r\\n    event GetFinanced(Pool);\\r\\n    event Payback(Pool);\\r\\n    event Liquidated(Pool);\\r\\n    event Cancellation(uint unit);\\r\\n    event PoolEdited(Pool);\\r\\n\\r\\n    enum Stage {\\r\\n        JOIN, \\r\\n        GET, \\r\\n        PAYBACK, \\r\\n        CANCELED,\\r\\n        ENDED\\r\\n    }\\r\\n\\r\\n    enum Phase { BETA, ALPHA, MAINNET }\\r\\n\\r\\n    enum Status { AVAILABLE, TAKEN }\\r\\n\\r\\n    enum Branch { CURRENT, RECORD }\\r\\n\\r\\n    enum Router { NONE, PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n    struct Pool {\\r\\n        Low low;\\r\\n        Big big;\\r\\n        Addresses addrs;\\r\\n        Router router;\\r\\n        Stage stage;\\r\\n        Status status;\\r\\n    }\\r\\n\\r\\n    struct Low {\\r\\n        uint8 maxQuorum;\\r\\n        uint8 selector;\\r\\n        uint24 colCoverage;\\r\\n        uint32 duration;\\r\\n        uint8 allGh;\\r\\n        uint8 userCount;\\r\\n    }\\r\\n\\r\\n    struct Big {\\r\\n        uint256 unit;\\r\\n        uint256 currentPool;\\r\\n        uint96 recordId;\\r\\n        uint96 unitId;\\r\\n    }\\r\\n\\r\\n    struct Point {\\r\\n        uint contributor;\\r\\n        uint creator;\\r\\n        uint referrals;\\r\\n        address user;\\r\\n        Phase phase;\\r\\n    }\\r\\n\\r\\n    struct PointsReturnValue {\\r\\n        string key;\\r\\n        Point[] value;\\r\\n    }\\r\\n\\r\\n    struct Interest {\\r\\n        uint fullInterest;\\r\\n        uint intPerSec;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Structured types - Address\\r\\n     * @param asset : Contract address of the asset in use.\\r\\n     * @param lastPaid: Last contributor who got finance.\\r\\n     * @param safe : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n     * @param admin : Pool creator.\\r\\n     * \\r\\n    */\\r\\n    struct Addresses {\\r\\n        IERC20 colAsset;\\r\\n        address lastPaid;\\r\\n        address safe;\\r\\n        address admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @param isMember : Whether user is a member or not\\r\\n     *  @param turnStartTime: Time when the contributor's turn start to count.\\r\\n     *  @param getFinanceTime: Date when loan was disbursed\\r\\n     *  @param paybackTime: Date which the borrowed fund must be retured\\r\\n     *  @param loan: Total debts owed by the last fund recipient.\\r\\n     *  @param colBals: Collateral balances of the last recipient.\\r\\n     *  @param sentQuota : Whether an user/current msg.sender has received or not.\\r\\n     *  @param id : Address of the last recipient.\\r\\n     * @param interestPaid : The amount of interest paid  \\r\\n    */\\r\\n    struct Contributor {\\r\\n        uint32 paybackTime;\\r\\n        uint32 turnStartTime;\\r\\n        uint32 getFinanceTime;\\r\\n        uint loan;\\r\\n        uint colBals;\\r\\n        address id;\\r\\n        bool sentQuota;\\r\\n    }\\r\\n\\r\\n    struct Price {\\r\\n        uint128 price;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct Provider {\\r\\n        uint slot;\\r\\n        uint amount;\\r\\n        uint rate;\\r\\n        uint earnStartDate;\\r\\n        address account;\\r\\n        Interest accruals;\\r\\n    }\\r\\n\\r\\n    struct Payback_Safe {\\r\\n        address user; \\r\\n        IERC20 baseAsset; \\r\\n        uint256 debt;\\r\\n        uint256 attestedInitialBal;\\r\\n        bool allGF; \\r\\n        Contributor[] cData;\\r\\n        bool isSwapped;\\r\\n        address defaulted;\\r\\n        uint96 recordId;\\r\\n        IERC20 collateralAsset;\\r\\n    }\\r\\n\\r\\n    struct Slot {\\r\\n        uint value;\\r\\n        bool isMember;\\r\\n        bool isAdmin;\\r\\n    }\\r\\n\\r\\n    struct ReadPoolDataReturnValue {\\r\\n        Pool pool;\\r\\n        ContributorReturnValue[] cData;\\r\\n    }\\r\\n\\r\\n    struct ReadRecordDataReturnValue {\\r\\n        Pool pool;\\r\\n        Contributor[] cData;\\r\\n    }\\r\\n\\r\\n    struct UpdatePoolData {\\r\\n        uint unit;\\r\\n        uint96 unitId;\\r\\n        uint96 recordId;\\r\\n        uint8 maxQuorum;\\r\\n        uint24 colCoverage;\\r\\n        IERC20 colAsset;\\r\\n        uint16 durationInHours;\\r\\n        address creator;\\r\\n        Router router; \\r\\n    }\\r\\n\\r\\n    struct Analytics {\\r\\n        uint256 tvlCollateral;\\r\\n        uint256 tvlBase;\\r\\n        uint totalPermissioned;\\r\\n        uint totalPermissionless;\\r\\n    }\\r\\n\\r\\n    struct ViewFactoryData {\\r\\n        Analytics analytics;\\r\\n        uint16 makerRate;\\r\\n        uint currentEpoches;\\r\\n        uint recordEpoches;\\r\\n    }\\r\\n\\r\\n    struct ContributorReturnValue {\\r\\n        Contributor profile;\\r\\n        Slot slot;\\r\\n        Common.Provider[] providers;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x47a3d0ec1786098932782f83fc4a146e39ec23e4c1f7b47b4618a3a421cae181\",\"license\":\"MIT\"},\"contracts/apis/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f16e22e9c3da96f41e8237352b0d826ca0421b69340e09aedae74eb222428e6\",\"license\":\"MIT\"},\"contracts/apis/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/apis/IPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n/**\\r\\n * @title Simplifi\\r\\n * @author : Bobeu - https://github.com/bobeu\\r\\n * @notice : Interface of the Point contract for managing user's rewards and points.\\r\\n */\\r\\ninterface IPoint {\\r\\n  struct Initializer {\\r\\n    bool isRegistered;\\r\\n    uint location; \\r\\n  }\\r\\n\\r\\n  function getPoint(address user, uint8 phase) external view returns(Common.Point memory);\\r\\n  function setPoint(\\r\\n    address user, \\r\\n    uint8 contributor,\\r\\n    uint8 creator,\\r\\n    uint8 referrals\\r\\n  ) external returns(bool);\\r\\n  function deductPoint(\\r\\n    address user, \\r\\n    uint8 contributor,\\r\\n    uint8 creator,\\r\\n    uint8 referrals\\r\\n  ) external returns(bool);\\r\\n}\",\"keccak256\":\"0x0c484429b6a5432e874c79830cbeb5d2836f4c0d3f28753f2cdae0ad0de7d265\",\"license\":\"MIT\"},\"contracts/apis/IRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IRoleBase \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IRoleBase {\\r\\n    function setRole(\\r\\n        address[] memory newRoleTos\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRoleBearer(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xa166efe0dfbcd8f4e00f33c155797b3e2d652087f630893518b0dec1f823519b\",\"license\":\"MIT\"},\"contracts/libraries/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary ErrorLib {\\r\\n    error ErrorOccurred(string errorMsg);\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts any operation.\\r\\n     * @param _error : Error struct\\r\\n     */\\r\\n    function _throw(string memory _error) internal pure {\\r\\n        if(bytes(_error).length > 0){ \\r\\n            revert ErrorOccurred(_error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x967582ca2a833932c7403e6950ede1972f1b7f94ecfedd2d3ddee9175d309e5a\",\"license\":\"MIT\"},\"contracts/peripherals/OnlyRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IRoleBase } from \\\"../apis/IRoleBase.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract OnlyRoleBase is MsgSender {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Role manager address\\r\\n    IRoleBase public roleManager;\\r\\n\\r\\n    // ============= constructor ============\\r\\n    constructor(IRoleBase _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyRoleBearer {\\r\\n        _onlyRoleBearer();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Allow only account with role access\\r\\n    function _onlyRoleBearer() internal view {\\r\\n        IRoleBase mgr = roleManager;\\r\\n        if(address(mgr) == address(0)) 'Manager is zero'._throw();\\r\\n        if(!_hasRole(_msgSender())) 'Access denied'._throw();\\r\\n    }\\r\\n\\r\\n    function _hasRole(address target) internal view returns(bool result) {\\r\\n        result = IRoleBase(roleManager).hasRole(target);\\r\\n    }  \\r\\n\\r\\n    /// @dev Set role manager\\r\\n    function _setRoleManager(IRoleBase newManager) private{\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Role manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleBearer\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(IRoleBase(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa16a1ee72f3b6ef52356210cdc85a46ddd5a88d56c0c044c0740b68cf5b83438\",\"license\":\"MIT\"},\"contracts/standalone/Points.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IPoint, Common } from \\\"../apis/IPoint.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\nimport { OnlyRoleBase, IRoleBase } from \\\"../peripherals/OnlyRoleBase.sol\\\";\\r\\n\\r\\ncontract Points is IPoint, OnlyRoleBase {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Current Phase of the project at anytime\\r\\n    Common.Phase public phase;\\r\\n\\r\\n    // Mapping of unit contributors to Initializer struct\\r\\n    mapping(address users => Initializer) private initializer;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping showing users rewards for all phases\\r\\n     */\\r\\n    mapping(Common.Phase => Common.Point[]) private points;\\r\\n\\r\\n    // =========== Constructor ===================\\r\\n    constructor(IRoleBase _roleManager) OnlyRoleBase(_roleManager) {} \\r\\n\\r\\n    /**\\r\\n     * @dev Returns the point\\r\\n     * @param user : Contributor\\r\\n    */\\r\\n    function _getPoint(address user, uint8 _phase) internal view returns(Common.Point memory point){\\r\\n        Initializer memory init = initializer[user];\\r\\n        if(init.isRegistered) {\\r\\n            point = points[Common.Phase(_phase)][init.location];\\r\\n        }\\r\\n        return point;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the point\\r\\n     * See _getPoint\\r\\n    */\\r\\n    function getPoint(address user, uint8 _phase) external view returns(Common.Point memory){\\r\\n        if(_phase >= 3) 'Invalid phase'._throw();\\r\\n        return _getPoint(user, _phase);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Register user to earn points for the current phase\\r\\n     * @notice Users automatically earn free 5 points for signing up\\r\\n     */\\r\\n    function registerToEarnPoints() public {\\r\\n        address sender = _msgSender();\\r\\n        Common.Phase _phase = phase;\\r\\n        Initializer memory init = initializer[sender];\\r\\n        if(init.isRegistered) 'User is registered'._throw();\\r\\n        init.isRegistered = true;\\r\\n        init.location = points[_phase].length;\\r\\n        initializer[sender] = init;\\r\\n        points[_phase].push( Common.Point(0, 0, 5, sender, _phase));\\r\\n        \\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Update points for the target user for the current phase if they are already initialized otherwise create a new spot for them. \\r\\n     * @param user : Unit contribution\\r\\n     * @param contributor : Point for contributing;\\r\\n     * @param creator : Point earned as a pool creator\\r\\n     * @param referrals : Point earned from referrals system\\r\\n     * @notice Function will always use the current phase\\r\\n    */\\r\\n    function setPoint(\\r\\n        address user, \\r\\n        uint8 contributor,\\r\\n        uint8 creator,\\r\\n        uint8 referrals\\r\\n    ) external onlyRoleBearer returns(bool) {\\r\\n        Initializer memory init = initializer[user];\\r\\n        if(init.isRegistered) {\\r\\n            Common.Point memory point = points[phase][init.location];\\r\\n            assert(user == point.user);\\r\\n            unchecked {\\r\\n                if(contributor > 0) points[phase][init.location].contributor = point.contributor + contributor;\\r\\n                if(creator > 0) points[phase][init.location].creator = point.creator + creator;\\r\\n                if(referrals > 0) points[phase][init.location].referrals = point.referrals + referrals;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update points for the target user for the current phase if they are already initialized otherwise create a new spot for them. \\r\\n     * @param user : Unit contribution\\r\\n     * @param contributor : Point for contributing;\\r\\n     * @param creator : Point earned as a pool creator\\r\\n     * @param referrals : Point earned from referrals system\\r\\n     * @notice Function will always use the current phase\\r\\n    */\\r\\n    function deductPoint( \\r\\n        address user, \\r\\n        uint8 contributor,\\r\\n        uint8 creator,\\r\\n        uint8 referrals\\r\\n    ) external onlyRoleBearer returns(bool) {\\r\\n        Initializer memory init = initializer[user];\\r\\n        Common.Phase _phase = phase;\\r\\n        if(init.isRegistered) {\\r\\n            Common.Point memory point = points[_phase][init.location];\\r\\n            assert(user == point.user);\\r\\n            unchecked {\\r\\n                if(contributor > 0 && point.contributor > contributor) points[_phase][init.location].contributor =  point.contributor - contributor;\\r\\n                if(creator > 0 && point.creator > creator) points[_phase][init.location].creator = point.creator - creator;\\r\\n                if(referrals > 0 && point.referrals > referrals) points[_phase][init.location].referrals = point.referrals - referrals;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _getKeys() internal pure returns(string[3] memory){\\r\\n        return ['beta', 'alpha', 'mainnet'];\\r\\n    }\\r\\n\\r\\n    // Retrieve the points array in storage\\r\\n    function getPoints() public view returns(Common.PointsReturnValue[] memory) {\\r\\n        string[3] memory keys = _getKeys();\\r\\n        Common.PointsReturnValue[] memory _points = new Common.PointsReturnValue[](keys.length);\\r\\n        for(uint i = 0; i < keys.length; i++) {\\r\\n            _points[i] = Common.PointsReturnValue({\\r\\n                key: keys[i],\\r\\n                value: points[Common.Phase(i)]\\r\\n            });\\r\\n        }\\r\\n        \\r\\n        return _points;\\r\\n    }\\r\\n\\r\\n    // Retrieve the points array in storage\\r\\n    function getPhase() external view returns(string memory) {\\r\\n        uint8 _phase = uint8(phase);\\r\\n        string[3] memory keys = _getKeys(); \\r\\n        return keys[_phase];\\r\\n    }\\r\\n\\r\\n    /// @dev Move to the next phase. Only rolebearer function\\r\\n    function switchPhase() public onlyRoleBearer returns(bool) {\\r\\n        uint8 selector = uint8(phase);\\r\\n        if(selector < 3) {\\r\\n            phase = Common.Phase(selector + 1);\\r\\n        } else {\\r\\n            'Max phase achieved'._throw();\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6edc0f505f4c5a623891383faa81c4167f93f60f053007e8100bbf010f481f9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009d5760003560e01c8063ab0eb62d11610066578063ab0eb62d14610132578063b1c9fe6e1461013a578063eced02801461015b578063f1d588c514610170578063f4b7095b1461018357600080fd5b8062435da5146100a257806354d6de1c146100d25780636bf2daaf146100f55780637116b987146100ff5780639d3fba6614610112575b600080fd5b6000546100b5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e56100e036600461103f565b610198565b60405190151581526020016100c9565b6100fd610485565b005b6100e561010d36600461103f565b61067b565b610125610120366004611093565b610980565b6040516100c9919061113f565b6100e56109d4565b60005461014e90600160a01b900460ff1681565b6040516100c9919061114d565b610163610a91565b6040516100c991906111a1565b6100e561017e3660046111b4565b610ae3565b61018b610b11565b6040516100c991906111cf565b60006101a2610cca565b6001600160a01b0385166000908152600160208181526040928390208351808501909452805460ff1615801585529201549083015261047957600080546002908290600160a01b900460ff16828111156101fe576101fe6110c6565b600281111561020f5761020f6110c6565b815260200190815260200160002082602001518154811061023257610232611285565b90600052602060002090600402016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160149054906101000a900460ff1660028111156102bc576102bc6110c6565b60028111156102cd576102cd6110c6565b81525050905080606001516001600160a01b0316876001600160a01b0316146102f8576102f861129b565b60ff861615610375578560ff16816000015101600260008060149054906101000a900460ff16600281111561032f5761032f6110c6565b6002811115610340576103406110c6565b815260200190815260200160002083602001518154811061036357610363611285565b60009182526020909120600490910201555b60ff8516156103f6578460ff16816020015101600260008060149054906101000a900460ff1660028111156103ac576103ac6110c6565b60028111156103bd576103bd6110c6565b81526020019081526020016000208360200151815481106103e0576103e0611285565b9060005260206000209060040201600101819055505b60ff841615610477578360ff16816040015101600260008060149054906101000a900460ff16600281111561042d5761042d6110c6565b600281111561043e5761043e6110c6565b815260200190815260200160002083602001518154811061046157610461611285565b9060005260206000209060040201600201819055505b505b50600195945050505050565b6000805433808352600160208181526040948590208551808701909652805460ff90811615801588529190930154918601919091529193600160a01b9093041691906104fe576104fe60405180604001604052806012815260200171155cd95c881a5cc81c9959da5cdd195c995960721b815250610d49565b60018152600260008382811115610517576105176110c6565b6002811115610528576105286110c6565b815260208082019290925260409081016000908120548484019081526001600160a01b03871682526001938490529181208451815460ff1916901515178155915191909201556002908382811115610582576105826110c6565b6002811115610593576105936110c6565b81526020019081526020016000206040518060a00160405280600081526020016000815260200160058152602001856001600160a01b031681526020018460028111156105e2576105e26110c6565b9052815460018181018455600093845260209384902083516004909302019182559282015192810192909255604081015160028084019190915560608201516003840180546001600160a01b039092166001600160a01b031983168117825560808501519495949391926001600160a81b0319161790600160a01b90849081111561066f5761066f6110c6565b02179055505050505050565b6000610685610cca565b6001600160a01b03851660009081526001602081815260408084208151808301909252805460ff90811615801584529190940154928201929092529254600160a01b900490911690610973576000600260008360028111156106e9576106e96110c6565b60028111156106fa576106fa6110c6565b815260200190815260200160002083602001518154811061071d5761071d611285565b90600052602060002090600402016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160149054906101000a900460ff1660028111156107a7576107a76110c6565b60028111156107b8576107b86110c6565b81525050905080606001516001600160a01b0316886001600160a01b0316146107e3576107e361129b565b60008760ff161180156107f95750805160ff8816105b1561086157805160ff8816900360026000848281111561081b5761081b6110c6565b600281111561082c5761082c6110c6565b815260200190815260200160002084602001518154811061084f5761084f611285565b60009182526020909120600490910201555b60008660ff1611801561087a57508560ff168160200151115b156108e9578560ff168160200151036002600084600281111561089f5761089f6110c6565b60028111156108b0576108b06110c6565b81526020019081526020016000208460200151815481106108d3576108d3611285565b9060005260206000209060040201600101819055505b60008560ff1611801561090257508460ff168160400151115b15610971578460ff1681604001510360026000846002811115610927576109276110c6565b6002811115610938576109386110c6565b815260200190815260200160002084602001518154811061095b5761095b611285565b9060005260206000209060040201600201819055505b505b5060019695505050505050565b610988610fa8565b60038260ff16106109c1576109c16040518060400160405280600d81526020016c496e76616c696420706861736560981b815250610d49565b6109cb8383610d74565b90505b92915050565b60006109de610cca565b60008054600160a01b900460ff1660028111156109fd576109fd6110c6565b905060038160ff161015610a5657610a168160016112b1565b60ff166002811115610a2a57610a2a6110c6565b6000805460ff60a01b1916600160a01b836002811115610a4c57610a4c6110c6565b0217905550610a89565b610a896040518060400160405280601281526020017113585e081c1a185cd9481858da1a595d995960721b815250610d49565b600191505090565b6000805460609190600160a01b900460ff166002811115610ab457610ab46110c6565b90506000610ac0610eb9565b9050808260ff1660038110610ad757610ad7611285565b60200201519250505090565b6000610aed610cca565b600080546001600160a01b0319166001600160a01b0384161790555060015b919050565b60606000610b1d610eb9565b6040805160038082526080820190925291925060009190816020015b6040805180820190915260608082526020820152815260200190600190039081610b3957905050905060005b6003811015610cc3576040518060400160405280848360038110610b8b57610b8b611285565b6020020151815260200160026000846002811115610bab57610bab6110c6565b6002811115610bbc57610bbc6110c6565b6002811115610bcd57610bcd6110c6565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610c975760008481526020908190206040805160a08101825260048602909201805483526001810154938301939093526002808401549183019190915260038301546001600160a01b03811660608401529192916080840191600160a01b90910460ff1690811115610c7357610c736110c6565b6002811115610c8457610c846110c6565b8152505081526020019060010190610bfb565b50505050815250828281518110610cb057610cb0611285565b6020908102919091010152600101610b65565b5092915050565b6000546001600160a01b031680610d0b57610d0b6040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b815250610d49565b610d1433610f39565b610d4657610d466040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b815250610d49565b50565b805115610d46578060405163cc86106360e01b8152600401610d6b91906111a1565b60405180910390fd5b610d7c610fa8565b6001600160a01b0383166000908152600160208181526040928390208351808501909452805460ff16158015855292015490830152610cc357600260008460ff166002811115610dce57610dce6110c6565b6002811115610ddf57610ddf6110c6565b6002811115610df057610df06110c6565b8152602001908152602001600020816020015181548110610e1357610e13611285565b90600052602060002090600402016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160149054906101000a900460ff166002811115610e9d57610e9d6110c6565b6002811115610eae57610eae6110c6565b905250949350505050565b610ec1610ff0565b6040518060600160405280604051806040016040528060048152602001636265746160e01b815250815260200160405180604001604052806005815260200164616c70686160d81b8152508152602001604051806040016040528060078152602001661b585a5b9b995d60ca1b815250815250905090565b60008054604051633f784de560e11b81526001600160a01b03848116600483015290911690637ef09bca90602401602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce91906112d8565b6040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160006002811115610feb57610feb6110c6565b905290565b60405180606001604052806003905b6060815260200190600190039081610fff5790505090565b80356001600160a01b0381168114610b0c57600080fd5b803560ff81168114610b0c57600080fd5b6000806000806080858703121561105557600080fd5b61105e85611017565b935061106c6020860161102e565b925061107a6040860161102e565b91506110886060860161102e565b905092959194509250565b600080604083850312156110a657600080fd5b6110af83611017565b91506110bd6020840161102e565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600381106110fa57634e487b7160e01b600052602160045260246000fd5b9052565b80518252602081015160208301526040810151604083015260018060a01b036060820151166060830152608081015161113a60808401826110dc565b505050565b60a081016109ce82846110fe565b602081016109ce82846110dc565b6000815180845260005b8181101561118157602081850181015186830182015201611165565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006109cb602083018461115b565b6000602082840312156111c657600080fd5b6109cb82611017565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b8481101561127657898403603f190186528251805188865261121d8987018261115b565b918a0151868303878c01528051808452908b01928592508b01905b808310156112615761124b8285516110fe565b60a0820191508b84019350600183019250611238565b50978a019795505050918701916001016111f9565b50919998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b60ff81811683821601908111156109ce57634e487b7160e01b600052601160045260246000fd5b6000602082840312156112ea57600080fd5b815180151581146112fa57600080fd5b939250505056fea264697066735822122097ecd31728298fe5a7b5d24074a188e86689242dac423019382bf0ab5d75f3ee64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deductPoint(address,uint8,uint8,uint8)": {
        "details": "Update points for the target user for the current phase if they are already initialized otherwise create a new spot for them. ",
        "params": {
          "contributor": ": Point for contributing;",
          "creator": ": Point earned as a pool creator",
          "referrals": ": Point earned from referrals system",
          "user": ": Unit contribution"
        }
      },
      "getPoint(address,uint8)": {
        "details": "Returns the point See _getPoint"
      },
      "registerToEarnPoints()": {
        "details": "Register user to earn points for the current phase"
      },
      "setPoint(address,uint8,uint8,uint8)": {
        "details": "Update points for the target user for the current phase if they are already initialized otherwise create a new spot for them. ",
        "params": {
          "contributor": ": Point for contributing;",
          "creator": ": Point earned as a pool creator",
          "referrals": ": Point earned from referrals system",
          "user": ": Unit contribution"
        }
      },
      "setRoleManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      },
      "switchPhase()": {
        "details": "Move to the next phase. Only rolebearer function"
      }
    },
    "stateVariables": {
      "points": {
        "details": "Mapping showing users rewards for all phases"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deductPoint(address,uint8,uint8,uint8)": {
        "notice": "Function will always use the current phase"
      },
      "registerToEarnPoints()": {
        "notice": "Users automatically earn free 5 points for signing up"
      },
      "setPoint(address,uint8,uint8,uint8)": {
        "notice": "Function will always use the current phase"
      },
      "setRoleManager(address)": {
        "notice": "Set Role manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3783,
        "contract": "contracts/standalone/Points.sol:Points",
        "label": "roleManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoleBase)1010"
      },
      {
        "astId": 5043,
        "contract": "contracts/standalone/Points.sol:Points",
        "label": "phase",
        "offset": 20,
        "slot": "0",
        "type": "t_enum(Phase)478"
      },
      {
        "astId": 5048,
        "contract": "contracts/standalone/Points.sol:Points",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Initializer)935_storage)"
      },
      {
        "astId": 5056,
        "contract": "contracts/standalone/Points.sol:Points",
        "label": "points",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(Phase)478,t_array(t_struct(Point)541_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)541_storage)dyn_storage": {
        "base": "t_struct(Point)541_storage",
        "encoding": "dynamic_array",
        "label": "struct Common.Point[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoleBase)1010": {
        "encoding": "inplace",
        "label": "contract IRoleBase",
        "numberOfBytes": "20"
      },
      "t_enum(Phase)478": {
        "encoding": "inplace",
        "label": "enum Common.Phase",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Initializer)935_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPoint.Initializer)",
        "numberOfBytes": "32",
        "value": "t_struct(Initializer)935_storage"
      },
      "t_mapping(t_enum(Phase)478,t_array(t_struct(Point)541_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Phase)478",
        "label": "mapping(enum Common.Phase => struct Common.Point[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)541_storage)dyn_storage"
      },
      "t_struct(Initializer)935_storage": {
        "encoding": "inplace",
        "label": "struct IPoint.Initializer",
        "members": [
          {
            "astId": 932,
            "contract": "contracts/standalone/Points.sol:Points",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 934,
            "contract": "contracts/standalone/Points.sol:Points",
            "label": "location",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)541_storage": {
        "encoding": "inplace",
        "label": "struct Common.Point",
        "members": [
          {
            "astId": 531,
            "contract": "contracts/standalone/Points.sol:Points",
            "label": "contributor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 533,
            "contract": "contracts/standalone/Points.sol:Points",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 535,
            "contract": "contracts/standalone/Points.sol:Points",
            "label": "referrals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 537,
            "contract": "contracts/standalone/Points.sol:Points",
            "label": "user",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 540,
            "contract": "contracts/standalone/Points.sol:Points",
            "label": "phase",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(Phase)478"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}