{
  "address": "0xc773CE4EFfbf902A5e5807186F7d6f60A2729b3e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_makerRate",
          "type": "uint16"
        },
        {
          "internalType": "contract IRoleBase",
          "name": "_roleManager",
          "type": "address"
        },
        {
          "internalType": "contract ISupportedAsset",
          "name": "_assetManager",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "contract IPoint",
          "name": "_pointFactory",
          "type": "address"
        },
        {
          "internalType": "contract ISafeFactory",
          "name": "_safeFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errorMsg",
          "type": "string"
        }
      ],
      "name": "ErrorOccurred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "Cancellation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxQuorum",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "selector",
                  "type": "uint8"
                },
                {
                  "internalType": "uint24",
                  "name": "colCoverage",
                  "type": "uint24"
                },
                {
                  "internalType": "uint32",
                  "name": "duration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "allGh",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "userCount",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Low",
              "name": "low",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint96",
                  "name": "recordId",
                  "type": "uint96"
                },
                {
                  "internalType": "uint96",
                  "name": "unitId",
                  "type": "uint96"
                }
              ],
              "internalType": "struct Common.Big",
              "name": "big",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "colAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "safe",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "enum Common.Router",
              "name": "router",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "GetFinanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxQuorum",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "selector",
                  "type": "uint8"
                },
                {
                  "internalType": "uint24",
                  "name": "colCoverage",
                  "type": "uint24"
                },
                {
                  "internalType": "uint32",
                  "name": "duration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "allGh",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "userCount",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Low",
              "name": "low",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint96",
                  "name": "recordId",
                  "type": "uint96"
                },
                {
                  "internalType": "uint96",
                  "name": "unitId",
                  "type": "uint96"
                }
              ],
              "internalType": "struct Common.Big",
              "name": "big",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "colAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "safe",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "enum Common.Router",
              "name": "router",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxQuorum",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "selector",
                  "type": "uint8"
                },
                {
                  "internalType": "uint24",
                  "name": "colCoverage",
                  "type": "uint24"
                },
                {
                  "internalType": "uint32",
                  "name": "duration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "allGh",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "userCount",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Low",
              "name": "low",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint96",
                  "name": "recordId",
                  "type": "uint96"
                },
                {
                  "internalType": "uint96",
                  "name": "unitId",
                  "type": "uint96"
                }
              ],
              "internalType": "struct Common.Big",
              "name": "big",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "colAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "safe",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "enum Common.Router",
              "name": "router",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "NewContributorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxQuorum",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "selector",
                  "type": "uint8"
                },
                {
                  "internalType": "uint24",
                  "name": "colCoverage",
                  "type": "uint24"
                },
                {
                  "internalType": "uint32",
                  "name": "duration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "allGh",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "userCount",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Low",
              "name": "low",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint96",
                  "name": "recordId",
                  "type": "uint96"
                },
                {
                  "internalType": "uint96",
                  "name": "unitId",
                  "type": "uint96"
                }
              ],
              "internalType": "struct Common.Big",
              "name": "big",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "colAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "safe",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "enum Common.Router",
              "name": "router",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "Payback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxQuorum",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "selector",
                  "type": "uint8"
                },
                {
                  "internalType": "uint24",
                  "name": "colCoverage",
                  "type": "uint24"
                },
                {
                  "internalType": "uint32",
                  "name": "duration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "allGh",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "userCount",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Low",
              "name": "low",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint96",
                  "name": "recordId",
                  "type": "uint96"
                },
                {
                  "internalType": "uint96",
                  "name": "unitId",
                  "type": "uint96"
                }
              ],
              "internalType": "struct Common.Big",
              "name": "big",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "colAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "safe",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "enum Common.Router",
              "name": "router",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxQuorum",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "selector",
                  "type": "uint8"
                },
                {
                  "internalType": "uint24",
                  "name": "colCoverage",
                  "type": "uint24"
                },
                {
                  "internalType": "uint32",
                  "name": "duration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "allGh",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "userCount",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Low",
              "name": "low",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint96",
                  "name": "recordId",
                  "type": "uint96"
                },
                {
                  "internalType": "uint96",
                  "name": "unitId",
                  "type": "uint96"
                }
              ],
              "internalType": "struct Common.Big",
              "name": "big",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "colAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "safe",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                }
              ],
              "internalType": "struct Common.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "enum Common.Router",
              "name": "router",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "enum Common.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Common.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "PoolEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activateReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "analytics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvlCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tvlBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPermissioned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPermissionless",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetManager",
      "outputs": [
        {
          "internalType": "contract ISupportedAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "awardPoint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "closePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earnStartDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Interest",
              "name": "accruals",
              "type": "tuple"
            }
          ],
          "internalType": "struct Common.Provider[]",
          "name": "providers",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "contributeThroughProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "maxQuorum",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "durationInHours",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "colCoverage",
          "type": "uint24"
        },
        {
          "internalType": "bool",
          "name": "isPermissionless",
          "type": "bool"
        },
        {
          "internalType": "contract IERC20",
          "name": "colAsset",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivateReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "maxQuorum",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "durationInHours",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "colCoverage",
          "type": "uint24"
        }
      ],
      "name": "editPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "enquireLiquidation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "paybackTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "turnStartTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "getFinanceTime",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "loan",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colBals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "sentQuota",
              "type": "bool"
            }
          ],
          "internalType": "struct Common.Contributor",
          "name": "profile",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "defaulter",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMember",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct Common.Slot",
          "name": "slot",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getCollateralQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "recordId",
          "type": "uint96"
        }
      ],
      "name": "getContributorProviders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earnStartDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fullInterest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intPerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Interest",
              "name": "accruals",
              "type": "tuple"
            }
          ],
          "internalType": "struct Common.Provider[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getCurrentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactoryData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tvlCollateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tvlBase",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalPermissioned",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalPermissionless",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common.Analytics",
              "name": "analytics",
              "type": "tuple"
            },
            {
              "internalType": "uint16",
              "name": "makerRate",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "currentEpoches",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recordEpoches",
              "type": "uint256"
            }
          ],
          "internalType": "struct Common.ViewFactoryData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getFinance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "unitId",
          "type": "uint96"
        }
      ],
      "name": "getPoolData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "maxQuorum",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "selector",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint24",
                      "name": "colCoverage",
                      "type": "uint24"
                    },
                    {
                      "internalType": "uint32",
                      "name": "duration",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint8",
                      "name": "allGh",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "userCount",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.Low",
                  "name": "low",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "unit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPool",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint96",
                      "name": "recordId",
                      "type": "uint96"
                    },
                    {
                      "internalType": "uint96",
                      "name": "unitId",
                      "type": "uint96"
                    }
                  ],
                  "internalType": "struct Common.Big",
                  "name": "big",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "contract IERC20",
                      "name": "colAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lastPaid",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "safe",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "admin",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Common.Addresses",
                  "name": "addrs",
                  "type": "tuple"
                },
                {
                  "internalType": "enum Common.Router",
                  "name": "router",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Common.Stage",
                  "name": "stage",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Common.Status",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "paybackTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "turnStartTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "getFinanceTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "loan",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colBals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "id",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "sentQuota",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Contributor",
                  "name": "profile",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isMember",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isAdmin",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Slot",
                  "name": "slot",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "slot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "rate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earnStartDate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "fullInterest",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "intPerSec",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Common.Interest",
                      "name": "accruals",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Common.Provider[]",
                  "name": "providers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Common.ContributorReturnValue[]",
              "name": "cData",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Common.ReadPoolDataReturnValue",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "recordId",
          "type": "uint96"
        }
      ],
      "name": "getPoolRecord",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "maxQuorum",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "selector",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint24",
                      "name": "colCoverage",
                      "type": "uint24"
                    },
                    {
                      "internalType": "uint32",
                      "name": "duration",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint8",
                      "name": "allGh",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "userCount",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.Low",
                  "name": "low",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "unit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPool",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint96",
                      "name": "recordId",
                      "type": "uint96"
                    },
                    {
                      "internalType": "uint96",
                      "name": "unitId",
                      "type": "uint96"
                    }
                  ],
                  "internalType": "struct Common.Big",
                  "name": "big",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "contract IERC20",
                      "name": "colAsset",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lastPaid",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "safe",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "admin",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Common.Addresses",
                  "name": "addrs",
                  "type": "tuple"
                },
                {
                  "internalType": "enum Common.Router",
                  "name": "router",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Common.Stage",
                  "name": "stage",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Common.Status",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Common.Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "paybackTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "turnStartTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "getFinanceTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "loan",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "colBals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "id",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "sentQuota",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Contributor",
                  "name": "profile",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isMember",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isAdmin",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct Common.Slot",
                  "name": "slot",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "slot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "rate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earnStartDate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "fullInterest",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "intPerSec",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Common.Interest",
                      "name": "accruals",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Common.Provider[]",
                  "name": "providers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Common.ContributorReturnValue[]",
              "name": "cData",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Common.ReadPoolDataReturnValue",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "paybackTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "turnStartTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "getFinanceTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "loan",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "colBals",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "id",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "sentQuota",
                  "type": "bool"
                }
              ],
              "internalType": "struct Common.Contributor",
              "name": "profile",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isMember",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isAdmin",
                  "type": "bool"
                }
              ],
              "internalType": "struct Common.Slot",
              "name": "slot",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "slot",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "earnStartDate",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "fullInterest",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "intPerSec",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common.Interest",
                  "name": "accruals",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Common.Provider[]",
              "name": "providers",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Common.ContributorReturnValue",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getSlot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMember",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct Common.Slot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "isPoolAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "payback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointFactory",
      "outputs": [
        {
          "internalType": "contract IPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeFactory",
      "outputs": [
        {
          "internalType": "contract ISafeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_makerRate",
          "type": "uint16"
        }
      ],
      "name": "setFeeOrMakerRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "updateTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e2cf094f29f0b0bb4cdee450c22bb612b3c728262f328a74ecafa0fff4e9d9b",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xc773CE4EFfbf902A5e5807186F7d6f60A2729b3e",
    "transactionIndex": 1,
    "gasUsed": "5229188",
    "logsBloom": "0x
    "blockHash": "0xe8d08fc03eba6f29405eef2758e82be44f0e7b203e36c4e7d2a7a6b88262d4db",
    "transactionHash": "0x0e2cf094f29f0b0bb4cdee450c22bb612b3c728262f328a74ecafa0fff4e9d9b",
    "logs": [],
    "blockNumber": 46117023,
    "cumulativeGasUsed": "5272946",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    10,
    "0x16884C8C6a494527f4541007A46239218e76F661",
    "0xB417BD4eB45A35Dd46f68C9549D4c55F2033E32F",
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1",
    "0xBEfE9A70f4AE058C445EC0A06269aB4aa4356b9F",
    "0xa398e5b7Ca6a9F87AE02AEC1B8060A92eF05eD49"
  ],
  "numDeployments": 4,
  "solcInputHash": "89370d9a8b41c6d99998d35c26e63e2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_makerRate\",\"type\":\"uint16\"},{\"internalType\":\"contract IRoleBase\",\"name\":\"_roleManager\",\"type\":\"address\"},{\"internalType\":\"contract ISupportedAsset\",\"name\":\"_assetManager\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"contract IPoint\",\"name\":\"_pointFactory\",\"type\":\"address\"},{\"internalType\":\"contract ISafeFactory\",\"name\":\"_safeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errorMsg\",\"type\":\"string\"}],\"name\":\"ErrorOccurred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"Cancellation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"GetFinanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"NewContributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"Payback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Common.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"PoolEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"analytics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvlCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tvlBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPermissioned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPermissionless\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetManager\",\"outputs\":[{\"internalType\":\"contract ISupportedAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awardPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"internalType\":\"struct Common.Provider[]\",\"name\":\"providers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"contributeThroughProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"durationInHours\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"isPermissionless\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"durationInHours\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"}],\"name\":\"editPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"enquireLiquidation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paybackTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"turnStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"getFinanceTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"profile\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"defaulter\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Slot\",\"name\":\"slot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getCollateralQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"}],\"name\":\"getContributorProviders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"internalType\":\"struct Common.Provider[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getCurrentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactoryData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tvlCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tvlBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPermissioned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPermissionless\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Analytics\",\"name\":\"analytics\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"makerRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoches\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recordEpoches\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.ViewFactoryData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getFinance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paybackTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"turnStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"getFinanceTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"profile\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Slot\",\"name\":\"slot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"internalType\":\"struct Common.Provider[]\",\"name\":\"providers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Common.ContributorReturnValue[]\",\"name\":\"cData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Common.ReadPoolDataReturnValue\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"}],\"name\":\"getPoolRecord\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"selector\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allGh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"userCount\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Low\",\"name\":\"low\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"recordId\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unitId\",\"type\":\"uint96\"}],\"internalType\":\"struct Common.Big\",\"name\":\"big\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"colAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct Common.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"enum Common.Router\",\"name\":\"router\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"enum Common.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paybackTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"turnStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"getFinanceTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"profile\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Slot\",\"name\":\"slot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"internalType\":\"struct Common.Provider[]\",\"name\":\"providers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Common.ContributorReturnValue[]\",\"name\":\"cData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Common.ReadPoolDataReturnValue\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paybackTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"turnStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"getFinanceTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Contributor\",\"name\":\"profile\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Slot\",\"name\":\"slot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnStartDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fullInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intPerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Interest\",\"name\":\"accruals\",\"type\":\"tuple\"}],\"internalType\":\"struct Common.Provider[]\",\"name\":\"providers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Common.ContributorReturnValue\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct Common.Slot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"isPoolAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointFactory\",\"outputs\":[{\"internalType\":\"contract IPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeFactory\",\"outputs\":[{\"internalType\":\"contract ISafeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_makerRate\",\"type\":\"uint16\"}],\"name\":\"setFeeOrMakerRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Simplifi (Bobeu)\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"activateReward()\":{\"details\":\"Activate reward\"},\"closePool(uint256)\":{\"details\":\"Cancels a pool. Only pool with one contributor can be close.\",\"params\":{\"unit\":\": Unit contribution.\"}},\"constructor\":{\"params\":{\"_assetManager\":\": Asset manager contract\",\"_baseAsset\":\": ERC20 compatible asset to use as base contribution\",\"_feeTo\":\": Fee receiver\",\"_pointFactory\":\": Platform fee\",\"_roleManager\":\": Role manager contract\"}},\"contribute(uint256)\":{\"details\":\"Add a contributor to a poool\",\"params\":{\"\":\": Unit contribution\"}},\"contributeThroughProvider((uint256,uint256,uint256,uint256,address,(uint256,uint256))[],address,uint256)\":{\"details\":\"Contributors can join a pool through a provider is they wish to borrow to finance the unit contribution.      If the unit is not taken, we add them to the pool otherwise a new pool will be launched.\",\"params\":{\"borrower\":\": Account address of the borrower\",\"providers\":\": List of providers that lend to the borrower\",\"unit\":\": Amount borrowed will automatically be the unit contribution\"}},\"createPool(address[],uint256,uint8,uint16,uint24,bool,address)\":{\"details\":\"Create a pool internally\",\"params\":{\"colAsset\":\": An ERC20-compatible asset to use as collateral currency \",\"colCoverage\":\": Ration of collateral coverage or index required as cover for loan\",\"durationInHours\":\": Maximum duration in hours each borrower can retain the loan\",\"isPermissionless\":\": Whether to create a permissionless or permissioned pool.\",\"maxQuorum\":\": Maximum number of contributors that can participate\",\"unit\":\": Unit contribution\",\"users\":\": List of participating accounts\"}},\"deactivateReward()\":{\"details\":\"Deactivate reward\"},\"editPool(uint256,uint8,uint16,uint24)\":{\"details\":\"Edit pool information\",\"params\":{\"colCoverage\":\": Collateral coverage or ratio.\",\"durationInHours\":\": Number of time in hours each contributor can retain the loan\",\"maxQuorum\":\": Number of expected participants\",\"unit\":\": Unit contribution\"}},\"enquireLiquidation(uint256)\":{\"details\":\"Check liquidation opportunity in the pool\",\"params\":{\"unit\":\": Unit contribution\"}},\"getCollateralQuote(uint256)\":{\"details\":\"Returns amount of collateral required in a pool.\",\"params\":{\"unit\":\": EpochId\"}},\"getContributorProviders(address,uint96)\":{\"details\":\"Return providers associated with the target account\",\"params\":{\"recordId\":\": Record id\",\"target\":\": Target account\"}},\"getCurrentDebt(uint256)\":{\"params\":{\"unit\":\": Unit contribution\"}},\"getFactoryData()\":{\"details\":\"Return contract data \"},\"getFinance(uint256)\":{\"details\":\"Get finance\",\"params\":{\"unit\":\": Unit contribution\"},\"returns\":{\"_0\":\"bool : Success or Failure\"}},\"getPoolData(uint96)\":{\"details\":\"Return past pools using unitId. \",\"params\":{\"unitId\":\": UnitId \"}},\"getPoolRecord(uint96)\":{\"details\":\"Return past pools using unitId. \",\"params\":{\"recordId\":\": Record Id\"}},\"getProfile(uint256,address)\":{\"details\":\"Returns the profile of target\",\"params\":{\"target\":\": User\",\"unit\":\": unit contribution\"}},\"isPoolAvailable(uint256)\":{\"details\":\"Get pool from storage\",\"params\":{\"unit\":\": Unit contribution\"}},\"liquidate(uint256)\":{\"details\":\"Liquidates a borrower if they have defaulted in repaying their loan. - If the current beneficiary defaults, they're liquidated. - Their collateral balances is forwarded to the liquidator. Liquidator also takes the full  responsibilities of the providers if any. - Liquidator must not be a participant in pool at `unitId. We use this  to avoid fatal error in storage.\",\"params\":{\"unit\":\": Unit contribution.\"}},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payback(uint256)\":{\"details\":\"Payback. For detailed documentation, see _payback\",\"params\":{\"unit\":\": Unit contribution\"}},\"setFeeOrMakerRate(address,uint16)\":{\"details\":\"Set fee or maker rate. The status of the value parsed determines which to update.\",\"params\":{\"_feeTo\":\": Fee receiving account. \",\"_makerRate\":\": Platform fee (in %)\"}},\"setRoleManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused.\"},\"updateTokenPrice(address)\":{\"details\":\"Update token price if price is zero or not inTime\",\"params\":{\"asset\":\": Asset for which to update price\"}}},\"title\":\"FlexpoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closePool(uint256)\":{\"notice\":\": Only the creator of a pool can close it provided the number of contributors does not exceed one.\"},\"constructor\":{\"notice\":\"================ Constructor ==============\"},\"contributeThroughProvider((uint256,uint256,uint256,uint256,address,(uint256,uint256))[],address,uint256)\":{\"notice\":\"By default, maxQuorum is set to 2 using this method. Users can immediately change the quorum to desired value otherwise it will not be possible if another contributor joins to complete the quorum. - durationInHrs is set to 72 hours by default. - colCoverage is set to 120 by default. Only accounts with the roleBearer are allowed i.e Ex. Providers contract If an user is contributing via the provider, we ensure the privacy of permissioned group is preserved.\"},\"createPool(address[],uint256,uint8,uint16,uint24,bool,address)\":{\"notice\":\"users list should be a list of participating accounts if it is permissioned including the creator being the first on the list. But the list can be empty if it is permissionless.\"},\"getCurrentDebt(uint256)\":{\"notice\":\"Returns the current debt of target user.\"},\"getFinance(uint256)\":{\"notice\":\": To get finance, the unit contribution must be active. In the event the expected contributor failed to  call, we swap their profile for the current msg.sender provided the grace period of 1hr has passed.\"},\"getPoolData(uint96)\":{\"notice\":\"For every unit contribution, the unit Id is unique to another and does not change\"},\"getPoolRecord(uint96)\":{\"notice\":\"The correct unitId must be parsed. The record id can be obtained by iterating over the past epoches. Using the record Id associated with the current pool will return empty pool but may not return empty contributors.\"},\"setFeeOrMakerRate(address,uint16)\":{\"notice\":\": For detailed doc on setting maker rate, see Utils.sol._getPercentage()\"},\"setRoleManager(address)\":{\"notice\":\"Set Role manager\"}},\"notice\":\"FlexpoolFactory enables peer-funding magic. Participants of each pool are referred to  contributors. There is no limit to the amount that can be contributed except for zer0 value. Users can single-handedly run a pool (where anyone is free to participate) or collectively with friends and family or peer operate a permissioned pool  where participation is restricted to the preset members only. Users can use providers strategy to finance their quota if they can't afford the unit contribution. They can select multiple providers if the provider balance cannot the amount they wish to borrow. If this is the case, the selected providers are  entitled to earn interest on the amount they provide. When paying back, the contributor will repay the full loan with interest but halved for other contributors.  \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standalone/FlexpoolFactory.sol\":\"FlexpoolFactory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/interfaces/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from './IERC20.sol';\\r\\n\\r\\ninterface Common {\\r\\n    event PoolCreated(Pool);\\r\\n    event NewContributorAdded(Pool);\\r\\n    event GetFinanced(Pool);\\r\\n    event Payback(Pool);\\r\\n    event Liquidated(Pool);\\r\\n    event Cancellation(uint unit);\\r\\n    event PoolEdited(Pool);\\r\\n\\r\\n    enum Stage {\\r\\n        JOIN, \\r\\n        GET, \\r\\n        PAYBACK, \\r\\n        CANCELED,\\r\\n        ENDED\\r\\n    }\\r\\n\\r\\n    // enum Network { HARDHAT, CELO, CROSSFI }\\r\\n\\r\\n    enum Phase { ALPHA, MAINNET }\\r\\n\\r\\n    enum Status { AVAILABLE, TAKEN }\\r\\n\\r\\n    enum Branch { CURRENT, RECORD }\\r\\n\\r\\n    enum Router { NONE, PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n    struct Pool {\\r\\n        Low low;\\r\\n        Big big;\\r\\n        Addresses addrs;\\r\\n        Router router;\\r\\n        Stage stage;\\r\\n        Status status;\\r\\n    }\\r\\n\\r\\n    struct Low {\\r\\n        uint8 maxQuorum;\\r\\n        uint8 selector;\\r\\n        uint24 colCoverage;\\r\\n        uint32 duration;\\r\\n        uint8 allGh;\\r\\n        uint8 userCount;\\r\\n    }\\r\\n\\r\\n    struct Big {\\r\\n        uint256 unit;\\r\\n        uint256 currentPool;\\r\\n        uint96 recordId;\\r\\n        uint96 unitId;\\r\\n    }\\r\\n\\r\\n    struct Point {\\r\\n        uint contributor;\\r\\n        uint creator;\\r\\n        uint referrals;\\r\\n        address user;\\r\\n        Phase phase;\\r\\n    }\\r\\n\\r\\n    struct PointsReturnValue {\\r\\n        string key;\\r\\n        Point[] value;\\r\\n    }\\r\\n\\r\\n    struct Interest {\\r\\n        uint fullInterest;\\r\\n        uint intPerSec;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Structured types - Address\\r\\n     * @param asset : Contract address of the asset in use.\\r\\n     * @param lastPaid: Last contributor who got finance.\\r\\n     * @param safe : Strategy for each pool or epoch. See Strategy.sol for more details.\\r\\n     * @param admin : Pool creator.\\r\\n     * \\r\\n    */\\r\\n    struct Addresses {\\r\\n        IERC20 colAsset;\\r\\n        address lastPaid;\\r\\n        address safe;\\r\\n        address admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @param isMember : Whether user is a member or not\\r\\n     *  @param turnStartTime: Time when the contributor's turn start to count.\\r\\n     *  @param getFinanceTime: Date when loan was disbursed\\r\\n     *  @param paybackTime: Date which the borrowed fund must be retured\\r\\n     *  @param loan: Total debts owed by the last fund recipient.\\r\\n     *  @param colBals: Collateral balances of the last recipient.\\r\\n     *  @param sentQuota : Whether an user/current msg.sender has received or not.\\r\\n     *  @param id : Address of the last recipient.\\r\\n     * @param interestPaid : The amount of interest paid  \\r\\n    */\\r\\n    struct Contributor {\\r\\n        uint32 paybackTime;\\r\\n        uint32 turnStartTime;\\r\\n        uint32 getFinanceTime;\\r\\n        uint loan;\\r\\n        uint colBals;\\r\\n        address id;\\r\\n        bool sentQuota;\\r\\n    }\\r\\n\\r\\n    struct Price {\\r\\n        uint128 price;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct Provider {\\r\\n        uint slot;\\r\\n        uint amount;\\r\\n        uint rate;\\r\\n        uint earnStartDate;\\r\\n        address account;\\r\\n        Interest accruals;\\r\\n    }\\r\\n\\r\\n    struct Payback_Safe {\\r\\n        address user; \\r\\n        IERC20 baseAsset; \\r\\n        uint256 debt;\\r\\n        uint256 attestedInitialBal;\\r\\n        bool allGF; \\r\\n        Contributor[] cData;\\r\\n        bool isSwapped;\\r\\n        address defaulted;\\r\\n        uint96 recordId;\\r\\n        IERC20 collateralAsset;\\r\\n    }\\r\\n\\r\\n    struct Slot {\\r\\n        uint value;\\r\\n        bool isMember;\\r\\n        bool isAdmin;\\r\\n    }\\r\\n\\r\\n    struct ReadPoolDataReturnValue {\\r\\n        Pool pool;\\r\\n        ContributorReturnValue[] cData;\\r\\n    }\\r\\n\\r\\n    struct ReadRecordDataReturnValue {\\r\\n        Pool pool;\\r\\n        Contributor[] cData;\\r\\n    }\\r\\n\\r\\n    struct UpdatePoolData {\\r\\n        uint unit;\\r\\n        uint96 unitId;\\r\\n        uint96 recordId;\\r\\n        uint8 maxQuorum;\\r\\n        uint24 colCoverage;\\r\\n        IERC20 colAsset;\\r\\n        uint16 durationInHours;\\r\\n        address creator;\\r\\n        Router router; \\r\\n    }\\r\\n\\r\\n    struct Analytics {\\r\\n        uint256 tvlCollateral;\\r\\n        uint256 tvlBase;\\r\\n        uint totalPermissioned;\\r\\n        uint totalPermissionless;\\r\\n    }\\r\\n\\r\\n    struct ViewFactoryData {\\r\\n        Analytics analytics;\\r\\n        uint16 makerRate;\\r\\n        uint currentEpoches;\\r\\n        uint recordEpoches;\\r\\n    }\\r\\n\\r\\n    struct ContributorReturnValue {\\r\\n        Contributor profile;\\r\\n        Slot slot;\\r\\n        Common.Provider[] providers;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x46c85b1ab84886a4ef21b9a7b7534216778ac3dd132120498927ec91cd96af5f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f16e22e9c3da96f41e8237352b0d826ca0421b69340e09aedae74eb222428e6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface IFactory is Common {\\r\\n  function contributeThroughProvider(Provider[] memory providers, address borrower, uint unit) external returns(bool);\\r\\n  function getContributorProviders(address target, uint96 recordId) external view returns(Provider[] memory);\\r\\n}\",\"keccak256\":\"0xc37bf239c0cb0b905902e70c09cc4817b891a9e1fb99fe37da5c746c4a748adb\",\"license\":\"MIT\"},\"contracts/interfaces/IPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n/**\\r\\n * @title Simplifi\\r\\n * @author : Bobeu - https://github.com/bobeu\\r\\n * @notice : Interface of the Point contract for managing user's rewards and points.\\r\\n */\\r\\ninterface IPoint {\\r\\n  struct Initializer {\\r\\n    bool isRegistered;\\r\\n    uint location; \\r\\n  }\\r\\n\\r\\n  function getPoint(address user, uint8 phase) external view returns(Common.Point memory);\\r\\n  function setPoint(\\r\\n    address user, \\r\\n    uint8 contributor,\\r\\n    uint8 creator,\\r\\n    uint8 referrals\\r\\n  ) external returns(bool);\\r\\n  function deductPoint(\\r\\n    address user, \\r\\n    uint8 contributor,\\r\\n    uint8 creator,\\r\\n    uint8 referrals\\r\\n  ) external returns(bool);\\r\\n}\",\"keccak256\":\"0x0c484429b6a5432e874c79830cbeb5d2836f4c0d3f28753f2cdae0ad0de7d265\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface IPriceOracle {\\r\\n  struct PriceData {\\r\\n    string pair;\\r\\n    address oracleAddress;\\r\\n    uint128 latestPrice;\\r\\n    uint128 timestampOflatestPrice;\\r\\n    uint8 decimals;\\r\\n  }\\r\\n\\r\\n  // Only rolebearer function\\r\\n  function getPriceQuote(address asset) external view returns(uint128 price, bool inTime, uint8 decimals);\\r\\n  function updatePriceFeed(address asset) external;\\r\\n}\",\"keccak256\":\"0xdde0b228f09aae3b7a2cdd2b2276d7adc21d2ec0a32b5852c892c9a402aecf7c\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title IRoleBase \\r\\n * Interface of the OwnerShip contract\\r\\n * @author Simplifi (Bobeu)\\r\\n */\\r\\ninterface IRoleBase {\\r\\n    function setRole(\\r\\n        address[] memory newRoleTos\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRoleBearer(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0xa166efe0dfbcd8f4e00f33c155797b3e2d652087f630893518b0dec1f823519b\",\"license\":\"MIT\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ISafe {\\r\\n  function addUp(address user, uint recordId) external returns(bool);\\r\\n  function getFinance(\\r\\n    address user, \\r\\n    IERC20 baseAsset, \\r\\n    uint256 loan, \\r\\n    uint fee, \\r\\n    uint256 calculatedCol,\\r\\n    uint recordId\\r\\n  ) \\r\\n    external \\r\\n    returns(bool);\\r\\n\\r\\n  function payback(Common.Payback_Safe memory, uint unit) external returns(uint collateral);\\r\\n  function cancel(address user, IERC20 asset, uint unit, uint recordId) external returns(bool);\\r\\n  function getData() external view returns(ViewData memory);\\r\\n\\r\\n  struct ViewData {\\r\\n    uint totalClients;\\r\\n    uint aggregateFee;\\r\\n  }\\r\\n\\r\\n  struct ViewUserData {\\r\\n    bool access;\\r\\n    uint collateralBalance;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xb113c5e00e96aa0ebf6bd50a40033cbde2e351f7494a38685f2e5bbe2d9929aa\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @title Interface of the Safe manager\\r\\n * @author : Simplifinance (Written by Bobeu)\\r\\n */\\r\\ninterface ISafeFactory {  \\r\\n  /**\\r\\n   * Query safe for user\\r\\n   * @param unit : Address to get safe for\\r\\n   * @return A safe if none was found, it returns address(0).\\r\\n   */\\r\\n  function getSafe(uint256 unit) external view returns(address);\\r\\n  // function getSafe(address user) external view returns(address);\\r\\n\\r\\n/**\\r\\n * Clones and return a new safe \\r\\n * @param unit : Target address for whom to create safe\\r\\n */\\r\\n  function pingSafe(uint256 unit) external returns(address safe);\\r\\n\\r\\n  /**\\r\\n   * Safe struct map\\r\\n   * key: user address { EOA }\\r\\n   * value: Safe { Contract } \\r\\n   */\\r\\n  struct SafeData {\\r\\n    address key;\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0xb460c9de77c7f8be953e2a48d864e1307ea33a051e7deff43873ca47ecb8a730\",\"license\":\"MIT\"},\"contracts/interfaces/ISupportedAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\n\\r\\ninterface ISupportedAsset {\\r\\n  struct SupportedAsset {\\r\\n    address id;\\r\\n    string name;\\r\\n    string symbol;\\r\\n  }\\r\\n  function isSupportedAsset(address _asset) external view returns(bool);\\r\\n  function getDefaultSupportedCollateralAsset() external view returns(address);\\r\\n} \",\"keccak256\":\"0x4e8b8ddf5a0189841512e2a014002847497b6d0e8819504e9fd690fc34b547c2\",\"license\":\"MIT\"},\"contracts/libraries/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary ErrorLib {\\r\\n    error ErrorOccurred(string errorMsg);\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts any operation.\\r\\n     * @param _error : Error struct\\r\\n     */\\r\\n    function _throw(string memory _error) internal pure {\\r\\n        if(bytes(_error).length > 0){ \\r\\n            revert ErrorOccurred(_error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x967582ca2a833932c7403e6950ede1972f1b7f94ecfedd2d3ddee9175d309e5a\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport { Common } from \\\"../interfaces/Common.sol\\\";\\r\\nimport { ErrorLib } from \\\"./ErrorLib.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    using Address for address;\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    /**     @dev Calculation of percentage.\\r\\n        *   This is how we calculate percentage to arrive at expected value with \\r\\n        *   precision.\\r\\n        *   We choose a base value (numerator as 10000) repesenting a 100% of the principal value. This means if Alice wish to set \\r\\n        *   her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \\r\\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \\r\\n        *   zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\\r\\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\\r\\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \\r\\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\\r\\n        *   @param interest : Interest rate. \\r\\n        *   \\r\\n        *   Rules\\r\\n        *   -----\\r\\n        *   - Principal cannot be less than base.\\r\\n        *   - Interest cannot be greater than (2 ^ 16) - 1\\r\\n    */\\r\\n    function _getPercentage(\\r\\n        uint principal, \\r\\n        uint16 interest\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns (uint _return) \\r\\n    {\\r\\n        uint16 base = _getBase(); \\r\\n        if(interest == 0 || principal == 0) return 0;\\r\\n        if(interest >= type(uint16).max) 'Interest overflow'._throw(); \\r\\n        if(principal <= base) 'Principal should be greater than 10000'._throw();\\r\\n        unchecked {\\r\\n            _return = (principal * interest) / base;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Percentage base\\r\\n     */\\r\\n    function _getBase() internal pure returns(uint16 base) {\\r\\n        base = 10000;\\r\\n    }\\r\\n    \\r\\n    function _decimals(address asset) internal view returns(uint8 decimals) {\\r\\n        decimals = IERC20Metadata(asset).decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes collateral on the requested loan amount\\r\\n     * @param ccr : Collateral ratio. Must be multiply by 100 before parsing as input i.e if raw ccr\\r\\n     *              is 1.2, it should be rendered as 1.2 * 100 = 120.\\r\\n     * @param price : Price of Collateral token base with decimals.\\r\\n     * @param loanReqInDecimals : Total requested contribution in USD\\r\\n     * @notice Based on Simplifi mvp, loans are collaterized in XFI until we add more pairs\\r\\n     *         in the future.\\r\\n     * Example: Alice, Bob and Joe formed a band to contribute $100 each where duration is for \\r\\n     * 10 days each. Alice being the admin set ccr to 1.5 equivalent to 150% of the total sum \\r\\n     * contribution of $300. If the price of XFI as at the time of GF is $0.5/XFI, where XFI decimals\\r\\n     * is in 18, we calculate the required XFI to stake as follows:   \\r\\n     *  \\r\\n     *                    totalContribution *  (10** XFIdecimals)   |                 raw ccr\\r\\n     *   totalLoanInXFI = --------------------------------------    |    actualCCR = (1.5 * 100) * 100 = 1500\\r\\n     *                        (xfiPriceIndecimals)                  |\\r\\n     * \\r\\n     *                     totalLoanInXFI * actualCCR\\r\\n     *        XFINeeded = ----------------------------\\r\\n     *                             _getBase()\\r\\n     * \\r\\n     *  Therefore, Alice is required to stake 900XFI to GF $300 for 10 days.\\r\\n     *   \\r\\n     */\\r\\n    function computeCollateral(\\r\\n        Common.Price memory price,\\r\\n        uint24 ccr,\\r\\n        uint loanReqInDecimals\\r\\n    ) \\r\\n        internal\\r\\n        pure \\r\\n        returns(uint256 expCol) \\r\\n    {\\r\\n        // uint8 minCCR = 100;\\r\\n        // if(ccr < minCCR) revert CollateralCoverageCannotGoBelow_100();\\r\\n        if(ccr == 0 || price.price == 0 || loanReqInDecimals == 0) expCol = 0;\\r\\n        else {\\r\\n            unchecked {\\r\\n                uint48 _ccr = uint48(ccr * 100);\\r\\n                uint totalLoan = (loanReqInDecimals * (10**price.decimals)) / price.price;\\r\\n                expCol = (totalLoan * _ccr) / _getBase();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Computes maker fee.\\r\\n        @param makerRate : The amount of fee (in %) charged by the platform on the principal given to a borrower.\\r\\n            Note : Raw rate must multiply by 100 to get the expected value i.e\\r\\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\\r\\n            See `_getPercentage()`.\\r\\n        @param amount should be in decimals.\\r\\n    */\\r\\n    function computeFee(\\r\\n        uint amount, \\r\\n        uint16 makerRate\\r\\n    ) \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint mFee) \\r\\n    {\\r\\n        mFee = _getPercentage(amount, makerRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compute interest based on specified rate.\\r\\n     * @param rate : Interest rate.\\r\\n     * @param principal : Total expected contribution.\\r\\n     * @param fullDurationInSec : Total duration.\\r\\n     * \\r\\n     * Rules\\r\\n     * -----\\r\\n     * - Duration cannot exceed 30days i.e 2592000 seconds uint24 seconds\\r\\n     */\\r\\n    function computeInterestsBasedOnDuration(\\r\\n        uint principal,\\r\\n        uint16 rate,\\r\\n        uint32 fullDurationInSec\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns(Common.Interest memory it) \\r\\n    {\\r\\n        assert(fullDurationInSec <= _maxDurationInSec());\\r\\n        it.fullInterest = _getPercentage(principal, rate); // Full interest for fullDurationInSec\\r\\n        if(it.fullInterest > 0) {\\r\\n            unchecked {\\r\\n                it.intPerSec = (it.fullInterest * 1) / fullDurationInSec;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Max duration : 30Days, presented in seconds\\r\\n     */\\r\\n    function _maxDurationInSec() internal pure returns(uint24 max) {\\r\\n        max = 2592000;\\r\\n    }\\r\\n\\r\\n    function _now() internal view returns(uint64 date) {\\r\\n        date = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xda2f52fea85a9b1f0eb847dbb415ca42655369efba07e261b88ef58b034fd399\",\"license\":\"MIT\"},\"contracts/peripherals/AwardPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IPoint, Common } from \\\"../interfaces/IPoint.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\nimport { ERC20Manager, IERC20, ISupportedAsset, IRoleBase, ISafeFactory } from \\\"./ERC20Manager.sol\\\";\\r\\nimport { IPriceOracle } from \\\"../interfaces/IPriceOracle.sol\\\";\\r\\n\\r\\nabstract contract AwardPoint is ERC20Manager {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Whether to award point to users or not\\r\\n    bool public awardPoint;\\r\\n\\r\\n    // Point factory address\\r\\n    IPoint public immutable pointFactory;\\r\\n\\r\\n    /**\\r\\n     * ================ Constructor ==============\\r\\n     * @param _roleManager : Role manager contract\\r\\n     * @param _pointFactory : Point Factory contract\\r\\n     */\\r\\n    constructor(\\r\\n        IRoleBase _roleManager, \\r\\n        IPoint _pointFactory,\\r\\n        IERC20 _baseAsset,\\r\\n        ISupportedAsset _assetManager, \\r\\n        ISafeFactory _safeFactory\\r\\n    ) \\r\\n        ERC20Manager(_assetManager,  _baseAsset, _roleManager, _safeFactory)\\r\\n    {\\r\\n        if(address(_pointFactory) == address(0)) 'IPointFactory is zero'._throw();\\r\\n        awardPoint = true;\\r\\n        pointFactory = _pointFactory;\\r\\n    }\\r\\n\\r\\n    ///@dev Award points for users\\r\\n    function _awardPoint(address target, uint8 asMember, uint8 asAdmin, bool deduct) internal {\\r\\n        bool done = deduct? IPoint(pointFactory).deductPoint(target, asMember, asAdmin, 0) : IPoint(pointFactory).setPoint(target, asMember, asAdmin, 0);\\r\\n        if(!done) 'Reward failed'._throw();\\r\\n    }\\r\\n\\r\\n    /// @dev Activate reward\\r\\n    function activateReward() public onlyRoleBearer returns(bool) {\\r\\n        if(awardPoint) 'Is active'._throw();\\r\\n        awardPoint = true;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Deactivate reward\\r\\n    function deactivateReward() public onlyRoleBearer returns(bool) {\\r\\n        if(!awardPoint) 'Is inActive'._throw();\\r\\n        awardPoint = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get price quote from the oracle contract\\r\\n     * @param asset : Asset to get price for\\r\\n    */\\r\\n    function _getCollateralTokenPrice(address asset) internal view returns(uint128 result, bool inTime, uint8 decimals) {\\r\\n        (result, inTime, decimals) = IPriceOracle(address(assetManager)).getPriceQuote(asset);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get price quote from the oracle contract\\r\\n     * @param asset : Asset to get price for\\r\\n    */\\r\\n    function _updateTokenPrice(address asset) internal {\\r\\n        IPriceOracle(address(assetManager)).updatePriceFeed(asset);\\r\\n    }\\r\\n \\r\\n}\",\"keccak256\":\"0xe03e15e1676d31f7163e2e6e5a7887e33964155af1bb0157e8abd302c28046c3\",\"license\":\"MIT\"},\"contracts/peripherals/Contributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Epoches, Common } from \\\"./Epoches.sol\\\";\\r\\nimport { Slots } from \\\"./Slots.sol\\\" ;\\r\\nimport { Utils } from \\\"../libraries/Utils.sol\\\";\\r\\nimport { AwardPoint, IRoleBase, IERC20, ErrorLib, IPoint, ISupportedAsset, ISafeFactory } from \\\"./AwardPoint.sol\\\";\\r\\nimport { ISafe } from \\\"../interfaces/ISafe.sol\\\";\\r\\n\\r\\nabstract contract Contributor is Epoches, Slots, AwardPoint {\\r\\n    using ErrorLib for *;\\r\\n    using Utils for *;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of recordId to contributors\\r\\n     * @notice We used record Id to index the contributors in a pool while a unit contribution\\r\\n     * van have multiple records, it makes sense to track contributors in each pool with their record Id\\r\\n    */\\r\\n    mapping(uint96 => Common.Contributor[]) private contributors;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of record ids to contributors to array of providers\\r\\n     * @notice Each contributor can maintain a list of providers they borrow from\\r\\n     */\\r\\n    mapping(uint96 => mapping(address => Common.Provider[])) private unitProviders;\\r\\n\\r\\n    // ============= constructor ============\\r\\n    constructor(\\r\\n        ISupportedAsset _assetManager, \\r\\n        IRoleBase _roleManager,\\r\\n        IERC20 _baseAsset,\\r\\n        IPoint _pointFactory,\\r\\n        ISafeFactory _safeFactory\\r\\n    ) \\r\\n       AwardPoint(_roleManager, _pointFactory, _baseAsset, _assetManager, _safeFactory)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @dev Only contributor in a pool is allowed\\r\\n     * @param target : Target\\r\\n     * @param unit : Unit Contribution\\r\\n    */\\r\\n    function _onlyContributor(address target, uint256 unit, bool pass) internal view {\\r\\n        if(!pass){\\r\\n            if(!_getSlot(target, unit).isMember) 'Not a member'._throw();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only Non contributor in a pool is allowed\\r\\n     * @param target : Target\\r\\n     * @param unit : Unit Contribution\\r\\n     */\\r\\n    function _onlyNonContributor(address target, uint256 unit) internal view {\\r\\n        if(_getSlot(target, unit).isMember) 'Member not allowed'._throw();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns target's profile status in a pool\\r\\n     * @param target : Target account\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _getContributor(\\r\\n        address target, \\r\\n        uint unit\\r\\n    ) internal view returns(Common.ContributorReturnValue memory result) {\\r\\n        uint96 recordId = _getRecordId(unit);\\r\\n        result.slot = _getSlot(target, unit);\\r\\n        result.profile = contributors[recordId][result.slot.value];\\r\\n        result.providers = _getContributorProviders(target, recordId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return providers associated with the target account\\r\\n     * @param target : Target account\\r\\n     * @param recordId : Record id\\r\\n     */\\r\\n    function _getContributorProviders(address target, uint96 recordId) internal view returns(Common.Provider[] memory result){\\r\\n        result = unitProviders[recordId][target];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns user's profile status in a pool\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _getExpected(uint256 unit, uint8 selector) internal view returns(Common.Contributor memory _expected) {\\r\\n        _expected = contributors[_getRecordId(unit)][selector];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the provider list of a contributor\\r\\n     * @param providers : List of providers\\r\\n     * @param user : Target user\\r\\n     * @param recordId : Record Id\\r\\n     */\\r\\n    function _setProviders(\\r\\n        Common.Provider[] memory providers, \\r\\n        address user, \\r\\n        uint96 recordId\\r\\n    ) internal {\\r\\n        for(uint i = 0; i < providers.length; i++){\\r\\n            unitProviders[recordId][user].push(providers[i]);\\r\\n        }\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Set user's time to get finance\\r\\n     * @param user : Target address\\r\\n     * @param unit : Unit contribution\\r\\n     * @param date : Date/timestamp\\r\\n     * @notice If 'user' is zero address, we generate a new slot otherwise fetch existing slot\\r\\n     */ \\r\\n    function _setTurnStartTime(address user, uint256 unit, uint32 date) internal {\\r\\n        uint position;\\r\\n        if(user == address(0)){\\r\\n            position = _getPool(unit).low.selector;\\r\\n            user = _getExpected(unit, uint8(position)).id;\\r\\n        } else {\\r\\n            position = _getSlot(user, unit).value;\\r\\n        }\\r\\n        contributors[_getRecordId(unit)][position].turnStartTime = date;\\r\\n     }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or update contributor to the list of contributors\\r\\n     * @param profile : Target profile\\r\\n     * @param position : The position of target user in the list\\r\\n     * @param recordId : Unit Id\\r\\n     */\\r\\n    function _setContributor(Common.Contributor memory profile, uint96 recordId, uint8 position, bool setEmpty) internal {\\r\\n        Common.Contributor memory empty;\\r\\n        contributors[recordId][position] = setEmpty? empty : profile;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add contributor data to storage\\r\\n     * @param pool : Pool struct\\r\\n     * @param unit : Unit contribution\\r\\n     * @param target : Target user\\r\\n     * @param isAdmin : Whether user is the creator or not\\r\\n     * @param isMember : Whether user is a member or not\\r\\n     * @param sentQuota : Whether user have sent their quota of the contribution or not\\r\\n     */\\r\\n    function _initializeContributor(\\r\\n        Common.Pool memory pool,\\r\\n        uint256 unit,\\r\\n        address target,\\r\\n        bool isAdmin,\\r\\n        bool isMember,\\r\\n        bool sentQuota            \\r\\n    ) internal returns(Common.ContributorReturnValue memory data) {\\r\\n        data.slot.value = contributors[pool.big.recordId].length;\\r\\n        _createSlot(target, unit, uint8(data.slot.value), isAdmin, isMember);\\r\\n        contributors[pool.big.recordId].push(); \\r\\n        data.profile.id = target;\\r\\n        data.profile.sentQuota = sentQuota;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove contributor from a pool\\r\\n     * @param target : Target address\\r\\n     * @param unit : Unit contribution\\r\\n     * @notice Parsing true to _setSlot as the last argument with set the slot to empty\\r\\n     */\\r\\n    function _removeContributor(address target, uint256 unit) internal {\\r\\n        Common.Slot memory slot = _getSlot(target, unit);\\r\\n        _setSlot(target, unit, slot, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swaps contributors data if the expected caller is not the same as the actual caller\\r\\n     * and the grace period has elapsed.\\r\\n     * @param unit : Unit contribution\\r\\n     * @param actual : Actual calling account\\r\\n     * @param expectedSlot : Slot of expected calling account\\r\\n     * @param expectedData : Data of expected calling account\\r\\n     */\\r\\n    function _swapContributors(\\r\\n        uint256 unit,\\r\\n        address actual,\\r\\n        Common.Slot memory expectedSlot,\\r\\n        Common.Contributor memory expectedData\\r\\n    )\\r\\n        internal\\r\\n        returns(Common.Contributor memory actualData) \\r\\n    {\\r\\n        _onlyContributor(actual, unit, false);\\r\\n        uint96 recordId = _getRecordId(unit);\\r\\n        Common.Slot memory actualSlot = _getSlot(actual, unit);\\r\\n        actualData = _getContributor(actual, unit).profile;\\r\\n        _setSlot(actual, unit, expectedSlot, false);\\r\\n        _setSlot(expectedData.id, unit, actualSlot, false);\\r\\n        expectedData.id = actual;\\r\\n        actualData.id = expectedData.id;\\r\\n        _setContributor(expectedData, recordId, uint8(expectedSlot.value), false);\\r\\n        _setContributor(actualData, recordId, uint8(actualSlot.value), false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Complete the getFinance task\\r\\n     * @param pool : Existing pool. Must not be an empty pool.\\r\\n     * @param collateral : Expected collateral\\r\\n     * @param profile : User's profile data\\r\\n     */\\r\\n    function _completeGetFinance(Common.Pool memory pool, uint collateral, Common.Contributor memory profile) internal returns(Common.Pool memory _pool, Common.Contributor memory _profile) {\\r\\n        pool.low.selector ++;\\r\\n        unchecked {\\r\\n            profile.paybackTime = _now() + pool.low.duration;\\r\\n        }\\r\\n        profile.colBals = collateral;\\r\\n        profile.loan = pool.big.currentPool;\\r\\n        Common.Provider[] memory providers = unitProviders[pool.big.recordId][pool.addrs.lastPaid];\\r\\n        for(uint i = 0; i < providers.length; i++){\\r\\n            unitProviders[pool.big.recordId][pool.addrs.lastPaid][i].earnStartDate = _now();\\r\\n            unitProviders[pool.big.recordId][pool.addrs.lastPaid][i].accruals = providers[i].amount.computeInterestsBasedOnDuration(uint16(providers[i].rate), pool.low.duration);\\r\\n        }\\r\\n        pool.big.currentPool = 0;\\r\\n        pool.stage = Common.Stage.PAYBACK;\\r\\n        _pool = pool;\\r\\n        _profile = profile;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Payback loan\\r\\n     * @param unit : Unit contribution\\r\\n     * @param payer : Contributor\\r\\n     * @param isSwapped : Whether there was swapping or not. Often swapping will happen when a contributor defaults\\r\\n     * @param defaulter : The defaulter account\\r\\n     */\\r\\n    function _payback(\\r\\n        uint unit, \\r\\n        address payer,\\r\\n        bool isSwapped,\\r\\n        address defaulter\\r\\n    ) \\r\\n        internal\\r\\n        _onlyIfUnitIsActive(unit)\\r\\n        returns(Common.Pool memory pool, uint debt, uint collateral)\\r\\n    {\\r\\n        (debt, pool) = _getCurrentDebt(unit);\\r\\n        if(debt == 0) 'No debt found'._throw();\\r\\n        uint slot = _getSlot(pool.addrs.lastPaid, unit).value;\\r\\n        contributors[pool.big.recordId][slot].loan = 0;\\r\\n        contributors[pool.big.recordId][slot].colBals = 0;\\r\\n        contributors[pool.big.recordId][slot].paybackTime = _now();\\r\\n        if(awardPoint) _awardPoint(pool.addrs.lastPaid, 2, 0, false);\\r\\n        if(pool.low.maxQuorum == pool.low.allGh){\\r\\n            pool.stage = Common.Stage.ENDED;\\r\\n            _shufflePool(pool);\\r\\n        } else {\\r\\n            contributors[pool.big.recordId][pool.low.selector].turnStartTime = _now();\\r\\n            pool.stage = Common.Stage.GET;\\r\\n            unchecked {\\r\\n                pool.big.currentPool = pool.big.unit * pool.low.maxQuorum;\\r\\n            }\\r\\n            _setPool(pool.big.unitId, pool);\\r\\n        }\\r\\n        uint attestedInitialBal = IERC20(baseAsset).balanceOf(pool.addrs.safe);\\r\\n        _checkAndWithdrawAllowance(IERC20(baseAsset), payer, pool.addrs.safe, debt);\\r\\n        collateral = ISafe(pool.addrs.safe).payback(\\r\\n            Common.Payback_Safe(payer, baseAsset, debt, attestedInitialBal, pool.low.maxQuorum == pool.low.allGh, contributors[pool.big.recordId], isSwapped, defaulter, pool.big.recordId, pool.addrs.colAsset),\\r\\n            unit\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Return past pools using unitId. \\r\\n     * @notice The correct unitId must be parsed. \\r\\n     * @param recordId: Record Id\\r\\n     * @notice The record id can be obtained by iterating over the past epoches. Using the record Id\\r\\n     * associated with the current pool will return empty pool but may not return empty contributors.\\r\\n     */\\r\\n    function getPoolRecord(uint96 recordId) public view returns(Common.ReadPoolDataReturnValue memory result) {\\r\\n        result = _getPoolData(_getPastPool(recordId));\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return past pools using unitId. \\r\\n     * @notice For every unit contribution, the unit Id is unique to another and does not change\\r\\n     * @param unitId: UnitId \\r\\n    */\\r\\n    function getPoolData(uint96 unitId) public view returns(Common.ReadPoolDataReturnValue memory result) {\\r\\n        result = _getPoolData(_getPoolWithUnitId(unitId));\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function _getPoolData(Common.Pool memory pool) internal view returns(Common.ReadPoolDataReturnValue memory result) {\\r\\n        result.pool = pool;\\r\\n        Common.Contributor[] memory targets = contributors[result.pool.big.recordId];\\r\\n        Common.ContributorReturnValue[] memory data = new Common.ContributorReturnValue[](targets.length);\\r\\n        if(result.pool.big.unit > 0) {\\r\\n            for(uint i = 0; i < targets.length; i++) {\\r\\n                address target = targets[i].id;\\r\\n                data[i] = _getContributor(target, result.pool.big.unit);\\r\\n            }\\r\\n            result.cData = data;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Get pool from storage\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function isPoolAvailable(uint256 unit) public view returns(bool) {\\r\\n        return _getPool(unit).status == Common.Status.AVAILABLE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the profile of target\\r\\n     * @param unit : unit contribution\\r\\n     * @param target : User\\r\\n     */\\r\\n    function getProfile(\\r\\n        uint256 unit,\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        // onlyInitialized(unit, false)\\r\\n        returns(Common.ContributorReturnValue memory) \\r\\n    {\\r\\n        return _getContributor(target, unit);\\r\\n    }\\r\\n\\r\\n    function _replaceContributor(address liquidator, uint96 recordId, Common.Slot memory slot, address _defaulter, uint unit) internal {\\r\\n        Common.Provider[] memory providers = unitProviders[recordId][_defaulter];\\r\\n        if(providers.length > 0) {\\r\\n            unitProviders[recordId][liquidator] = unitProviders[recordId][_defaulter];\\r\\n            delete unitProviders[recordId][_defaulter];\\r\\n        }\\r\\n        contributors[recordId][slot.value].id = liquidator;\\r\\n        _setSlot(liquidator, unit, slot, false);\\r\\n        _setSlot(_defaulter, unit, slot, true);\\r\\n        // _defaulter.id = liquidator;\\r\\n        // contributors[recordId][slot.value] = _defaulter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount of collateral required in a pool.\\r\\n     * @param unit : EpochId\\r\\n     * @return collateral Collateral\\r\\n    */\\r\\n    function _getCollateralQuote(uint256 unit)\\r\\n        internal\\r\\n        view\\r\\n        returns(uint collateral, uint128 lastPrice, bool inTime)\\r\\n    {\\r\\n        Common.Pool memory pool = _getPool(unit);\\r\\n        uint8 priceDecimals;\\r\\n        (lastPrice, inTime, priceDecimals) = _getCollateralTokenPrice(address(pool.addrs.colAsset));\\r\\n        if(pool.big.unit > 0) {\\r\\n            unchecked {\\r\\n                collateral = Common.Price(\\r\\n                        lastPrice,\\r\\n                        priceDecimals\\r\\n                    ).computeCollateral(\\r\\n                        uint24(pool.low.colCoverage), \\r\\n                        pool.big.unit * pool.low.maxQuorum\\r\\n                    );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt of last paid acount i.e the contributor that last got finance\\r\\n     * @param unit : Unit contribution\\r\\n     * @notice For every contributor that provide liquidity through providers, they are required to \\r\\n     * pay interest in proportion to the providers' rate. Every other contributors in the same pool \\r\\n     * will pay interest to the same set of providers but the interest will be halved.\\r\\n     */\\r\\n    function _getCurrentDebt(uint unit) internal view returns (uint256 debt, Common.Pool memory pool) {\\r\\n        pool = _getPool(unit);\\r\\n        assert(pool.addrs.lastPaid != address(0));\\r\\n        Common.Contributor[] memory profiles = contributors[pool.big.recordId];\\r\\n        if(profiles.length > 0) {\\r\\n            for(uint i = 0; i < profiles.length; i++){\\r\\n                Common.ContributorReturnValue memory data = _getContributor(profiles[i].id, unit);\\r\\n                if(data.profile.id == pool.addrs.lastPaid) {\\r\\n                    debt += data.profile.loan;\\r\\n                }\\r\\n                if(data.providers.length > 0) {\\r\\n                    for(uint j = 0; j < data.providers.length; j++){\\r\\n                        unchecked { \\r\\n                            Common.Provider memory provider = data.providers[j];\\r\\n                            if(_now() > provider.earnStartDate) {\\r\\n                                if(data.profile.id == pool.addrs.lastPaid) debt += provider.accruals.intPerSec * (_now() - provider.earnStartDate);\\r\\n                                else debt += (provider.accruals.intPerSec / 2) * (_now() - provider.earnStartDate);\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n      /**\\r\\n   * @dev Return struct object with data if current beneficiary has defaulted otherwise an empty struct is returned.\\r\\n   * @param unit: Unit contribution\\r\\n   */\\r\\n    function _enquireLiquidation(uint unit) \\r\\n        internal \\r\\n        view \\r\\n        returns (Common.Contributor memory _profile, bool isDefaulted, Common.Slot memory slot) \\r\\n    {\\r\\n        Common.Pool memory pool = _getPool(unit);\\r\\n        assert(pool.addrs.lastPaid != address(0));\\r\\n        Common.ContributorReturnValue memory _default = _getContributor(pool.addrs.lastPaid, unit);\\r\\n        if(_now() > _default.profile.paybackTime) {\\r\\n            assert(pool.addrs.lastPaid == _default.profile.id);\\r\\n            (_profile, isDefaulted, slot) = (_default.profile, true, _default.slot);\\r\\n        } \\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Check liquidation opportunity in the pool\\r\\n        * @param unit : Unit contribution\\r\\n    */\\r\\n    function enquireLiquidation(uint unit) public view returns(Common.Contributor memory profile, bool defaulter, Common.Slot memory slot) {\\r\\n        return _enquireLiquidation(unit);\\r\\n    }\\r\\n\\r\\n    function _now() internal view returns(uint32 time) {\\r\\n        time = uint32(block.timestamp);\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0xe7a3a7a5f98d127297e6200d53956c75ec4f889247b35e36424728afaa0d0750\",\"license\":\"MIT\"},\"contracts/peripherals/ERC20Manager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport { ISupportedAsset } from \\\"../interfaces/ISupportedAsset.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\nimport { SafeGetter, IRoleBase, ISafeFactory } from \\\"./SafeGetter.sol\\\";\\r\\n\\r\\nabstract contract ERC20Manager is SafeGetter {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Supportasset manager contract\\r\\n    ISupportedAsset public immutable assetManager;\\r\\n\\r\\n    // Base asset contract e.g cUSD, xUSD\\r\\n    IERC20 public immutable baseAsset;\\r\\n\\r\\n    modifier onlySupportedAsset(IERC20 asset) {\\r\\n        if(asset != baseAsset){\\r\\n            if(!ISupportedAsset(assetManager).isSupportedAsset(address(asset))) 'Unsupported Asset'._throw();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============= Constructor ================\\r\\n\\r\\n    constructor(\\r\\n        ISupportedAsset _assetManager, \\r\\n        IERC20 _baseAsset, \\r\\n        IRoleBase _roleManager, \\r\\n        ISafeFactory _safeFactory\\r\\n    ) SafeGetter(_safeFactory, _roleManager) {\\r\\n        if(_assetManager == assetManager) \\\"_assetManager is zero\\\"._throw();\\r\\n        if(_baseAsset == baseAsset) \\\"_baseAsset is zero\\\"._throw();\\r\\n        assetManager = _assetManager;\\r\\n        baseAsset = _baseAsset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate allowance given by user against actual value\\r\\n     * @param asset : ERC20 compatible contract\\r\\n     * @param owner : Owner account\\r\\n     * @param value : Value to compare allowance to\\r\\n     */\\r\\n    function _validateAllowance(\\r\\n        IERC20 asset, \\r\\n        address owner, \\r\\n        uint value\\r\\n    ) \\r\\n        onlySupportedAsset(asset)\\r\\n        internal \\r\\n        view\\r\\n        returns(uint allowance) \\r\\n    {\\r\\n        assert(address(asset) != address(0));\\r\\n        assert(owner != address(0));\\r\\n        allowance = IERC20(asset).allowance(owner, address(this));\\r\\n        if(allowance < value) 'Value exceed allowance'._throw();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate allowance given by user against actual value\\r\\n     * @param asset : ERC20 compatible contract\\r\\n     * @param owner : Owner account\\r\\n     * @param beneficiary : Recipient of the allowance\\r\\n     * @param value : Value to compare allowance to\\r\\n    */\\r\\n    function _checkAndWithdrawAllowance(IERC20 asset, address owner, address beneficiary, uint value) internal returns(uint allowance) {\\r\\n        address _owner = owner == _msgSender()? owner : _msgSender();\\r\\n        allowance = _validateAllowance(asset, _owner, value);\\r\\n        assert(address(asset) != address(0) && beneficiary != address(0));\\r\\n        if(allowance > 0){\\r\\n            if(!IERC20(asset).transferFrom(_owner, beneficiary, allowance)) 'TrxFer failed'._throw();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve an account to spend from the contract balance\\r\\n     * @param asset : ERC20 compatible contract\\r\\n     * @param spender : Recipient of the allowance\\r\\n     * @param value : Amount to approve\\r\\n    */\\r\\n    function _setApprovalFor(IERC20 asset, address spender, uint value) internal {\\r\\n        assert(spender != address(0));\\r\\n        assert(address(asset) != address(0));\\r\\n        if(!IERC20(asset).approve(spender, value)) 'Approval Failed'._throw();\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xccffd0a5167fea2f5fa38e13034a0c8590f9140910afd4ee37508365140c2d56\",\"license\":\"MIT\"},\"contracts/peripherals/Epoches.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { PastEpoches, Common, Counters } from \\\"./PastEpoches.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\nabstract contract Epoches is PastEpoches {\\r\\n    using Counters for Counters.Counter;\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Past/completed pools\\r\\n    Counters.Counter private epoches;\\r\\n\\r\\n    // Mapping of unitId to current Pool\\r\\n    mapping(uint96 => Common.Pool) private pools; \\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of unit contribution to unitId\\r\\n     * For every unit amount of contribution, there is a corresponding index for retrieving data from the storage.\\r\\n     */\\r\\n    mapping(uint256 => uint96) private indexes; \\r\\n\\r\\n    /**\\r\\n     * @dev Verify that the contribution unit is not active. \\r\\n     * @notice When unit is not active, it can be relaunched. \\r\\n     */\\r\\n    modifier _onlyIfUnitIsNotActive(uint unit){\\r\\n        if(_isUnitActive(unit)) 'Unit is active'._throw();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verify that the contribution unit is \\r\\n     */\\r\\n    modifier _onlyIfUnitIsActive(uint unit){\\r\\n        if(!_isUnitActive(unit)) 'Unit is inActive'._throw();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Ensure that unit contribution is active.\\r\\n        * Every unit contribution has a corresponding and unique id called unitId.\\r\\n        * When a unitId equals zero mean it is not active\\r\\n    */\\r\\n    function _isUnitActive(uint unit) internal view returns(bool result){\\r\\n        result = pools[_getUnitId(unit)].status == Common.Status.TAKEN;\\r\\n    }\\r\\n\\r\\n    function _getUnitId(uint unit) internal view returns(uint96 _unitId) {\\r\\n        _unitId = indexes[unit];\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Return record Id in a pool with unit contribution\\r\\n     * @param unit : Unit contribution\\r\\n    */\\r\\n    function _getRecordId(uint unit) internal view returns(uint96 _recordId) {\\r\\n        _recordId = _getPool(unit).big.recordId;\\r\\n    }\\r\\n\\r\\n    // Generate unit Id and record Id\\r\\n    function _generateIds(uint unit) internal returns(uint96 unitId, uint96 recordId) {\\r\\n        epoches.increment();\\r\\n        unitId = uint96(epoches.current());\\r\\n        indexes[unit] = unitId;\\r\\n        recordId = _generateRecordId();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetch current pool with unit contribution\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _getPool(uint unit) internal view returns(Common.Pool memory result) {\\r\\n        result = _getPoolWithUnitId(_getUnitId(unit));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetch Current pool with unitId\\r\\n     * @param unitId : Unit Id\\r\\n     */\\r\\n    function _getPoolWithUnitId(uint96 unitId) internal view returns(Common.Pool memory result){\\r\\n        result = pools[unitId];\\r\\n    }\\r\\n\\r\\n    // Return past pool counter\\r\\n    function _getEpoches() internal view returns(uint96 _epoches) {\\r\\n        _epoches = uint96(epoches.current());\\r\\n    }\\r\\n\\r\\n    /// @dev Update pool in storage \\r\\n    function _setPool(uint96 unitId, Common.Pool memory pool) internal {\\r\\n        pools[unitId] = pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Shuffle pools i.e move the current pool to history and reset it \\r\\n     * @param pool : Current pool\\r\\n     */ \\r\\n    function _shufflePool(Common.Pool memory pool) internal {\\r\\n        Common.Pool memory empty = pools[0];\\r\\n        _setPool(pool.big.unitId, empty);\\r\\n        _setRecord(pool.big.recordId, pool);\\r\\n    }\\r\\n\\r\\n    /**@dev Check if pool is filled\\r\\n        * @dev Msg.sender must not be a member of the band at epoch Id before now.\\r\\n        * @param pool: Pool struct (Location: Memory)\\r\\n        * @notice : Be sure to wrap this function in an uncheck block\\r\\n    */\\r\\n    function _isPoolFilled(Common.Pool memory pool, bool isPermissioned) \\r\\n        internal \\r\\n        pure\\r\\n        returns(bool filled) \\r\\n    {\\r\\n        unchecked {\\r\\n            filled = !isPermissioned? pool.low.userCount == pool.low.maxQuorum : pool.big.currentPool == (pool.big.unit * pool.low.maxQuorum);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**@dev Sets new last paid */\\r\\n    function _setLastPaid(address to, uint unit) internal {\\r\\n        pools[_getPool(unit).big.unitId].addrs.lastPaid = to;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xaaa36af033bbad099549da15515dc9cccd9e8d55b1a34eb491903d0ed7fae498\",\"license\":\"MIT\"},\"contracts/peripherals/FeeToAndRate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\nimport { Utils } from \\\"../libraries/Utils.sol\\\";\\r\\nimport { Pool, IRoleBase, ISupportedAsset, IERC20, IPoint, ISafeFactory } from \\\"./Pool.sol\\\";\\r\\n\\r\\n/** \\r\\n * \\r\\n * @title FeeToAndRate\\r\\n * @author : Simplifi. Written by Isaac Jesse a.k.a Bobeu https://github.com/bobeu\\r\\n * @notice : Non-deployable contract for updating and retrieving the fee receiver account and the platform rate.\\r\\n * It should be implemented by the child contract.\\r\\n */\\r\\nabstract contract FeeToAndRate is Pool {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Fee recipient\\r\\n    address public feeTo;\\r\\n\\r\\n    // Platform fee (in %)\\r\\n    uint public makerRate;\\r\\n\\r\\n    /**\\r\\n     * =================== Constructor ===============\\r\\n     * @param _roleManager : Role manager contract\\r\\n     * @param _feeTo : Fee recipient\\r\\n     * @param _makerRate : Platform fee\\r\\n     * \\r\\n     */\\r\\n    constructor(\\r\\n        address _feeTo, \\r\\n        uint16 _makerRate,\\r\\n        IRoleBase _roleManager, \\r\\n        ISupportedAsset _assetManager, \\r\\n        IERC20 _baseAsset,\\r\\n        IPoint _pointFactory,\\r\\n        ISafeFactory _safeFactory\\r\\n    ) Pool(_assetManager, _roleManager, _baseAsset, _pointFactory, _safeFactory) {\\r\\n        if(_feeTo == feeTo) '_feeTo is empty'._throw();\\r\\n        if(_makerRate > Utils._getBase()) 'Invalid maker rate'._throw();\\r\\n        feeTo = _feeTo;\\r\\n        makerRate = _makerRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set fee or maker rate. The status of the value parsed determines which to update.\\r\\n     * @param _feeTo : Fee receiving account. \\r\\n     * @param _makerRate : Platform fee (in %)\\r\\n     * @notice : For detailed doc on setting maker rate, see Utils.sol._getPercentage()\\r\\n     */\\r\\n    function setFeeOrMakerRate(\\r\\n        address _feeTo,\\r\\n        uint16 _makerRate\\r\\n    ) public onlyRoleBearer returns(bool) {\\r\\n        if(_feeTo != feeTo && _feeTo != address(0)) feeTo = _feeTo;\\r\\n        if(_makerRate > 0 && _makerRate < Utils._getBase()) makerRate = _makerRate;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x0394c3a2f1dabcb5d4b2c6c3287c1de64c4c63fd73a3f4b2914ca1b6b77194df\",\"license\":\"MIT\"},\"contracts/peripherals/OnlyRoleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IRoleBase } from \\\"../interfaces/IRoleBase.sol\\\";\\r\\nimport { ErrorLib } from \\\"../libraries/ErrorLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author Simplifi (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view virtual returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract OnlyRoleBase is MsgSender {\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Role manager address\\r\\n    IRoleBase public roleManager;\\r\\n\\r\\n    // ============= constructor ============\\r\\n    constructor(IRoleBase _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     */\\r\\n    modifier onlyRoleBearer {\\r\\n        _onlyRoleBearer();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Allow only account with role access\\r\\n    function _onlyRoleBearer() internal view {\\r\\n        IRoleBase mgr = roleManager;\\r\\n        if(address(mgr) == address(0)) 'Manager is zero'._throw();\\r\\n        if(!_hasRole(_msgSender())) 'Access denied'._throw();\\r\\n    }\\r\\n\\r\\n    function _hasRole(address target) internal view returns(bool result) {\\r\\n        result = IRoleBase(roleManager).hasRole(target);\\r\\n    }  \\r\\n\\r\\n    /// @dev Set role manager\\r\\n    function _setRoleManager(IRoleBase newManager) private{\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set Role manager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleBearer\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(IRoleBase(newManager));\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd10e299b8bf634ae026b74cefab6933d135d5cc8265acde354aafccbbed4ad23\",\"license\":\"MIT\"},\"contracts/peripherals/PastEpoches.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../interfaces/Common.sol\\\";\\r\\nimport { Counters } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\\\";\\r\\n\\r\\nabstract contract PastEpoches {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // Past/completed pools\\r\\n    Counters.Counter private pastEpoches;\\r\\n\\r\\n    // Mapping of recordIds to past pools\\r\\n    mapping(uint96 => Common.Pool) private records; \\r\\n\\r\\n    // Return past pool counter\\r\\n    function _getPastEpoches() internal view returns(uint96 recordId) {\\r\\n        recordId = uint96(pastEpoches.current()); \\r\\n    }\\r\\n\\r\\n    // Generate and return recordId\\r\\n    function _generateRecordId() internal returns(uint96 recordId) {\\r\\n        recordId = _getPastEpoches();\\r\\n        pastEpoches.increment();\\r\\n    }\\r\\n\\r\\n    /// @dev Add a completed pool to history \\r\\n    function _setRecord(uint96 recordId, Common.Pool memory pool) internal {\\r\\n        records[recordId] = pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return past pool at recordId \\r\\n     * @param recordId : Record Id\\r\\n     */\\r\\n    function _getPastPool(uint96 recordId) internal view returns(Common.Pool memory result) {\\r\\n        result = records[recordId];\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x1452424c8fbc1bb248b8c364039f04937d8e498f06619c64315395de20506012\",\"license\":\"MIT\"},\"contracts/peripherals/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { OnlyRoleBase, IRoleBase } from \\\"./OnlyRoleBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n * \\r\\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\\r\\n * Thanks to the OZ team.\\r\\n */\\r\\nabstract contract Pausable is OnlyRoleBase {\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is paused.\\r\\n     */\\r\\n    error EnforcedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is not paused.\\r\\n     */\\r\\n    error ExpectedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor(\\r\\n        IRoleBase _roleManager\\r\\n    ) OnlyRoleBase(_roleManager) {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view {\\r\\n        if (paused()) {\\r\\n            revert EnforcedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        if (!paused()) {\\r\\n            revert ExpectedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * Only owner role can call.\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function pause() \\r\\n        public \\r\\n        onlyRoleBearer\\r\\n        whenNotPaused \\r\\n    {\\r\\n        _paused = true; \\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Only owner role can call.\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function unpause() \\r\\n        public \\r\\n        onlyRoleBearer \\r\\n        whenPaused \\r\\n    {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd48388157497f29b61ee0598bbb5d490528089a1e4b4e6c6ed7a8dd2adee0c9c\",\"license\":\"MIT\"},\"contracts/peripherals/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\nimport { \\r\\n    Contributor, \\r\\n    Common, \\r\\n    ErrorLib, \\r\\n    Utils, \\r\\n    IRoleBase, \\r\\n    IERC20, \\r\\n    IPoint, \\r\\n    ISupportedAsset,\\r\\n    ISafeFactory\\r\\n} from \\\"./Contributor.sol\\\";\\r\\nimport { ISafe } from \\\"../interfaces/ISafe.sol\\\";\\r\\n\\r\\nabstract contract Pool is Contributor {\\r\\n    using Utils for *;\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // ================ Constructor ==============\\r\\n    constructor(\\r\\n        ISupportedAsset _assetManager, \\r\\n        IRoleBase _roleManager,\\r\\n        IERC20 _baseAsset,\\r\\n        IPoint _pointFactory,\\r\\n        ISafeFactory _safeFactory\\r\\n    ) \\r\\n        Contributor(_assetManager, _roleManager, _baseAsset, _pointFactory, _safeFactory)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @dev Create a pool internally\\r\\n     * @param users : Participants\\r\\n     * @param unit : Unit contribution\\r\\n     * @param maxQuorum : Maximum number of contributors that can participate\\r\\n     * @param durationInHours : Maximum duration in hours each borrower can retain the loan\\r\\n     * @param colCoverage : Ration of collateral coverage or index required as cover for loan\\r\\n     * @param router : Router : PERMISSIOLESS or PERMISSIONED\\r\\n     */\\r\\n    function _createPool(\\r\\n        address[] memory users,\\r\\n        address sender,\\r\\n        uint unit,\\r\\n        uint8 maxQuorum,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage,\\r\\n        Common.Router router,\\r\\n        IERC20 colAsset\\r\\n    ) internal _onlyIfUnitIsNotActive(unit) onlySupportedAsset(colAsset) returns(Common.Pool memory pool) {\\r\\n        if(durationInHours == 0 || durationInHours > 720) 'Invalid duration'._throw();\\r\\n        if(router == Common.Router.PERMISSIONLESS){\\r\\n            if(users.length > 1 || users.length == 0) 'Expect 1 item in list'._throw();\\r\\n            assert(users[0] == sender);\\r\\n        } else {\\r\\n            if(users.length < 2) 'List too low for router2'._throw();\\r\\n            if(sender != users[0]) 'Sender not in list'._throw();\\r\\n        }\\r\\n        (uint96 unitId, uint96 recordId) = _generateIds(unit);\\r\\n        pool = _updatePool(Common.UpdatePoolData(unit, unitId, recordId, maxQuorum, colCoverage, colAsset, durationInHours, users[0], router));  \\r\\n        pool = _addUserToPool(unit, users, pool);\\r\\n        _setPool(unitId,  pool);\\r\\n        _completeAddUser(users[0], pool);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add users to newly created pool\\r\\n     * @param unit : Unit contribution\\r\\n     * @param users : List of contributors to add\\r\\n     * @param pool : Pool data. Must be an existing data relating to the unit contribution\\r\\n     */\\r\\n    function _addUserToPool(\\r\\n        uint256 unit, \\r\\n        address[] memory users,\\r\\n        Common.Pool memory pool\\r\\n    ) internal returns(Common.Pool memory _pool) {\\r\\n        for(uint i = 0; i < users.length; i++) {\\r\\n            Common.ContributorReturnValue memory data;\\r\\n            if(i == 0) data = _initializeContributor(pool, unit, users[i], true, true, true);\\r\\n            else {\\r\\n                if(users[0] == users[i]) 'Creator spotted twice'._throw();\\r\\n                data = _initializeContributor(pool, unit, users[i], false, true, false);\\r\\n            }\\r\\n            _setContributor(data.profile, pool.big.recordId, uint8(data.slot.value), false);\\r\\n        }\\r\\n        _pool = pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Add user to existing pool\\r\\n        * @param unit : Unit contribution\\r\\n        * @param user : Contributors to add\\r\\n        * @param pool : Pool data. Must be an existing data relating to the unit contribution\\r\\n    */\\r\\n    function _joinAPool(\\r\\n        uint256 unit, \\r\\n        address user,\\r\\n        Common.Pool memory pool\\r\\n    ) internal _onlyIfUnitIsActive(unit) returns(Common.Pool memory _pool) {\\r\\n        if(pool.stage != Common.Stage.JOIN) 'Invalid stage'._throw();\\r\\n        Common.ContributorReturnValue memory data;\\r\\n        unchecked {\\r\\n            pool.big.currentPool += pool.big.unit;\\r\\n            pool.low.userCount += 1;\\r\\n        }\\r\\n        if(pool.router == Common.Router.PERMISSIONED) {\\r\\n            _onlyContributor(user, unit, false);\\r\\n            data = _getContributor(user, unit);\\r\\n            data.profile.sentQuota = true;\\r\\n        } else {\\r\\n            _onlyNonContributor(user, unit);\\r\\n            data = _initializeContributor(pool, unit, user, false, true, true);\\r\\n        }\\r\\n        _setContributor(data.profile, pool.big.recordId, uint8(data.slot.value), false);\\r\\n        if(_isPoolFilled(pool, pool.router == Common.Router.PERMISSIONED)) {\\r\\n            _setTurnStartTime(address(0), unit, _now());\\r\\n            pool.stage = Common.Stage.GET;\\r\\n        }\\r\\n        _pool = pool;\\r\\n        _completeAddUser(user, pool);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n        * @dev Complete the add task.\\r\\n        * @param user : Contributors to add\\r\\n        * @param pool : Pool data. Must be an existing data relating to the unit contribution\\r\\n    */\\r\\n    function _completeAddUser(address user, Common.Pool memory pool) internal {\\r\\n        _checkAndWithdrawAllowance(IERC20(baseAsset), user, pool.addrs.safe, pool.big.unit);\\r\\n        if(!ISafe(pool.addrs.safe).addUp(user, pool.big.recordId)) 'Add user failed'._throw();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update pool with relevant data\\r\\n     * @param data : Function argument of type Common.UpdatePoolData\\r\\n     */\\r\\n    function _updatePool(Common.UpdatePoolData memory data) internal returns(Common.Pool memory pool) {\\r\\n        unchecked {\\r\\n            pool.low = Common.Low(data.maxQuorum, 0, data.colCoverage, uint32(uint(data.durationInHours) * 1 hours), 0, 1);\\r\\n        }\\r\\n        pool.big = Common.Big(data.unit, data.unit, data.recordId, data.unitId);\\r\\n        pool.addrs = Common.Addresses(data.colAsset, address(0), _getSafe(data.unit), data.creator);\\r\\n        pool.router = data.router;\\r\\n        pool.status = Common.Status.TAKEN;\\r\\n        pool.stage = Common.Stage.JOIN;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount of collateral required in a pool.\\r\\n     * @param unit : EpochId\\r\\n     */\\r\\n    function getCollateralQuote(uint256 unit) public view returns(uint, uint128, bool)\\r\\n    {\\r\\n        // _onlyContributor(_msgSender(), unit, false);\\r\\n        return _getCollateralQuote(unit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update token price if price is zero or not inTime\\r\\n     * @param asset : Asset for which to update price\\r\\n     */\\r\\n    function updateTokenPrice(address asset) public {\\r\\n        (uint128 price, bool updatedLessThanSixtySecsAgo,) = _getCollateralTokenPrice(asset);\\r\\n        if(!updatedLessThanSixtySecsAgo || price == 0) _updateTokenPrice(asset);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt of target user.\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function getCurrentDebt(uint256 unit) public view returns(uint256 debt) \\r\\n    {\\r\\n       (debt,) = _getCurrentDebt(unit);\\r\\n       return debt;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe4d74f04ef75383daee9f1f2ee3ad74624e2f88e7c7fa256cdb004f2b985337c\",\"license\":\"MIT\"},\"contracts/peripherals/SafeGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../interfaces/Common.sol\\\";\\r\\nimport { ISafeFactory } from \\\"../interfaces/ISafeFactory.sol\\\";\\r\\nimport { Pausable, IRoleBase } from \\\"./Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title : Safe storage contract\\r\\n * @author : Written by Isaac Jesse, a.k.a Bobeu https://github.com/bobeu\\r\\n * @notice : SafeGetter is abstract contract derived by the FlexpoolFactory contract for managing contributors funds.\\r\\n *          We employed this strategy to achieve high security and users confidence while interacting with the protocol.\\r\\n *          The strategy utilizes the SafeGlobal protocol on the frontend to deploy a new Safe account for every unique \\r\\n *          contribution unit.\\r\\n */\\r\\nabstract contract SafeGetter is Pausable {\\r\\n\\r\\n    // Safe factory contract\\r\\n    ISafeFactory public immutable safeFactory;\\r\\n\\r\\n    // Mapping of unit contribution to Safe struct\\r\\n    mapping (uint256 => address) private safes;\\r\\n\\r\\n    constructor(ISafeFactory _safeFactory, IRoleBase _roleManager) Pausable(_roleManager) {\\r\\n        safeFactory = _safeFactory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Checks, validate and return safe for the target address.\\r\\n        * @param unit : Unit contribution.\\r\\n    */\\r\\n    function _getSafe(uint256 unit) internal returns(address safe) {\\r\\n        safe = ISafeFactory(safeFactory).pingSafe(unit);\\r\\n        assert(safe != address(0));\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6caaf472ddcacb1bdc3fedc7944b1d22a0d2fc24bfeac7ad7c44bc193c8573ab\",\"license\":\"MIT\"},\"contracts/peripherals/Slots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../interfaces/Common.sol\\\";\\r\\n\\r\\nabstract contract Slots {\\r\\n    // Every contributor owns a slot in each unit contribution\\r\\n    mapping(address contributor => mapping(uint256 unitContribution => Common.Slot)) slots;\\r\\n\\r\\n    /**\\r\\n        * @dev Create a new slot for target account\\r\\n        * @param target : Target account\\r\\n        * @param unit : Unit contribution\\r\\n        * @param position : User's position in the list of contributors\\r\\n        * @param isAdmin : Whether target is an admin or not\\r\\n        * @param isMember : Whether target is a member or not\\r\\n     */\\r\\n    function _createSlot(\\r\\n        address target, \\r\\n        uint unit,\\r\\n        uint8 position,\\r\\n        bool isAdmin,\\r\\n        bool isMember\\r\\n    ) internal {\\r\\n        _setSlot(\\r\\n            target,\\r\\n            unit, \\r\\n            Common.Slot(position, isMember, isAdmin),\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set a new slot for the target\\r\\n     * @param target : Target account\\r\\n     * @param unit : unit contribution\\r\\n     * @param slot : Slot\\r\\n     */\\r\\n    function _setSlot( address target, uint unit, Common.Slot memory slot, bool setEmpty) internal {\\r\\n        Common.Slot memory empty;\\r\\n        slots[target][unit] = setEmpty? empty : slot;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Returns the slot for target account\\r\\n        * @param target : Target account\\r\\n        * @param unit : Unit contribution\\r\\n    */\\r\\n    function _getSlot(\\r\\n        address target, \\r\\n        uint unit\\r\\n    ) internal view returns(Common.Slot memory slot) {\\r\\n        slot = slots[target][unit];\\r\\n    }\\r\\n\\r\\n    // For detailed doc, see _getSlot\\r\\n    function getSlot(address target, uint unit) \\r\\n        external \\r\\n        view \\r\\n        // onlyInitialized(unit, false)\\r\\n        returns(Common.Slot memory) \\r\\n    {\\r\\n        return _getSlot(target, unit);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3a7f72d4835140230ee728a9916b62c9c6e2f94be9d2b49197a10bef4423ef44\",\"license\":\"MIT\"},\"contracts/standalone/FlexpoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { FeeToAndRate, IRoleBase, ErrorLib, Utils, ISupportedAsset, ISafeFactory } from \\\"../peripherals/FeeToAndRate.sol\\\";\\r\\nimport { IFactory, Common } from '../interfaces/IFactory.sol';\\r\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport { IPoint } from \\\"../interfaces/IPoint.sol\\\";\\r\\nimport { ISafe } from \\\"../interfaces/ISafe.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/**\\r\\n    * @title FlexpoolFactory\\r\\n    * @author Simplifi (Bobeu)\\r\\n    * @notice FlexpoolFactory enables peer-funding magic. Participants of each pool are referred to \\r\\n    * contributors. There is no limit to the amount that can be contributed except for zer0 value. Users can single-handedly run\\r\\n    * a pool (where anyone is free to participate) or collectively with friends and family or peer operate a permissioned pool \\r\\n    * where participation is restricted to the preset members only.\\r\\n    * Users can use providers strategy to finance their quota if they can't afford the unit contribution. They can select multiple\\r\\n    * providers if the provider balance cannot the amount they wish to borrow. If this is the case, the selected providers are \\r\\n    * entitled to earn interest on the amount they provide.\\r\\n    * When paying back, the contributor will repay the full loan with interest but halved for other contributors.  \\r\\n*/\\r\\ncontract FlexpoolFactory is IFactory, FeeToAndRate {\\r\\n    using Utils for *;\\r\\n    using ErrorLib for *;\\r\\n\\r\\n    // Analytics\\r\\n    Common.Analytics public analytics;\\r\\n\\r\\n    /** \\r\\n     * ================ Constructor ==============\\r\\n     * @param _roleManager : Role manager contract\\r\\n     * @param _pointFactory : Point Factory contract\\r\\n     * @param _assetManager : Asset manager contract\\r\\n     * @param _baseAsset : ERC20 compatible asset to use as base contribution\\r\\n     * @param _feeTo: Fee receiver\\r\\n     * @param _pointFactory : Platform fee\\r\\n    */\\r\\n    constructor(\\r\\n        address _feeTo, \\r\\n        uint16 _makerRate,\\r\\n        IRoleBase _roleManager, \\r\\n        ISupportedAsset _assetManager, \\r\\n        IERC20 _baseAsset,\\r\\n        IPoint _pointFactory,\\r\\n        ISafeFactory _safeFactory\\r\\n    ) \\r\\n        FeeToAndRate(_feeTo, _makerRate, _roleManager, _assetManager, _baseAsset, _pointFactory, _safeFactory)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n        * @dev Create a pool internally\\r\\n        * @param users : List of participating accounts\\r\\n        * @param unit : Unit contribution\\r\\n        * @param maxQuorum : Maximum number of contributors that can participate\\r\\n        * @param durationInHours : Maximum duration in hours each borrower can retain the loan\\r\\n        * @param colCoverage : Ration of collateral coverage or index required as cover for loan\\r\\n        * @param isPermissionless : Whether to create a permissionless or permissioned pool.\\r\\n        * @param colAsset : An ERC20-compatible asset to use as collateral currency \\r\\n        * @notice users list should be a list of participating accounts if it is permissioned including the\\r\\n        * creator being the first on the list. But the list can be empty if it is permissionless.\\r\\n    */\\r\\n    function createPool( \\r\\n        address[] calldata users,\\r\\n        uint unit,\\r\\n        uint8 maxQuorum,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage,\\r\\n        bool isPermissionless,\\r\\n        IERC20 colAsset\\r\\n    ) public whenNotPaused returns(bool) {\\r\\n        Common.Pool memory pool = _createPool(users, _msgSender(), unit, maxQuorum, durationInHours, colCoverage, isPermissionless? Common.Router.PERMISSIONLESS : Common.Router.PERMISSIONED, colAsset);\\r\\n        _awardPoint(users[0], 0, 5, false);\\r\\n        _recordAnalytics(unit, 0, Common.Stage.JOIN, isPermissionless, true);\\r\\n        emit Common.PoolCreated(pool);\\r\\n      \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev launch a default permissionless pool\\r\\n     * @param user : Target user\\r\\n     * @param unit : Unit contribution\\r\\n     * @param initialPool : An Initialized pool. Can be an empty pool\\r\\n     */\\r\\n    function _launchDefault(address user, uint unit) internal returns(Common.Pool memory initialPool) {\\r\\n        address[] memory users = new address[](1);\\r\\n        users[0] = user;\\r\\n        IERC20 defaultColAsset = IERC20(ISupportedAsset(assetManager).getDefaultSupportedCollateralAsset());\\r\\n        initialPool = _createPool(users, user, unit, 2, 72, 120, Common.Router.PERMISSIONLESS, defaultColAsset);\\r\\n        _awardPoint(users[0], 0, 5, false);\\r\\n        _recordAnalytics(unit, 0, Common.Stage.JOIN, true, true);\\r\\n        emit Common.PoolCreated(initialPool);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Contributors can join a pool through a provider is they wish to borrow to finance the unit contribution.\\r\\n     *      If the unit is not taken, we add them to the pool otherwise a new pool will be launched.\\r\\n     * @param providers : List of providers that lend to the borrower\\r\\n     * @param borrower : Account address of the borrower\\r\\n     * @param unit : Amount borrowed will automatically be the unit contribution\\r\\n     * @notice By default, maxQuorum is set to 2 using this method. Users can immediately change the quorum\\r\\n     * to desired value otherwise it will not be possible if another contributor joins to complete the quorum.\\r\\n     * - durationInHrs is set to 72 hours by default.\\r\\n     * - colCoverage is set to 120 by default.\\r\\n     * Only accounts with the roleBearer are allowed i.e Ex. Providers contract\\r\\n     * If an user is contributing via the provider, we ensure the privacy of permissioned group is preserved.\\r\\n     */\\r\\n    function contributeThroughProvider(\\r\\n        Common.Provider[] memory providers, \\r\\n        address borrower, \\r\\n        uint unit\\r\\n    ) external onlyRoleBearer whenNotPaused returns(bool)\\r\\n    {\\r\\n        Common.Pool memory pool;\\r\\n        bool isNewOrCancel = false;\\r\\n        if(!isPoolAvailable(unit)){\\r\\n            pool = _getPool(unit);\\r\\n            pool = _joinAPool(unit, borrower, pool);\\r\\n            _setPool(pool.big.unitId, pool);\\r\\n            emit Common.NewContributorAdded(pool);\\r\\n        } else {\\r\\n            isNewOrCancel = true;\\r\\n            pool = _launchDefault(borrower, unit);\\r\\n        }\\r\\n        _setProviders(providers, borrower, pool.big.recordId);\\r\\n        _recordAnalytics(unit, 0, Common.Stage.JOIN, true, isNewOrCancel);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a contributor to a poool\\r\\n     * @param : Unit contribution\\r\\n     */\\r\\n    function contribute(uint unit) public whenNotPaused returns(bool) {\\r\\n        Common.Pool memory pool = _getPool(unit);\\r\\n        pool = _joinAPool(unit, _msgSender(), pool);\\r\\n        _setPool(pool.big.unitId, pool);\\r\\n        _recordAnalytics(unit, 0, Common.Stage.JOIN, pool.router == Common.Router.PERMISSIONLESS, false);\\r\\n        emit Common.NewContributorAdded(pool);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Edit pool information\\r\\n     * @param unit : Unit contribution\\r\\n     * @param maxQuorum : Number of expected participants\\r\\n     * @param durationInHours : Number of time in hours each contributor can retain the loan\\r\\n     * @param colCoverage : Collateral coverage or ratio.\\r\\n     */\\r\\n    function editPool(\\r\\n        uint256 unit,\\r\\n        uint8 maxQuorum,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage\\r\\n    ) \\r\\n        public \\r\\n        _onlyIfUnitIsActive(unit)\\r\\n        whenNotPaused\\r\\n        returns(bool) \\r\\n    {\\r\\n        Common.Pool memory pool = _getPool(unit);\\r\\n        uint32 duration;\\r\\n        if(_msgSender() != pool.addrs.admin) 'Not Allowed'._throw();\\r\\n        unchecked {\\r\\n            duration = durationInHours * 1 hours;\\r\\n        }\\r\\n        if(pool.router == Common.Router.PERMISSIONLESS) {\\r\\n            if(maxQuorum != pool.low.maxQuorum && maxQuorum > 2 && maxQuorum < type(uint8).max) pool.low.maxQuorum = maxQuorum;\\r\\n        }\\r\\n        if(durationInHours <= 720 && duration != pool.low.duration) pool.low.duration = duration;\\r\\n        if(colCoverage != pool.low.colCoverage) pool.low.colCoverage = colCoverage;\\r\\n        _setPool(pool.big.unitId, pool);\\r\\n\\r\\n        emit Common.PoolEdited(pool);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get finance\\r\\n     * @param unit : Unit contribution\\r\\n     * @return bool : Success or Failure\\r\\n     * @notice : To get finance, the unit contribution must be active. In the event the expected contributor failed to \\r\\n     * call, we swap their profile for the current msg.sender provided the grace period of 1hr has passed.\\r\\n    */\\r\\n    function getFinance(uint256 unit) public _onlyIfUnitIsActive(unit) whenNotPaused returns(bool) {\\r\\n        _onlyContributor(_msgSender(), unit, false);\\r\\n        Common.Pool memory pool = _getPool(unit);\\r\\n        (uint collateral,,bool inTime) = _getCollateralQuote(unit);\\r\\n        if(!inTime){ \\r\\n            _updateTokenPrice(address(pool.addrs.colAsset));\\r\\n            (collateral,,inTime) = _getCollateralQuote(unit);\\r\\n        }\\r\\n        Common.Contributor memory profile = _getExpected(unit, pool.low.selector);\\r\\n        if(pool.stage != Common.Stage.GET) 'Borrow not ready'._throw();\\r\\n        if(pool.low.allGh == pool.low.maxQuorum) 'Epoch ended'._throw();\\r\\n        unchecked {\\r\\n            if(pool.big.currentPool < (pool.big.unit * pool.low.maxQuorum)) 'Pool fund incomplete'._throw();\\r\\n            if(_now() > profile.turnStartTime + 1 hours){\\r\\n                if(_msgSender() != profile.id) {\\r\\n                    profile = _swapContributors(unit, _msgSender(), _getSlot(_msgSender(), unit), profile);\\r\\n                }\\r\\n            } else {\\r\\n                if(_msgSender() != profile.id) 'TurnTime has not pass'._throw();\\r\\n            }\\r\\n            pool.low.allGh += 1;\\r\\n        }\\r\\n        pool.addrs.lastPaid = profile.id;\\r\\n        _recordAnalytics(pool.big.currentPool, collateral, Common.Stage.GET, pool.router == Common.Router.PERMISSIONLESS, false);\\r\\n        _checkAndWithdrawAllowance(IERC20(pool.addrs.colAsset), profile.id, pool.addrs.safe, collateral);\\r\\n        if(!ISafe(pool.addrs.safe).getFinance(profile.id, baseAsset, pool.big.currentPool, pool.big.currentPool.computeFee(uint16(makerRate)), collateral, pool.big.recordId)) 'Safe call failed'._throw();\\r\\n        (pool, profile) = _completeGetFinance(pool, collateral, profile);\\r\\n        _setContributor(profile, pool.big.recordId, uint8(_getSlot(pool.addrs.lastPaid, pool.big.unit).value), false);\\r\\n        _setPool(pool.big.unitId, pool);\\r\\n\\r\\n        emit Common.GetFinanced(pool);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Payback. For detailed documentation, see _payback\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function payback(uint unit) public whenNotPaused returns(bool) {\\r\\n        (Common.Pool memory pool, uint debt, uint collateral) = _payback(unit, _msgSender(), false, address(0));\\r\\n        _recordAnalytics(debt, collateral, Common.Stage.PAYBACK, pool.router == Common.Router.PERMISSIONLESS, false);\\r\\n        emit Common.Payback(pool);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Liquidates a borrower if they have defaulted in repaying their loan.\\r\\n        - If the current beneficiary defaults, they're liquidated.\\r\\n        - Their collateral balances is forwarded to the liquidator. Liquidator also takes the full \\r\\n            responsibilities of the providers if any.\\r\\n        - Liquidator must not be a participant in pool at `unitId. We use this \\r\\n            to avoid fatal error in storage.\\r\\n        @param unit : Unit contribution.\\r\\n    */\\r\\n    function liquidate(uint256 unit) public whenNotPaused returns(bool) {\\r\\n        (Common.Contributor memory _defaulter, bool isDefaulted, Common.Slot memory slot) = _enquireLiquidation(unit);\\r\\n        if(!isDefaulted) 'Not defaulted'._throw();\\r\\n        address liquidator = _msgSender() ;\\r\\n        _onlyNonContributor(liquidator, unit);\\r\\n        _replaceContributor(liquidator, _getPool(unit).big.recordId, slot, _defaulter.id, unit);\\r\\n        assert(liquidator != _defaulter.id);\\r\\n        _setLastPaid(liquidator, unit); \\r\\n        (Common.Pool memory pool, uint debt, uint collateral) = _payback(unit, liquidator, true, _defaulter.id);\\r\\n        _recordAnalytics(debt, collateral, Common.Stage.PAYBACK, pool.router == Common.Router.PERMISSIONLESS, false);\\r\\n        emit Common.Payback(pool);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Cancels a pool. Only pool with one contributor can be close.\\r\\n        @param unit : Unit contribution.\\r\\n        @notice : Only the creator of a pool can close it provided the number of contributors does not exceed one.\\r\\n    */\\r\\n    function closePool(uint256 unit) public whenNotPaused _onlyIfUnitIsActive(unit) returns(bool){\\r\\n        Common.Pool memory pool = _getPool(unit);\\r\\n        address creator = _msgSender();\\r\\n        if(creator != pool.addrs.admin) 'Only Admin can close pool'._throw();\\r\\n        bool isPermissionLess = pool.router == Common.Router.PERMISSIONLESS;\\r\\n        if(isPermissionLess) {\\r\\n            if(pool.low.userCount > 1) 'Cancellation disabled'._throw();\\r\\n        } else {\\r\\n            if(pool.big.currentPool > pool.big.unit) 'Cancellation disabled'._throw();\\r\\n        }\\r\\n        _awardPoint(creator, 0, 5, true);\\r\\n        pool.stage = Common.Stage.CANCELED;\\r\\n        _shufflePool(pool);\\r\\n        _recordAnalytics(pool.big.unit, 0, Common.Stage.CANCELED, isPermissionLess, true);\\r\\n        if(!ISafe(pool.addrs.safe).cancel(creator, baseAsset, pool.big.unit, pool.big.recordId)) 'Safe call failed'._throw();\\r\\n\\r\\n        emit Common.Cancellation(unit);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Return providers associated with the target account\\r\\n        * @param target : Target account\\r\\n        * @param recordId : Record id\\r\\n    */\\r\\n    function getContributorProviders(address target, uint96 recordId) external view returns(Common.Provider[] memory result){\\r\\n        return  _getContributorProviders(target, recordId);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Record snapshot balances of base asset and collateral asset at any point in time\\r\\n     * @param baseValue : Value of baseAsset e.g Amount of cUSD contributed\\r\\n     * @param collateral : Collateral value going out or coming in.\\r\\n     * @param flag : For determining the type of operation to perform.\\r\\n     * @param isPermissionless : Whether the pool is permissioned or permissionless \\r\\n     */\\r\\n    function _recordAnalytics(uint baseValue, uint collateral, Common.Stage flag, bool isPermissionless, bool isNewOrCancelled) internal {\\r\\n        Analytics memory alt = analytics;\\r\\n        unchecked { \\r\\n            if(flag == Common.Stage.JOIN) {\\r\\n                alt.tvlBase += baseValue;\\r\\n                if(isNewOrCancelled) isPermissionless? alt.totalPermissionless += 1 : alt.totalPermissioned += 1;\\r\\n            } else if(flag == Common.Stage.GET) {\\r\\n                if(alt.tvlBase >= baseValue) alt.tvlBase -= baseValue;\\r\\n                alt.tvlCollateral += collateral;\\r\\n            } else if(flag == Common.Stage.PAYBACK) {\\r\\n                if(alt.tvlCollateral >= collateral) alt.tvlCollateral -= collateral;\\r\\n                alt.tvlBase += baseValue;\\r\\n            } else {\\r\\n                if(isNewOrCancelled) {\\r\\n                    if(isPermissionless) {\\r\\n                        if(alt.totalPermissionless > 0) alt.totalPermissionless -= 1;\\r\\n                    } else {\\r\\n                        if(alt.totalPermissioned > 0) alt.totalPermissioned -= 1;\\r\\n                    }\\r\\n                }\\r\\n                if(alt.tvlBase >= baseValue) alt.tvlBase -= baseValue;\\r\\n            }\\r\\n        }\\r\\n        analytics = alt;\\r\\n    }\\r\\n\\r\\n    /**@dev Return contract data */\\r\\n    function getFactoryData() public view returns(Common.ViewFactoryData memory data) {\\r\\n        data.analytics = analytics;\\r\\n        data.makerRate = uint16(makerRate);\\r\\n        data.currentEpoches = _getEpoches();\\r\\n        data.recordEpoches = _getPastEpoches();\\r\\n        return data;\\r\\n    } \\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe0e80384e838044b0e942e734d21562edadeb425cc5193bdb1589458d5da02d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200608b3803806200608b833981016040819052620000359162000326565b600680546001600160a01b0319166001600160a01b038716179055868686868686868385848484848484848483828487848183868380826006805460ff60a01b19169055506001600160a01b0390811660805260a051811690851603620000d55760408051808201909152601581527f5f61737365744d616e61676572206973207a65726f00000000000000000000006020820152620000d590620002c6565b60c0516001600160a01b0316836001600160a01b031603620001305760408051808201909152601281527f5f626173654173736574206973207a65726f000000000000000000000000000060208201526200013090620002c6565b50506001600160a01b0391821660a052811660c05284166200018b5760408051808201909152601581527f49506f696e74466163746f7279206973207a65726f000000000000000000000060208201526200018b90620002c6565b6001600860006101000a81548160ff021916908315150217905550836001600160a01b031660e0816001600160a01b031681525050505050505050505050505050505050600b60009054906101000a90046001600160a01b03166001600160a01b0316876001600160a01b0316036200023d5760408051808201909152600f81527f5f666565546f20697320656d707479000000000000000000000000000000000060208201526200023d90620002c6565b61271061ffff871611156200028b5760408051808201909152601281527f496e76616c6964206d616b65722072617465000000000000000000000000000060208201526200028b90620002c6565b5050600b80546001600160a01b0319166001600160a01b039690961695909517909455505061ffff16600c5550620004289650505050505050565b8051156200030d57806040517fcc861063000000000000000000000000000000000000000000000000000000008152600401620003049190620003d7565b60405180910390fd5b50565b6001600160a01b03811681146200030d57600080fd5b600080600080600080600060e0888a0312156200034257600080fd5b87516200034f8162000310565b602089015190975061ffff811681146200036857600080fd5b60408901519096506200037b8162000310565b60608901519095506200038e8162000310565b6080890151909450620003a18162000310565b60a0890151909350620003b48162000310565b60c0890151909250620003c78162000310565b8091505092959891949750929550565b60006020808352835180602085015260005b818110156200040757858101830151858201604001528201620003e9565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c05160e051615bb9620004d2600039600081816104df0152818161237d01526124260152600081816105190152818161093e0152818161113001528181612ddf01528181612e5101528181612eb5015281816138370152818161434b0152614708015260008181610407015281816119bf01528181611a5801528181611fa40152818161388d015261475e01526000818161025d0152614d200152615bb96000f3fe608060405234801561001057600080fd5b50600436106102105760003560e01c80636d0406fd11610125578063c61778e9116100ad578063e95b110d1161007c578063e95b110d1461055b578063e962916814610563578063ed4c6cd814610576578063f1d588c514610596578063f8e497dc146105a957600080fd5b8063c61778e9146104da578063c93c74e314610501578063cdf456e114610514578063d9cc5ed01461053b57600080fd5b806394217ad1116100f457806394217ad1146104025780639d672294146104295780639e6fbfd314610461578063a846c2fd146104b4578063c1cbbca7146104c757600080fd5b80636d0406fd146103a457806380d5ac8a146103b75780638456cb59146103ed5780638b3c53cb146103f557600080fd5b806337de615f116101a8578063435daefc11610177578063435daefc14610350578063553c305a1461035957806358f0bd6d1461036c57806359d2f32b1461037f5780635c975abb1461039257600080fd5b806337de615f146103025780633f4ba83a146103155780633fd979271461031d578063415f12401461033d57600080fd5b80631a055c1a116101e45780631a055c1a146102a057806321746615146102c257806321c05300146102d75780632ef3946f146102ef57600080fd5b8062435da514610215578063017e7e5814610245578063131e7e1c1461025857806313c8e60d1461027f575b600080fd5b600654610228906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600b54610228906001600160a01b031681565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b61029261028d36600461504d565b6105c9565b60405190815260200161023c565b6102b36102ae36600461504d565b6105db565b60405161023c939291906150c0565b6102d56102d0366004615120565b610615565b005b6102df61064d565b604051901515815260200161023c565b6102df6102fd3660046151d0565b6106a0565b6102df61031036600461504d565b61076f565b6102d5610a3e565b61033061032b36600461530d565b610a9b565b60405161023c9190615418565b6102df61034b36600461504d565b610ab6565b610292600c5481565b6102df61036736600461504d565b610bef565b6102df61037a36600461546a565b610c17565b6102df61038d3660046154b9565b610dd5565b600654600160a01b900460ff166102df565b6102df6103b236600461504d565b610e56565b600d54600e54600f546010546103cd9392919084565b60408051948552602085019390935291830152606082015260800161023c565b6102d56112c7565b6008546102df9060ff1681565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b61043c61043736600461504d565b611312565b604080519384526001600160801b03909216602084015215159082015260600161023c565b610469611320565b604080518251805182526020808201518184015281840151838501526060918201518284015284015161ffff1660808301529183015160a082015291015160c082015260e00161023c565b6102df6104c236600461504d565b61138c565b6102df6104d536600461504d565b6113fe565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b6102df61050f366004615507565b611493565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b61054e6105493660046155ec565b611586565b60405161023c919061575e565b6102df61159f565b61054e6105713660046155ec565b6115ef565b6105896105843660046157dc565b611603565b60405161023c9190615808565b6102df6105a4366004615120565b61162a565b6105bc6105b736600461582d565b611657565b60405161023c9190615859565b60006105d482611663565b5092915050565b6105e3614dad565b60408051606081018252600080825260208201819052918101829052610608846118d1565b9250925092509193909250565b60008061062183611999565b509150915080158061063a57506001600160801b038216155b156106485761064883611a39565b505050565b6000610657611ab7565b60085460ff161561068c5761068c6040518060400160405280600981526020016849732061637469766560b81b815250611b36565b506008805460ff1916600190811790915590565b60006106aa611ab7565b6106b2611b61565b6106ba614de9565b60006106c584610bef565b61072f576106d284611b8e565b91506106df848684611bb7565b91506106f382602001516060015183611d44565b7f03d06435b835aed8e31056998d82805968e80861808275303d222099b83e61e08260405161072291906158a2565b60405180910390a161073f565b50600161073c8585611f42565b91505b61075286868460200151604001516120b3565b6107618460008060018561218d565b6001925050505b9392505050565b6000610779611b61565b81610783816122f7565b6107b8576107b86040518060400160405280601081526020016f556e697420697320696e41637469766560801b815250611b36565b60006107c384611b8e565b60408101516060015190915033906001600160a01b0316811461081e5761081e6040518060400160405280601981526020017f4f6e6c792041646d696e2063616e20636c6f736520706f6f6c00000000000000815250611b36565b600060018360600151600281111561083857610838615607565b1490508015610890576001836000015160a0015160ff16111561088b5761088b6040518060400160405280601581526020017410d85b98d95b1b185d1a5bdb88191a5cd8589b1959605a1b815250611b36565b6108d7565b602080840151805191015111156108d7576108d76040518060400160405280601581526020017410d85b98d95b1b185d1a5bdb88191a5cd8589b1959605a1b815250611b36565b6108e68260006005600161233f565b600360808401526108f6836124c8565b60208301515161090c906000600384600161218d565b6040838101518101516020850151805190830151925163bb16369f60e01b81526001600160a01b0386811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201929092526001600160601b039093166064840152169063bb16369f906084016020604051808303816000875af11580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca91906158b1565b6109ff576109ff6040518060400160405280601081526020016f14d859994818d85b1b0819985a5b195960821b815250611b36565b6040518681527f79d50744e568d2dcbac1c613dc0f174be90b0121dbc73682de80b3c4ebc5d1e79060200160405180910390a150600195945050505050565b610a46611ab7565b610a4e6127a1565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b610aa3614e90565b610aad82846127cb565b90505b92915050565b6000610ac0611b61565b6000806000610ace856118d1565b92509250925081610b0757610b076040518060400160405280600d81526020016c139bdd08191959985d5b1d1959609a1b815250611b36565b33610b1281876128b7565b610b3381610b1f88611b8e565b6020015160400151848760a001518a6128fd565b8360a001516001600160a01b0316816001600160a01b031603610b5857610b586158ce565b610b628187612ad6565b6000806000610b78898560018a60a00151612b2a565b91945092509050610ba78282600260015b87606001516002811115610b9f57610b9f615607565b14600061218d565b7f2f5bbba2897c0da2732c0b1eec00e0d12fe536c653a8575198092bed62561a7c83604051610bd691906158a2565b60405180910390a160019750505050505050505b919050565b600080610bfb83611b8e565b60a001516001811115610c1057610c10615607565b1492915050565b600084610c23816122f7565b610c5857610c586040518060400160405280601081526020016f556e697420697320696e41637469766560801b815250611b36565b610c60611b61565b6000610c6b87611b8e565b905060008160400151606001516001600160a01b0316610c883390565b6001600160a01b031614610cc257610cc26040518060400160405280600b81526020016a139bdd08105b1b1bddd95960aa1b815250611b36565b5061ffff610e10860216600182606001516002811115610ce457610ce4615607565b03610d205781515160ff888116911614801590610d04575060028760ff16115b8015610d12575060ff878116105b15610d2057815160ff881690525b6102d08661ffff1611158015610d44575081516060015163ffffffff828116911614155b15610d5957815163ffffffff82166060909101525b81516040015162ffffff868116911614610d7c57815162ffffff86166040909101525b610d8e82602001516060015183611d44565b7f136b0bab8d4b28df6bdf26f270fde904c2c696b6bf243dde423642fff1df24b382604051610dbd91906158a2565b60405180910390a16001935050505b50949350505050565b6000610ddf611ab7565b600b546001600160a01b03848116911614801590610e0557506001600160a01b03831615155b15610e2657600b80546001600160a01b0319166001600160a01b0385161790555b60008261ffff16118015610e3f575061271061ffff8316105b15610e4d5761ffff8216600c555b50600192915050565b600081610e62816122f7565b610e9757610e976040518060400160405280601081526020016f556e697420697320696e41637469766560801b815250611b36565b610e9f611b61565b610eab338460006130ac565b6000610eb684611b8e565b9050600080610ec4866130f0565b925050915080610eee57604083015151610edd90611a39565b610ee6866130f0565b919350909150505b6000610f0287856000015160200151613172565b9050600184608001516004811115610f1c57610f1c615607565b14610f5257610f526040518060400160405280601081526020016f426f72726f77206e6f7420726561647960801b815250611b36565b8351805160809091015160ff918216911603610f9457610f946040518060400160405280600b81526020016a115c1bd8da08195b99195960aa1b815250611b36565b835151602080860151805191015160ff909216021115610fe357610fe360405180604001604052806014815260200173506f6f6c2066756e6420696e636f6d706c65746560601b815250611b36565b8060200151610e100163ffffffff16610ff94290565b63ffffffff16111561103f5760a08101516001600160a01b0316336001600160a01b03161461103a576110378733611031338b613244565b846132b2565b90505b611092565b60a08101516001600160a01b0316336001600160a01b03161461109257611092604051806040016040528060158152602001745475726e54696d6520686173206e6f74207061737360581b815250611b36565b8351608001805160ff60019182011690915260a082015160408601516001600160a01b039091166020918201528086015101516110e29185908088606001516002811115610b9f57610b9f615607565b6111028460400151600001518260a001518660400151604001518661334d565b50604080850151015160a08201516020808701510151600c546001600160a01b039093169263d4e8694492917f00000000000000000000000000000000000000000000000000000000000000009161115b908290613456565b60208a015160409081015190516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015260448401919091526064830152608482018790526001600160601b031660a482015260c4016020604051808303816000875af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa91906158b1565b61122f5761122f6040518060400160405280601081526020016f14d859994818d85b1b0819985a5b195960821b815250611b36565b61123a848483613462565b809250819550505061127181856020015160400151611269876040015160200151886020015160000151613244565b5160006136e6565b61128384602001516060015185611d44565b7fe34571ffc6f937a259747d53f9fab8d617fd8a80c8cc077638061beead4d3ff8846040516112b291906158a2565b60405180910390a15060019695505050505050565b6112cf611ab7565b6112d7611b61565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a7e3390565b6000806000610608846130f0565b611328614ed1565b60408051608081018252600d548152600e54602080830191909152600f549282019290925260105460608201528252600c5461ffff169082015261136a6137de565b6001600160601b031660408201526000546001600160601b0316606082015290565b6000611396611b61565b600080806113a78533600080612b2a565b919450925090506113bc828260026001610b89565b7f2f5bbba2897c0da2732c0b1eec00e0d12fe536c653a8575198092bed62561a7c836040516113eb91906158a2565b60405180910390a1506001949350505050565b6000611408611b61565b600061141383611b8e565b9050611420833383611bb7565b905061143481602001516060015182611d44565b61145383600080600185606001516002811115610b9f57610b9f615607565b7f03d06435b835aed8e31056998d82805968e80861808275303d222099b83e61e08160405161148291906158a2565b60405180910390a150600192915050565b600061149d611b61565b60006114f88a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506114df925061233b915050565b8a8a8a8a8a6114ef5760026114f2565b60015b8a6137ee565b90506115308a8a6000818110611510576115106158e4565b90506020020160208101906115259190615120565b60006005600061233f565b61153f8860008087600161218d565b7fb161ed253087c33a1ed470e454d38c38a1b3cf735f6387e8755f5c85ec1496c18160405161156e91906158a2565b60405180910390a15060019998505050505050505050565b61158e614f26565b610ab061159a83613bca565b613d84565b60006115a9611ab7565b60085460ff166115df576115df6040518060400160405280600b81526020016a497320696e41637469766560a81b815250611b36565b506008805460ff19169055600190565b6115f7614f26565b610ab061159a83613f45565b6040805160608101825260008082526020820181905291810191909152610aad8383613244565b6000611634611ab7565b600680546001600160a01b0319166001600160a01b038416179055506001919050565b6060610aad8383614076565b600061166d614de9565b61167683611b8e565b6040810151602001519091506001600160a01b0316611697576116976158ce565b6020808201516040908101516001600160601b031660009081526009835281812080548351818602810186019094528084529193909190849084015b828210156117685760008481526020908190206040805160e08101825260048602909201805463ffffffff8082168552600160201b8204811685870152600160401b90910416918301919091526001808201546060840152600282015460808401526003909101546001600160a01b03811660a0840152600160a01b900460ff16151560c083015290835290920191016116d3565b5050505090506000815111156118cb5760005b81518110156118c95760006117ad83838151811061179b5761179b6158e4565b602002602001015160a00151876127cb565b90508360400151602001516001600160a01b0316816000015160a001516001600160a01b0316036117eb578051606001516117e89086615910565b94505b604081015151156118c05760005b8160400151518110156118be5760008260400151828151811061181e5761181e6158e4565b6020026020010151905080606001516118344290565b63ffffffff1611156118b5578560400151602001516001600160a01b0316836000015160a001516001600160a01b0316036118895760608101514263ffffffff16038160a001516020015102870196506118b5565b60608101514263ffffffff160360028260a0015160200151816118ae576118ae615923565b0402870196505b506001016117f9565b505b5060010161177b565b505b50915091565b6118d9614dad565b60408051606081018252600080825260208201819052918101829052600061190085611b8e565b6040810151602001519091506001600160a01b0316611921576119216158ce565b6000611935826040015160200151876127cb565b80515190915063ffffffff164263ffffffff16111561199057806000015160a001516001600160a01b03168260400151602001516001600160a01b03161461197f5761197f6158ce565b805160208201519095506001945092505b50509193909250565b604051638fbdf19360e01b81526001600160a01b038281166004830152600091829182917f000000000000000000000000000000000000000000000000000000000000000090911690638fbdf19390602401606060405180830381865afa158015611a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2c9190615939565b9196909550909350915050565b6040516312b0efef60e31b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906395877f7890602401600060405180830381600087803b158015611a9c57600080fd5b505af1158015611ab0573d6000803e3d6000fd5b5050505050565b6006546001600160a01b031680611af857611af86040518060400160405280600f81526020016e4d616e61676572206973207a65726f60881b815250611b36565b611b0133614151565b611b3357611b336040518060400160405280600d81526020016c1058d8d95cdcc819195b9a5959609a1b815250611b36565b50565b805115611b33578060405163cc86106360e01b8152600401611b589190615992565b60405180910390fd5b600654600160a01b900460ff1615611b8c5760405163d93c066560e01b815260040160405180910390fd5b565b611b96614de9565b600082815260046020526040902054610ab0906001600160601b0316613bca565b611bbf614de9565b83611bc9816122f7565b611bfe57611bfe6040518060400160405280601081526020016f556e697420697320696e41637469766560801b815250611b36565b600083608001516004811115611c1657611c16615607565b14611c4957611c496040518060400160405280600d81526020016c496e76616c696420737461676560981b815250611b36565b611c51614e90565b6020848101518051910180519091019052835160a001805160010160ff169052600284606001516002811115611c8957611c89615607565b03611cb557611c9a858760006130ac565b611ca485876127cb565b8051600160c0909101529050611cd2565b611cbf85876128b7565b611ccf84878760006001806141c0565b90505b611cf3816000015185602001516040015183602001516000015160006136e6565b611d1584600286606001516002811115611d0f57611d0f615607565b14614254565b15611d2e57611d266000874261428c565b600160808501525b839250611d3b8585614346565b50509392505050565b6001600160601b038083166000908152600360208181526040928390208551805182548285015183880151606080860151608087015160a09097015160ff908116600160501b0260ff60501b19988216600160481b029890981661ffff60481b1963ffffffff909316600160281b0268ffffffff00000000001962ffffff90961662010000029590951668ffffffffffffff0000199683166101000261ffff19909816929098169190911795909517939093169490941717161791909117825582870151805160018085019190915581850151600280860191909155828801519685018054938501518a16600160601b026001600160c01b03199094169790991696909617919091179096558487015180516004840180546001600160a01b039283166001600160a01b03199182161790915594820151600585018054918316918716919091179055958101516006840180549188169186169190911790558101516007830180549190961693169290921790935584015160088301805486959293919260ff1991909116918490811115611ee157611ee1615607565b0217905550608082015160088201805461ff001916610100836004811115611f0b57611f0b615607565b021790555060a082015160088201805462ff0000191662010000836001811115611f3757611f37615607565b021790555050505050565b611f4a614de9565b604080516001808252818301909252600091602080830190803683370190505090508381600081518110611f8057611f806158e4565b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663739c13db6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612000573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202491906159e1565b905061203a8286866002604860786001886137ee565b925061206582600081518110612052576120526158e4565b602002602001015160006005600061233f565b6120748460008060018061218d565b7fb161ed253087c33a1ed470e454d38c38a1b3cf735f6387e8755f5c85ec1496c1836040516120a391906158a2565b60405180910390a1505092915050565b60005b8351811015612187576001600160601b0382166000908152600a602090815260408083206001600160a01b0387168452909152902084518590839081106120ff576120ff6158e4565b60209081029190910181015182546001808201855560009485529383902082516007909202019081558183015181850155604082015160028201556060820151600382015560808201516004820180546001600160a01b0319166001600160a01b0390921691909117905560a0909101518051600583015590910151600690910155016120b6565b50505050565b60408051608081018252600d548152600e546020820152600f5491810191909152601054606082015260008460048111156121ca576121ca615607565b0361220b5760208101805187019052811561220657826121f65760408101805160010190819052612204565b606081018051600101908190525b505b6122d4565b600184600481111561221f5761221f615607565b03612246578581602001511061223b5760208101805187900390525b8051850181526122d4565b600284600481111561225a5761225a615607565b0361227e578051851161226f57805185900381525b602081018051870190526122d4565b81156122bd5782156122a6576060810151156122a1576060810180516000190190525b6122bd565b6040810151156122bd576040810180516000190190525b858160200151106122d45760208101805187900390525b8051600d556020810151600e556040810151600f55606001516010555050505050565b6000818152600460209081526040808320546001600160601b03168352600390915281206008015460019062010000900460ff1681811115610c1057610c10615607565b3390565b6000816123ef57604051631535b78760e21b81526001600160a01b03868116600483015260ff808716602484015285166044830152600060648301527f000000000000000000000000000000000000000000000000000000000000000016906354d6de1c906084016020604051808303816000875af11580156123c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ea91906158b1565b612493565b604051637116b98760e01b81526001600160a01b03868116600483015260ff808716602484015285166044830152600060648301527f00000000000000000000000000000000000000000000000000000000000000001690637116b987906084016020604051808303816000875af115801561246f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249391906158b1565b905080611ab057611ab06040518060400160405280600d81526020016c14995dd85c990819985a5b1959609a1b815250611b36565b60008080526003602090815260408051610180810182527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff805460ff80821660c08501908152610100808404831660e087015262ffffff620100008504169086015263ffffffff600160281b840416610120860152600160481b83048216610140860152600160501b90920481166101608501529083528351608080820186527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f005482527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f0154828801527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f02546001600160601b0381811684890152600160601b9091041660608084019190915285880192909252855190810186527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f03546001600160a01b0390811682527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f04548116978201979097527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f05548716818701527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f065490961686820152938301949094527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f0754919390928401911660028111156126f0576126f0615607565b600281111561270157612701615607565b81526020016008820160019054906101000a900460ff16600481111561272957612729615607565b600481111561273a5761273a615607565b81526020016008820160029054906101000a900460ff16600181111561276257612762615607565b600181111561277357612773615607565b81525050905061278b82602001516060015182611d44565b61279d82602001516040015183614443565b5050565b600654600160a01b900460ff16611b8c57604051638dfc202b60e01b815260040160405180910390fd5b6127d3614e90565b60006127de836145da565b90506127ea8484613244565b60208084019182526001600160601b03831660009081526009909152604090209051518154811061281d5761281d6158e4565b60009182526020918290206040805160e0810182526004909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b90049093169082015260018201546060820152600282015460808201526003909101546001600160a01b03811660a083015260ff600160a01b90910416151560c082015282526128ab8482614076565b60408301525092915050565b6128c18282613244565b602001511561279d5761279d6040518060400160405280601281526020017113595b58995c881b9bdd08185b1b1bddd95960721b815250611b36565b6001600160601b0384166000908152600a602090815260408083206001600160a01b0386168452825280832080548251818502810185019093528083529192909190849084015b828210156129ca5760008481526020908190206040805160c0810182526007860290920180548352600180820154848601526002820154848401526003820154606085015260048201546001600160a01b031660808501528251808401909352600582015483526006909101548285015260a08301919091529083529092019101612944565b505050509050600081511115612a51576001600160601b0385166000908152600a602090815260408083206001600160a01b038781168552925280832091891683529091208154612a1b9290614f39565b506001600160601b0385166000908152600a602090815260408083206001600160a01b03871684529091528120612a5191614fe7565b6001600160601b038516600090815260096020526040902084518154889291908110612a7f57612a7f6158e4565b906000526020600020906004020160030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612ac186838660006145f3565b612ace83838660016145f3565b505050505050565b8160036000612ae484611b8e565b602090810151606001516001600160601b0316825281019190915260400160002060050180546001600160a01b0319166001600160a01b03929092169190911790555050565b612b32614de9565b60008086612b3f816122f7565b612b7457612b746040518060400160405280601081526020016f556e697420697320696e41637469766560801b815250611b36565b612b7d88611663565b945092506000839003612bb857612bb86040518060400160405280600d81526020016c139bc81919589d08199bdd5b99609a1b815250611b36565b6000612bcc8560400151602001518a613244565b516020808701516040908101516001600160601b03166000908152600990925281208054929350909183908110612c0557612c056158e4565b9060005260206000209060040201600101819055506000600960008760200151604001516001600160601b03166001600160601b031681526020019081526020016000208281548110612c5a57612c5a6158e4565b6000918252602090912060026004909202010155426020808701516040908101516001600160601b0316600090815260099092529020805483908110612ca257612ca26158e4565b60009182526020909120600490910201805463ffffffff191663ffffffff9290921691909117905560085460ff1615612ceb57612ceb856040015160200151600260008061233f565b84516080810151905160ff918216911603612d155760046080860152612d10856124c8565b612db5565b426020808701516040908101516001600160601b031660009081526009835220875190910151815460ff909116908110612d5157612d516158e4565b6000918252602091829020600490910201805467ffffffff000000001916600160201b63ffffffff949094169390930292909217909155600160808701528551518682018051805160ff90931690920291909201525160600151612db59086611d44565b60408581015181015190516370a0823160e01b81526001600160a01b0391821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4a91906159fe565b9050612e807f00000000000000000000000000000000000000000000000000000000000000008a8860400151604001518861334d565b508560400151604001516001600160a01b031663397c39bd6040518061014001604052808c6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815260200188815260200184815260200189600001516080015160ff168a600001516000015160ff161415158152602001600960008b60200151604001516001600160601b03166001600160601b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612ff05760008481526020908190206040805160e08101825260048602909201805463ffffffff8082168552600160201b8204811685870152600160401b90910416918301919091526001808201546060840152600282015460808401526003909101546001600160a01b03811660a0840152600160a01b900460ff16151560c08301529083529092019101612f5b565b5050505081526020018b151581526020018a6001600160a01b031681526020018960200151604001516001600160601b031681526020018960400151600001516001600160a01b03168152508c6040518363ffffffff1660e01b815260040161305a929190615a5d565b6020604051808303816000875af1158015613079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309d91906159fe565b93505050509450945094915050565b80610648576130bb8383613244565b60200151610648576106486040518060400160405280600c81526020016b2737ba10309036b2b6b132b960a11b815250611b36565b6000806000806130ff85611b8e565b90506000613114826040015160000151611999565b60208501515192965090945091501561199057815160408082015191516020808601515183518085019094526001600160801b038916845260ff868116928501929092526131679492919091160261467e565b945050509193909250565b61317a614dad565b60096000613187856145da565b6001600160601b03166001600160601b031681526020019081526020016000208260ff16815481106131bb576131bb6158e4565b60009182526020918290206040805160e0810182526004909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b90049093169082015260018201546060820152600282015460808201526003909101546001600160a01b03811660a083015260ff600160a01b90910416151560c08201529392505050565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03959095168552600582528285209385529281529281902081519283018252805483526001015460ff808216151594840194909452610100900490921615159181019190915290565b6132ba614dad565b6132c6848660006130ac565b60006132d1866145da565b905060006132df8688613244565b90506132eb86886127cb565b5192506132fb86888760006145f3565b61330c8460a00151888360006145f3565b6001600160a01b03861660a08086018290528401528451613332908590849060006136e6565b6133438383836000015160006136e6565b5050949350505050565b6000806001600160a01b03851633146133665733613368565b845b9050613375868285614703565b91506001600160a01b0386161580159061339757506001600160a01b03841615155b6133a3576133a36158ce565b8115610dcc576040516323b872dd60e01b81526001600160a01b0382811660048301528581166024830152604482018490528716906323b872dd906064016020604051808303816000875af1158015613400573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342491906158b1565b610dcc57610dcc6040518060400160405280600d81526020016c151c9e11995c8819985a5b1959609a1b815250611b36565b6000610aad83836148e4565b61346a614de9565b613472614dad565b845160200180519061348382615b3e565b60ff16905250845160600151420163ffffffff16835260808301849052602085810180518201516060860152516040908101516001600160601b03166000908152600a8352818120828901518401516001600160a01b03168252835281812080548351818602810186019094528084529193909190849084015b828210156135835760008481526020908190206040805160c0810182526007860290920180548352600180820154848601526002820154848401526003820154606085015260048201546001600160a01b031660808501528251808401909352600582015483526006909101548285015260a083019190915290835290920191016134fd565b50505050905060005b81518110156136ca576020878101516040908101516001600160601b03166000908152600a8352818120828b01518401516001600160a01b031682529092529020805463ffffffff42169190839081106135e8576135e86158e4565b906000526020600020906007020160030181905550613654828281518110613612576136126158e4565b602002602001015160400151886000015160600151848481518110613639576136396158e4565b6020026020010151602001516149929092919063ffffffff16565b6020808901516040908101516001600160601b03166000908152600a8352818120828c01518401516001600160a01b03168252909252902080548390811061369e5761369e6158e4565b60009182526020918290208351600560079093029091019182015591015160069091015560010161358c565b5050505060208381015160009101526002608084015291929050565b6136ee614dad565b816136f957846136fb565b805b6001600160601b0385166000908152600960205260409020805460ff8616908110613728576137286158e4565b60009182526020918290208351600490920201805492840151604085015163ffffffff908116600160401b026bffffffff000000000000000019928216600160201b0267ffffffffffffffff1990961691909416179390931792909216178155606082015160018201556080820151600282015560a08201516003909101805460c0909301511515600160a01b026001600160a81b03199093166001600160a01b03909216919091179190911790555050505050565b60006137e960025490565b905090565b6137f6614de9565b86613800816122f7565b15613834576138346040518060400160405280600e81526020016d556e69742069732061637469766560901b815250611b36565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161461392e57604051634df48c7360e11b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639be918e690602401602060405180830381865afa1580156138d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f891906158b1565b61392e5761392e60405180604001604052806011815260200170155b9cdd5c1c1bdc9d195908105cdcd95d607a1b815250611b36565b61ffff8716158061394457506102d08761ffff16115b1561397a5761397a6040518060400160405280601081526020016f24b73b30b634b210323ab930ba34b7b760811b815250611b36565b600185600281111561398e5761398e615607565b03613a1d5760018b5111806139a257508a51155b156139dd576139dd60405180604001604052806015815260200174115e1c1958dd080c481a5d195b481a5b881b1a5cdd605a1b815250611b36565b896001600160a01b03168b6000815181106139fa576139fa6158e4565b60200260200101516001600160a01b031614613a1857613a186158ce565b613acb565b60028b511015613a6557613a656040518060400160405280601881526020017f4c69737420746f6f206c6f7720666f7220726f75746572320000000000000000815250611b36565b8a600081518110613a7857613a786158e4565b60200260200101516001600160a01b03168a6001600160a01b031614613acb57613acb6040518060400160405280601281526020017114d95b99195c881b9bdd081a5b881b1a5cdd60721b815250611b36565b600080613ad78b6149f5565b91509150613b7d6040518061012001604052808d8152602001846001600160601b03168152602001836001600160601b031681526020018c60ff1681526020018a62ffffff168152602001886001600160a01b031681526020018b61ffff1681526020018f600081518110613b4e57613b4e6158e4565b60200260200101516001600160a01b03168152602001896002811115613b7657613b76615607565b9052614a4f565b9450613b8a8b8e87614ba3565b9450613b968286611d44565b613bba8d600081518110613bac57613bac6158e4565b602002602001015186614346565b5050505098975050505050505050565b613bd2614de9565b6001600160601b03808316600090815260036020818152604092839020835161018081018552815460ff80821660c08401908152610100808404831660e086015262ffffff620100008504169085015263ffffffff600160281b840416610120850152600160481b83048216610140850152600160501b9092048116610160840152908252855160808082018852600185015482526002808601548388015296850154808a16838a0152600160601b9004909816606080830191909152838601919091528651978801875260048401546001600160a01b03908116895260058501548116958901959095526006840154851688880152600784015490941687850152948101959095526008810154909391850192911690811115613cf857613cf8615607565b6002811115613d0957613d09615607565b81526020016008820160019054906101000a900460ff166004811115613d3157613d31615607565b6004811115613d4257613d42615607565b81526020016008820160029054906101000a900460ff166001811115613d6a57613d6a615607565b6001811115613d7b57613d7b615607565b90525092915050565b613d8c614f26565b8181526020808301516040908101516001600160601b031660009081526009835281812080548351818602810186019094528084529193909190849084015b82821015613e605760008481526020908190206040805160e08101825260048602909201805463ffffffff8082168552600160201b8204811685870152600160401b90910416918301919091526001808201546060840152600282015460808401526003909101546001600160a01b03811660a0840152600160a01b900460ff16151560c08301529083529092019101613dcb565b5050505090506000815167ffffffffffffffff811115613e8257613e8261513d565b604051908082528060200260200182016040528015613ebb57816020015b613ea8614e90565b815260200190600190039081613ea05790505b508351602001515190915015613f3e5760005b8251811015613f35576000838281518110613eeb57613eeb6158e4565b602002602001015160a001519050613f0f81866000015160200151600001516127cb565b838381518110613f2157613f216158e4565b602090810291909101015250600101613ece565b50602083018190525b5050919050565b613f4d614de9565b6001600160601b03808316600090815260016020818152604092839020835161018081018552815460ff80821660c08401908152610100808404831660e086015262ffffff620100008504169085015263ffffffff600160281b840416610120850152600160481b83048216610140850152600160501b9092048116610160840152908252855160808082018852958401548152600280850154828701526003850154808a16838a0152600160601b9004909816606080830191909152838601919091528651958601875260048401546001600160a01b03908116875260058501548116958701959095526006840154851686880152600784015490941685850152948101939093526008810154929490939185019290911690811115613cf857613cf8615607565b6001600160601b0381166000908152600a602090815260408083206001600160a01b03861684528252808320805482518185028101850190935280835260609492939192909184015b828210156141455760008481526020908190206040805160c0810182526007860290920180548352600180820154848601526002820154848401526003820154606085015260048201546001600160a01b031660808501528251808401909352600582015483526006909101548285015260a083019190915290835290920191016140bf565b50505050905092915050565b600654604051633f784de560e11b81526001600160a01b0383811660048301526000921690637ef09bca90602401602060405180830381865afa15801561419c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab091906158b1565b6141c8614e90565b6020808801516040908101516001600160601b03166000908152600983522054908201805191909152515161420290869088908787614cd9565b6020968701516040908101516001600160601b03166000908152600990985287208054600101815590965285516001600160a01b0390941660a0909401939093525050825190151560c0909101525090565b6000811561427657825151602080850151805191015160ff9092160214610aad565b505051805160a09091015160ff91821691161490565b60006001600160a01b0384166142c4576142a583611b8e565b516020015160ff1690506142b98382613172565b60a0015193506142d2565b6142ce8484613244565b5190505b81600960006142e0866145da565b6001600160601b03166001600160601b031681526020019081526020016000208281548110614311576143116158e4565b906000526020600020906004020160000160046101000a81548163ffffffff021916908363ffffffff16021790555050505050565b6143827f00000000000000000000000000000000000000000000000000000000000000008383604001516040015184602001516000015161334d565b50604080820151810151602083015182015191516320d46be760e11b81526001600160a01b0385811660048301526001600160601b0390931660248201529116906341a8d7ce906044016020604051808303816000875af11580156143eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061440f91906158b1565b61279d5761279d6040518060400160405280600f81526020016e105919081d5cd95c8819985a5b1959608a1b815250611b36565b6001600160601b038083166000908152600160208181526040928390208551805182548285015183880151606080860151608087015160a09097015160ff908116600160501b0260ff60501b19988216600160481b029890981661ffff60481b1963ffffffff909316600160281b0268ffffffff00000000001962ffffff90961662010000029590951668ffffffffffffff0000199683166101000261ffff199098169290981691909117959095179390931694909417171617919091178255828701518051838601558084015160028085019190915581870151600385018054938501518a16600160601b026001600160c01b03199094169190991617919091179096558487015180516004840180546001600160a01b039283166001600160a01b03199182161790915594820151600585018054918316918716919091179055958101516006840180549188169186169190911790558101516007830180549190961693169290921790935584015160088301805486959293919260ff199190911691908490811115611ee157611ee1615607565b60006145e582611b8e565b602001516040015192915050565b60408051606081018252600080825260208201819052918101919091528161461b578261461d565b805b6001600160a01b0395909516600090815260056020908152604080832096835295815290859020865181559086015160019091018054959096015161ffff1990951690151561ff001916176101009415159490940293909317909355505050565b600062ffffff8316158061469a575083516001600160801b0316155b806146a3575081155b156146b057506000610768565b60008360640262ffffff169050600085600001516001600160801b0316866020015160ff16600a0a8502816146e7576146e7615923565b04905061271065ffffffffffff83168202049695505050505050565b6000837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146147ff57604051634df48c7360e11b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639be918e690602401602060405180830381865afa1580156147a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147c991906158b1565b6147ff576147ff60405180604001604052806011815260200170155b9cdd5c1c1bdc9d195908105cdcd95d607a1b815250611b36565b6001600160a01b038516614815576148156158ce565b6001600160a01b03841661482b5761482b6158ce565b604051636eb1769f60e11b81526001600160a01b03858116600483015230602483015286169063dd62ed3e90604401602060405180830381865afa158015614877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061489b91906159fe565b9150828210156148dc576148dc6040518060400160405280601681526020017556616c75652065786365656420616c6c6f77616e636560501b815250611b36565b509392505050565b600061271061ffff831615806148f8575083155b15614907576000915050610ab0565b61ffff838116106149445761494460405180604001604052806011815260200170496e746572657374206f766572666c6f7760781b815250611b36565b8061ffff16841161497057614970604051806060016040528060268152602001615b5e60269139611b36565b8061ffff168361ffff1685028161498957614989615923565b04949350505050565b604080518082019091526000808252602082015262278d0063ffffffff831611156149bf576149bf6158ce565b6149c984846148e4565b8082521561076857805163ffffffff831690816149e8576149e8615923565b0460208201529392505050565b600080614a06600280546001019055565b600254600084815260046020526040902080546bffffffffffffffffffffffff19166001600160601b0383161790559150614a48600080546001810190915590565b9050915091565b614a57614de9565b6040518060c00160405280836060015160ff168152602001600060ff168152602001836080015162ffffff1681526020018360c0015161ffff16610e100263ffffffff168152602001600060ff168152602001600160ff1681525081600001819052506040518060800160405280836000015181526020018360000151815260200183604001516001600160601b0316815260200183602001516001600160601b0316815250816020018190525060405180608001604052808360a001516001600160a01b0316815260200160006001600160a01b03168152602001614b408460000151614d07565b6001600160a01b03908116825260e085015116602090910152604082015261010082015160608201906002811115614b7a57614b7a615607565b90816002811115614b8d57614b8d615607565b905250600160a082015260006080820152919050565b614bab614de9565b60005b8351811015614cd057614bbf614e90565b81600003614bf757614bf08487878581518110614bde57614bde6158e4565b602002602001015160018060016141c0565b9050614ca6565b848281518110614c0957614c096158e4565b60200260200101516001600160a01b031685600081518110614c2d57614c2d6158e4565b60200260200101516001600160a01b031603614c7957614c796040518060400160405280601581526020017443726561746f722073706f7474656420747769636560581b815250611b36565b614ca38487878581518110614c9057614c906158e4565b60200260200101516000600160006141c0565b90505b614cc7816000015185602001516040015183602001516000015160006136e6565b50600101614bae565b50909392505050565b611ab0858560405180606001604052808760ff168152602001851515815260200186151581525060006145f3565b60405163f72be56960e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f72be569906024016020604051808303816000875af1158015614d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d9591906159e1565b90506001600160a01b038116610bea57610bea6158ce565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b604080516101808101909152600060c0820181815260e083018290526101008301829052610120830182905261014083018290526101608301919091528190815260408051608081018252600080825260208281018290529282018190526060820152910190815260408051608081018252600080825260208281018290529282018190526060820152910190815260200160008152602001600081526020016000905290565b6040518060600160405280614ea3614dad565b81526040805160608101825260008082526020828101829052928201529101905b8152602001606081525090565b6040518060800160405280614f076040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001600061ffff16815260200160008152602001600081525090565b6040518060400160405280614ec4614de9565b828054828255906000526020600020906007028101928215614fd75760005260206000209160070282015b82811115614fd7578254825560018084015490830155600280840154908301556003808401549083015560048084015490830180546001600160a01b0319166001600160a01b03909216919091179055600580840154908301556006808401549083015560079283019290910190614f64565b50614fe3929150615004565b5090565b5080546000825560070290600052602060002090810190611b3391905b5b80821115614fe35760008082556001820181905560028201819055600382018190556004820180546001600160a01b0319169055600582018190556006820155600701615005565b60006020828403121561505f57600080fd5b5035919050565b63ffffffff80825116835280602083015116602084015280604083015116604084015250606081015160608301526080810151608083015260018060a01b0360a08201511660a083015260c0810151151560c08301525050565b61016081016150cf8286615066565b92151560e0820152815161010082015260208201511515610120820152604090910151151561014090910152919050565b6001600160a01b0381168114611b3357600080fd5b8035610bea81615100565b60006020828403121561513257600080fd5b813561076881615100565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156151765761517661513d565b60405290565b6040805190810167ffffffffffffffff811182821017156151765761517661513d565b604051601f8201601f1916810167ffffffffffffffff811182821017156151c8576151c861513d565b604052919050565b600080600060608085870312156151e657600080fd5b843567ffffffffffffffff808211156151fe57600080fd5b818701915087601f83011261521257600080fd5b81356020828211156152265761522661513d565b615234818360051b0161519f565b828152818101935060e092830285018201928b84111561525357600080fd5b948201945b838610156152ea57858c03818112156152715760008081fd5b615279615153565b87358152848801358582015260408089013581830152898901358a8301526080808a01356152a681615100565b9083015260a0609f1984018213156152be5760008081fd5b6152c661517c565b8a820135815260c08b01358882015290830152508652509485019493820193615258565b5097506152f8898201615115565b96505050505050604084013590509250925092565b6000806040838503121561532057600080fd5b82359150602083013561533281615100565b809150509250929050565b805182526020808201518184015260408083015190840152606080830151908401526080808301516001600160a01b03169084015260a091820151805192840192909252015160c082015260e00190565b60006101608084016153a1858551615066565b602084810151805160e088015280820151151561010088015260409081015115156101208801528501516101408701939093528251918290526101808601928101916000905b8082101561540c576153fa85855161533d565b945082840193506001820191506153e7565b50929695505050505050565b602081526000610aad602083018461538e565b60ff81168114611b3357600080fd5b8035610bea8161542b565b803561ffff81168114610bea57600080fd5b803562ffffff81168114610bea57600080fd5b6000806000806080858703121561548057600080fd5b8435935060208501356154928161542b565b92506154a060408601615445565b91506154ae60608601615457565b905092959194509250565b600080604083850312156154cc57600080fd5b82356154d781615100565b91506154e560208401615445565b90509250929050565b8015158114611b3357600080fd5b8035610bea816154ee565b60008060008060008060008060e0898b03121561552357600080fd5b883567ffffffffffffffff8082111561553b57600080fd5b818b0191508b601f83011261554f57600080fd5b81358181111561555e57600080fd5b8c60208260051b850101111561557357600080fd5b60209283019a50985050890135955061558e60408a0161543a565b945061559c60608a01615445565b93506155aa60808a01615457565b92506155b860a08a016154fc565b91506155c660c08a01615115565b90509295985092959890939650565b80356001600160601b0381168114610bea57600080fd5b6000602082840312156155fe57600080fd5b610aad826155d5565b634e487b7160e01b600052602160045260246000fd5b6003811061562d5761562d615607565b9052565b6005811061562d5761562d615607565b6002811061562d5761562d615607565b805160ff815116835260ff602082015116602084015262ffffff604082015116604084015263ffffffff606082015116606084015260ff608082015116608084015260ff60a08201511660a08401525060208101516156e360c0840182805182526020810151602083015260408101516001600160601b03808216604085015280606084015116606085015250505050565b5060408181015180516001600160a01b03908116610140860152602082015181166101608601529181015182166101808501526060908101519091166101a08401528101516157366101c084018261561d565b50608081015161574a6101e0840182615631565b5060a0810151610648610200840182615641565b6000602080835261026083016157778285018651615651565b8185015161024085810152805191829052610280600583901b8601810192918401919086019060005b818110156157cf5761027f198886030183526157bd85855161538e565b945092850192918501916001016157a0565b5092979650505050505050565b600080604083850312156157ef57600080fd5b82356157fa81615100565b946020939093013593505050565b8151815260208083015115159082015260408083015115159082015260608101610ab0565b6000806040838503121561584057600080fd5b823561584b81615100565b91506154e5602084016155d5565b6020808252825182820181905260009190848201906040850190845b818110156158965761588883855161533d565b938501939250600101615875565b50909695505050505050565b6102208101610ab08284615651565b6000602082840312156158c357600080fd5b8151610768816154ee565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610ab057610ab06158fa565b634e487b7160e01b600052601260045260246000fd5b60008060006060848603121561594e57600080fd5b83516001600160801b038116811461596557600080fd5b6020850151909350615976816154ee565b60408501519092506159878161542b565b809150509250925092565b60006020808352835180602085015260005b818110156159c0578581018301518582016040015282016159a4565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156159f357600080fd5b815161076881615100565b600060208284031215615a1057600080fd5b5051919050565b60008151808452602080850194506020840160005b83811015615a5257615a3f878351615066565b60e0969096019590820190600101615a2c565b509495945050505050565b60408152615a776040820184516001600160a01b03169052565b60006020840151615a9360608401826001600160a01b03169052565b5060408401516080830152606084015160a08301526080840151615abb60c084018215159052565b5060a08401516101408060e0850152615ad8610180850183615a17565b915060c0860151610100615aef8187018315159052565b60e08801519150610120615b0d818801846001600160a01b03169052565b908801516001600160601b0316928601929092525094909401516001600160a01b0316610160830152506020015290565b600060ff821660ff8103615b5457615b546158fa565b6001019291505056fe5072696e636970616c2073686f756c642062652067726561746572207468616e203130303030a2646970667358221220754218baa4db5430915d8d6b11f3e3edcc3cfe5ba64da5ffec281f4ca29ea2f064736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Simplifi (Bobeu)",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "activateReward()": {
        "details": "Activate reward"
      },
      "closePool(uint256)": {
        "details": "Cancels a pool. Only pool with one contributor can be close.",
        "params": {
          "unit": ": Unit contribution."
        }
      },
      "constructor": {
        "params": {
          "_assetManager": ": Asset manager contract",
          "_baseAsset": ": ERC20 compatible asset to use as base contribution",
          "_feeTo": ": Fee receiver",
          "_pointFactory": ": Platform fee",
          "_roleManager": ": Role manager contract"
        }
      },
      "contribute(uint256)": {
        "details": "Add a contributor to a poool",
        "params": {
          "": ": Unit contribution"
        }
      },
      "contributeThroughProvider((uint256,uint256,uint256,uint256,address,(uint256,uint256))[],address,uint256)": {
        "details": "Contributors can join a pool through a provider is they wish to borrow to finance the unit contribution.      If the unit is not taken, we add them to the pool otherwise a new pool will be launched.",
        "params": {
          "borrower": ": Account address of the borrower",
          "providers": ": List of providers that lend to the borrower",
          "unit": ": Amount borrowed will automatically be the unit contribution"
        }
      },
      "createPool(address[],uint256,uint8,uint16,uint24,bool,address)": {
        "details": "Create a pool internally",
        "params": {
          "colAsset": ": An ERC20-compatible asset to use as collateral currency ",
          "colCoverage": ": Ration of collateral coverage or index required as cover for loan",
          "durationInHours": ": Maximum duration in hours each borrower can retain the loan",
          "isPermissionless": ": Whether to create a permissionless or permissioned pool.",
          "maxQuorum": ": Maximum number of contributors that can participate",
          "unit": ": Unit contribution",
          "users": ": List of participating accounts"
        }
      },
      "deactivateReward()": {
        "details": "Deactivate reward"
      },
      "editPool(uint256,uint8,uint16,uint24)": {
        "details": "Edit pool information",
        "params": {
          "colCoverage": ": Collateral coverage or ratio.",
          "durationInHours": ": Number of time in hours each contributor can retain the loan",
          "maxQuorum": ": Number of expected participants",
          "unit": ": Unit contribution"
        }
      },
      "enquireLiquidation(uint256)": {
        "details": "Check liquidation opportunity in the pool",
        "params": {
          "unit": ": Unit contribution"
        }
      },
      "getCollateralQuote(uint256)": {
        "details": "Returns amount of collateral required in a pool.",
        "params": {
          "unit": ": EpochId"
        }
      },
      "getContributorProviders(address,uint96)": {
        "details": "Return providers associated with the target account",
        "params": {
          "recordId": ": Record id",
          "target": ": Target account"
        }
      },
      "getCurrentDebt(uint256)": {
        "params": {
          "unit": ": Unit contribution"
        }
      },
      "getFactoryData()": {
        "details": "Return contract data "
      },
      "getFinance(uint256)": {
        "details": "Get finance",
        "params": {
          "unit": ": Unit contribution"
        },
        "returns": {
          "_0": "bool : Success or Failure"
        }
      },
      "getPoolData(uint96)": {
        "details": "Return past pools using unitId. ",
        "params": {
          "unitId": ": UnitId "
        }
      },
      "getPoolRecord(uint96)": {
        "details": "Return past pools using unitId. ",
        "params": {
          "recordId": ": Record Id"
        }
      },
      "getProfile(uint256,address)": {
        "details": "Returns the profile of target",
        "params": {
          "target": ": User",
          "unit": ": unit contribution"
        }
      },
      "isPoolAvailable(uint256)": {
        "details": "Get pool from storage",
        "params": {
          "unit": ": Unit contribution"
        }
      },
      "liquidate(uint256)": {
        "details": "Liquidates a borrower if they have defaulted in repaying their loan. - If the current beneficiary defaults, they're liquidated. - Their collateral balances is forwarded to the liquidator. Liquidator also takes the full  responsibilities of the providers if any. - Liquidator must not be a participant in pool at `unitId. We use this  to avoid fatal error in storage.",
        "params": {
          "unit": ": Unit contribution."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payback(uint256)": {
        "details": "Payback. For detailed documentation, see _payback",
        "params": {
          "unit": ": Unit contribution"
        }
      },
      "setFeeOrMakerRate(address,uint16)": {
        "details": "Set fee or maker rate. The status of the value parsed determines which to update.",
        "params": {
          "_feeTo": ": Fee receiving account. ",
          "_makerRate": ": Platform fee (in %)"
        }
      },
      "setRoleManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused."
      },
      "updateTokenPrice(address)": {
        "details": "Update token price if price is zero or not inTime",
        "params": {
          "asset": ": Asset for which to update price"
        }
      }
    },
    "title": "FlexpoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closePool(uint256)": {
        "notice": ": Only the creator of a pool can close it provided the number of contributors does not exceed one."
      },
      "constructor": {
        "notice": "================ Constructor =============="
      },
      "contributeThroughProvider((uint256,uint256,uint256,uint256,address,(uint256,uint256))[],address,uint256)": {
        "notice": "By default, maxQuorum is set to 2 using this method. Users can immediately change the quorum to desired value otherwise it will not be possible if another contributor joins to complete the quorum. - durationInHrs is set to 72 hours by default. - colCoverage is set to 120 by default. Only accounts with the roleBearer are allowed i.e Ex. Providers contract If an user is contributing via the provider, we ensure the privacy of permissioned group is preserved."
      },
      "createPool(address[],uint256,uint8,uint16,uint24,bool,address)": {
        "notice": "users list should be a list of participating accounts if it is permissioned including the creator being the first on the list. But the list can be empty if it is permissionless."
      },
      "getCurrentDebt(uint256)": {
        "notice": "Returns the current debt of target user."
      },
      "getFinance(uint256)": {
        "notice": ": To get finance, the unit contribution must be active. In the event the expected contributor failed to  call, we swap their profile for the current msg.sender provided the grace period of 1hr has passed."
      },
      "getPoolData(uint96)": {
        "notice": "For every unit contribution, the unit Id is unique to another and does not change"
      },
      "getPoolRecord(uint96)": {
        "notice": "The correct unitId must be parsed. The record id can be obtained by iterating over the past epoches. Using the record Id associated with the current pool will return empty pool but may not return empty contributors."
      },
      "setFeeOrMakerRate(address,uint16)": {
        "notice": ": For detailed doc on setting maker rate, see Utils.sol._getPercentage()"
      },
      "setRoleManager(address)": {
        "notice": "Set Role manager"
      }
    },
    "notice": "FlexpoolFactory enables peer-funding magic. Participants of each pool are referred to  contributors. There is no limit to the amount that can be contributed except for zer0 value. Users can single-handedly run a pool (where anyone is free to participate) or collectively with friends and family or peer operate a permissioned pool  where participation is restricted to the preset members only. Users can use providers strategy to finance their quota if they can't afford the unit contribution. They can select multiple providers if the provider balance cannot the amount they wish to borrow. If this is the case, the selected providers are  entitled to earn interest on the amount they provide. When paying back, the contributor will repay the full loan with interest but halved for other contributors.  ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4028,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "pastEpoches",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)408_storage"
      },
      {
        "astId": 4033,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "records",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint96,t_struct(Pool)552_storage)"
      },
      {
        "astId": 3479,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "epoches",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)408_storage"
      },
      {
        "astId": 3484,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint96,t_struct(Pool)552_storage)"
      },
      {
        "astId": 3489,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "indexes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint96)"
      },
      {
        "astId": 4937,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "slots",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Slot)676_storage))"
      },
      {
        "astId": 3914,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "roleManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IRoleBase)1087"
      },
      {
        "astId": 4109,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 4881,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "safes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1516,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "awardPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 1735,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "contributors",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint96,t_array(t_struct(Contributor)625_storage)dyn_storage)"
      },
      {
        "astId": 1744,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "unitProviders",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint96,t_mapping(t_address,t_array(t_struct(Provider)644_storage)dyn_storage))"
      },
      {
        "astId": 3784,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3786,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "makerRate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5305,
        "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
        "label": "analytics",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Analytics)722_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Contributor)625_storage)dyn_storage": {
        "base": "t_struct(Contributor)625_storage",
        "encoding": "dynamic_array",
        "label": "struct Common.Contributor[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Provider)644_storage)dyn_storage": {
        "base": "t_struct(Provider)644_storage",
        "encoding": "dynamic_array",
        "label": "struct Common.Provider[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)917": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleBase)1087": {
        "encoding": "inplace",
        "label": "contract IRoleBase",
        "numberOfBytes": "20"
      },
      "t_enum(Router)533": {
        "encoding": "inplace",
        "label": "enum Common.Router",
        "numberOfBytes": "1"
      },
      "t_enum(Stage)520": {
        "encoding": "inplace",
        "label": "enum Common.Stage",
        "numberOfBytes": "1"
      },
      "t_enum(Status)526": {
        "encoding": "inplace",
        "label": "enum Common.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Provider)644_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Common.Provider[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Provider)644_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Slot)676_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Common.Slot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Slot)676_storage)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Slot)676_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Common.Slot)",
        "numberOfBytes": "32",
        "value": "t_struct(Slot)676_storage"
      },
      "t_mapping(t_uint256,t_uint96)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint96,t_array(t_struct(Contributor)625_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint96",
        "label": "mapping(uint96 => struct Common.Contributor[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Contributor)625_storage)dyn_storage"
      },
      "t_mapping(t_uint96,t_mapping(t_address,t_array(t_struct(Provider)644_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint96",
        "label": "mapping(uint96 => mapping(address => struct Common.Provider[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(Provider)644_storage)dyn_storage)"
      },
      "t_mapping(t_uint96,t_struct(Pool)552_storage)": {
        "encoding": "mapping",
        "key": "t_uint96",
        "label": "mapping(uint96 => struct Common.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)552_storage"
      },
      "t_struct(Addresses)609_storage": {
        "encoding": "inplace",
        "label": "struct Common.Addresses",
        "members": [
          {
            "astId": 602,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "colAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)917"
          },
          {
            "astId": 604,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "lastPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 606,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "safe",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 608,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "admin",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Analytics)722_storage": {
        "encoding": "inplace",
        "label": "struct Common.Analytics",
        "members": [
          {
            "astId": 715,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "tvlCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 717,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "tvlBase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 719,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "totalPermissioned",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 721,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "totalPermissionless",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Big)574_storage": {
        "encoding": "inplace",
        "label": "struct Common.Big",
        "members": [
          {
            "astId": 567,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "unit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 569,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "currentPool",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 571,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "recordId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 573,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "unitId",
            "offset": 12,
            "slot": "2",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Contributor)625_storage": {
        "encoding": "inplace",
        "label": "struct Common.Contributor",
        "members": [
          {
            "astId": 612,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "paybackTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 614,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "turnStartTime",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 616,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "getFinanceTime",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 618,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "loan",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 620,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "colBals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 622,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "id",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 624,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "sentQuota",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Counter)408_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 407,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Interest)598_storage": {
        "encoding": "inplace",
        "label": "struct Common.Interest",
        "members": [
          {
            "astId": 595,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "fullInterest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 597,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "intPerSec",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Low)565_storage": {
        "encoding": "inplace",
        "label": "struct Common.Low",
        "members": [
          {
            "astId": 554,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "maxQuorum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 556,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "selector",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 558,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "colCoverage",
            "offset": 2,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 560,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "duration",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 562,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "allGh",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 564,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "userCount",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pool)552_storage": {
        "encoding": "inplace",
        "label": "struct Common.Pool",
        "members": [
          {
            "astId": 536,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "low",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Low)565_storage"
          },
          {
            "astId": 539,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "big",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Big)574_storage"
          },
          {
            "astId": 542,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "addrs",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Addresses)609_storage"
          },
          {
            "astId": 545,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "router",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(Router)533"
          },
          {
            "astId": 548,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "stage",
            "offset": 1,
            "slot": "8",
            "type": "t_enum(Stage)520"
          },
          {
            "astId": 551,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "status",
            "offset": 2,
            "slot": "8",
            "type": "t_enum(Status)526"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Provider)644_storage": {
        "encoding": "inplace",
        "label": "struct Common.Provider",
        "members": [
          {
            "astId": 632,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "slot",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 634,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 636,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "rate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 638,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "earnStartDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 640,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "account",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 643,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "accruals",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Interest)598_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Slot)676_storage": {
        "encoding": "inplace",
        "label": "struct Common.Slot",
        "members": [
          {
            "astId": 671,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 673,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "isMember",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 675,
            "contract": "contracts/standalone/FlexpoolFactory.sol:FlexpoolFactory",
            "label": "isAdmin",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}