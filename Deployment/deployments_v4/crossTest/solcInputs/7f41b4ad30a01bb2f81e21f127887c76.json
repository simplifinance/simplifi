{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/abstracts/AbstractFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { FactoryLib, Data } from \"../libraries/FactoryLib.sol\";\r\nimport { FuncHandler } from \"../peripherals/FuncHandler.sol\";\r\nimport { IFactory } from \"../apis/IFactory.sol\";\r\nimport { IAssetClass } from \"../apis/IAssetClass.sol\";\r\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**@title Abstract Factory contract\r\n * Non deployable.\r\n*/\r\n\r\nabstract contract AbstractFactory is\r\n    IFactory,\r\n    FuncHandler,\r\n    ReentrancyGuard\r\n{\r\n    using FactoryLib for Data;\r\n\r\n    Data private data;\r\n\r\n    // Creation fee\r\n    uint public creationFee;\r\n\r\n    // Minimum amount that can be contributed\r\n    uint public minContribution;\r\n\r\n    modifier validateEpochId(uint epochId) {\r\n        data.verifyEpochId(epochId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only supported assets are allowed.\r\n     * Note: Asset must be supported by the AssetClass contract.\r\n     * @param _asset : Input asset contract address\r\n     */\r\n    modifier onlySupportedAsset(address _asset) {\r\n        if (!IAssetClass(data.pData.assetAdmin).isSupportedAsset(_asset)) {\r\n            revert IAssetClass.UnSupportedAsset(_asset);\r\n        }\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * See _setUp() for doc\r\n     */\r\n    constructor(\r\n        uint16 serviceRate,\r\n        uint _minContribution,\r\n        uint setUpFee,\r\n        address feeTo,\r\n        address assetClass,\r\n        address strategyManager,\r\n        address _ownershipManager\r\n    ) FuncHandler(_ownershipManager){\r\n        _setUp(\r\n            serviceRate, \r\n            _minContribution, \r\n            setUpFee, \r\n            feeTo, \r\n            assetClass, \r\n            strategyManager\r\n        );\r\n    }\r\n\r\n    ///@dev Fallback\r\n    receive() external payable {}\r\n\r\n    function withdrawXFI(\r\n        uint value\r\n    )\r\n        public\r\n        onlyOwner(\"Factory - withdrawXFI not permitted\")\r\n    {\r\n        require(value > 0 && address(this).balance >= value, \"Value is 0 || 0 balalnce\");\r\n        (bool success,) = data.pData.feeTo.call{value: value}('');\r\n        require(success,\"Withdrawal Failed\");\r\n    }\r\n\r\n\r\n    /** @dev See _setUp() for doc.\r\n     */\r\n    function performSetUp(\r\n        uint16 serviceRate,\r\n        uint _minContribution,\r\n        uint setUpFee,\r\n        address feeTo,\r\n        address assetClass,\r\n        address strategyManager\r\n    ) public onlyOwner(\"Factory - performSetUp not permitted\") {\r\n        _setUp(\r\n            serviceRate, \r\n            _minContribution, \r\n            setUpFee, \r\n            feeTo, \r\n            assetClass, \r\n            strategyManager\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Can be used to initialize and reinitialized state variables.\r\n     * @notice Only address with owner role can call. Check Ownable.sol to see \r\n     * how we manage ownership (different from OZ pattern). \r\n     * @param serviceRate : Platform fee\r\n     * @param _minContribution : Minimum acceptable unit in liquidity pool.\r\n     * @param setUpFee : Amount charged for setting up a liquidity pool.\r\n     * @param feeTo : Fee recipient.\r\n     * @param assetClass : Asset manager contract.\r\n     * @param strategyManager : Strategy manager contract.\r\n     */\r\n    function _setUp(\r\n        uint16 serviceRate,\r\n        uint _minContribution,\r\n        uint setUpFee,\r\n        address feeTo,\r\n        address assetClass,\r\n        address strategyManager\r\n    ) private {\r\n        minContribution = _minContribution;\r\n        data.pData = ContractData(feeTo, assetClass, serviceRate, strategyManager);\r\n        creationFee = setUpFee;\r\n    }\r\n\r\n    /**\r\n    @dev Launch a liquidity pool. Based on router, it could be permissioned or permissionless.\r\n      @param intRate : Rate of interest to charge on loans.\r\n      @param quorum: The Required number of contributors to form a band. \r\n      @param durationInHours: The maximum time limit (from when turn time begins) with which a contributor\r\n                            will take custody of the loan before repayment. Should be specified in hours.\r\n      @param colCoverage - Collateral factor - Collateral determinant for contributors to borrow.\r\n                            This is expressed as a multiplier index in the total loanable amount.\r\n      @param unitLiquidity - Unit contribution.\r\n      @param liquidAsset - Liquidity asset. This will often be an ERC20 compatible asset.\r\n      @param contributors : Array contributors addresses\r\n      @param router : We use this to determine which pool to launch. Router can either be permissioned\r\n                    or permissionless.\r\n        - asset must be supported by AssetClass.sol\r\n    */\r\n    function _createPool(\r\n        uint16 intRate,\r\n        uint8 quorum,\r\n        uint16 durationInHours,\r\n        uint24 colCoverage,\r\n        uint unitLiquidity,\r\n        address liquidAsset,\r\n        address[] memory contributors,\r\n        Router router\r\n    )\r\n        internal \r\n        whenNotPaused\r\n        onlySupportedAsset(liquidAsset)\r\n        returns (uint)\r\n    {\r\n        bool isPermissionless = router == Router.PERMISSIONLESS;\r\n        isPermissionless? require(quorum > 1, \"Router: Quorum is invalid\") : require(contributors.length > 1, \"Min of 2 members\");\r\n        CreatePoolParam memory cpp = \r\n            CreatePoolParam(\r\n                {\r\n                    intRate: intRate,\r\n                    quorum: quorum,\r\n                    duration: durationInHours,\r\n                    colCoverage: colCoverage, \r\n                    unitContribution: unitLiquidity,\r\n                    members: contributors,\r\n                    asset: liquidAsset\r\n                }\r\n            );\r\n        CreatePoolReturnValue memory crp = !isPermissionless ? data\r\n            .createPermissionedPool(\r\n                CreatePermissionedPoolParam(\r\n                    cpp, \r\n                    _unlockFunction\r\n                )\r\n            ) : data.createPermissionlessPool(cpp, _unlockFunction);\r\n        emit BandCreated(crp);\r\n        return crp.epochId;\r\n    }\r\n\r\n    /** @dev Return current epoch. \r\n     * This is also total epoches generated to date \r\n    */\r\n    function epoches() \r\n        external \r\n        view \r\n        returns(uint)\r\n    {\r\n        uint _epoches = data._getEpoches();\r\n        return _epoches == 0? 0 : _epoches - 1;\r\n    }\r\n\r\n    /**\r\n        *   @dev Updates minimum liquidity of a pool.\r\n        *   Note: Only Owner function.\r\n        *   @param minLiquidity : Minimum contribution.\r\n  */\r\n    function setMinimumLiquidityPerProvider(\r\n        uint256 minLiquidity\r\n    ) \r\n        public \r\n        onlyOwner(\"Factory - setMinimumLiquidityPerProvider not permitted\")\r\n    {\r\n        minContribution = minLiquidity;\r\n    }\r\n\r\n    /**@dev Add contributor.\r\n      @param epochId : Epoch id.\r\n      @param isPermissioned : Whether pool is permissioned or not\r\n   */\r\n    function _joinEpoch(\r\n        uint epochId,\r\n        bool isPermissioned\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        emit NewMemberAdded(\r\n            data.addToBand(\r\n                AddTobandParam(\r\n                    epochId,\r\n                    isPermissioned,\r\n                    _lockFunction,\r\n                    _unlockFunction\r\n                )\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /** @dev Providers borrow from their pool provided the citeria are met.\r\n        @param epochId : Epoh Id user wants to borrow from. \r\n        @notice Users can be members of multiple epoches. This enlarges the\r\n        volume of funds they can access. \r\n\r\n        - This is a payable function since borrowers are required to stake XFI\r\n        before they can access funds in epoches.\r\n        - The contract must be in a usable state i.e not paused.\r\n        - For the selected epoch, the getFinance() must already be unlocked. Unlocking \r\n        is automated soon as the required quorum for the epoch is achieved i.e the \r\n        numbers of providers equals the set quorum.\r\n        @param daysOfUseInHr : The time in hours the borrower wishes to retain the loan\r\n        before paying back.\r\n  */\r\n    function getFinance(\r\n        uint epochId,\r\n        uint8 daysOfUseInHr\r\n    )\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        validateEpochId(epochId)\r\n        checkFunctionPass(epochId, FuncTag.GET)\r\n        returns (bool)\r\n    {\r\n        emit GetFinanced(\r\n            data.getFinance(\r\n                epochId, \r\n                msg.value,\r\n                daysOfUseInHr,\r\n                _lockFunction, \r\n                _unlockFunction, \r\n                _getXFIPriceInUSD\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Return borrowed fund.\r\n      @param epochId : Pool number.\r\n     See FactoryLib.payback().\r\n   */\r\n    function payback(\r\n        uint epochId\r\n    )\r\n        external\r\n        whenNotPaused\r\n        validateEpochId(epochId)\r\n        checkFunctionPass(epochId, FuncTag.PAYBACK)\r\n        returns (bool)\r\n    {\r\n        emit Payback(\r\n            data.payback(\r\n                PaybackParam(\r\n                    epochId,\r\n                    _msgSender(),\r\n                    _lockFunction,\r\n                    _unlockFunction\r\n                ),\r\n                _setPermit\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n  @dev Liquidate defaulter.\r\n    Note: The expected repayment time for last paid contributor must have passed.\r\n    See FactoryLib.liquidate() for more details.\r\n    @param epochId : Epoch Id\r\n  */\r\n    function liquidate(\r\n        uint epochId\r\n    ) \r\n        external \r\n        whenNotPaused \r\n        validateEpochId(epochId)\r\n        returns (bool) \r\n    {\r\n        emit Liquidated(\r\n            data.liquidate(\r\n                LiquidateParam(\r\n                    epochId,\r\n                    _lockFunction,\r\n                    _unlockFunction\r\n                ),\r\n                _setPermit\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See FactoryLib.enquireLiquidation\r\n     */\r\n    function enquireLiquidation(\r\n        uint epochId\r\n    ) \r\n        external\r\n        view \r\n        validateEpochId(epochId)\r\n        returns (Contributor memory, bool, uint) \r\n    {\r\n        return data._enquireLiquidation(epochId);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws Collateral balance if any\r\n     * @param epochId : Epoch Id\r\n     */\r\n    function withdrawCollateral(uint epochId)\r\n        external\r\n        validateEpochId(epochId)\r\n        checkFunctionPass(epochId, FuncTag.WITHDRAW)\r\n        returns(bool)\r\n    {\r\n        data._withdrawCollateral(epochId);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns collaterl quote for the epoch.\r\n     * @param epochId : EpochId\r\n     * @return collateral Collateral\r\n     * @return colCoverage Collateral coverage\r\n     */\r\n    function getCollaterlQuote(\r\n        uint epochId\r\n    )\r\n        external\r\n        view\r\n        validateEpochId(epochId)\r\n        returns(uint collateral, uint24 colCoverage)\r\n    {\r\n        Pool memory pool = data._fetchPoolData(epochId);\r\n        (collateral, colCoverage) = (FactoryLib._computeCollateral(\r\n            pool.uint256s.currentPool,\r\n            0,\r\n            uint24(pool.uints.colCoverage),\r\n            _getXFIPriceInUSD()\r\n        ), uint24(pool.uints.colCoverage));\r\n        return (collateral, colCoverage);\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the current debt of target user.\r\n     * @param epochId : Epoch Id\r\n     * @param target : Target user.\r\n     */\r\n    function getCurrentDebt(\r\n        uint epochId,\r\n        address target\r\n    ) \r\n        external\r\n        view \r\n        validateEpochId(epochId)\r\n        returns (uint) \r\n    {\r\n        return data._getCurrentDebt(epochId, target);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the profile of user\r\n     * @param epochId : Epoch Id\r\n     * @param user : User\r\n     */\r\n    function getProfile(\r\n        uint epochId,\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns(ContributorData memory) \r\n    {\r\n        return data._getProfile(epochId, user);\r\n    }\r\n\r\n    /**\r\n     * @dev Set state variables.\r\n     * @param feeTo : Fee receiver.\r\n     * @param assetAdmin : AssetAdmin contract.\r\n     * @param serviceRate : fee in %.\r\n     * - Only-owner function.\r\n     */\r\n    function setContractData(\r\n        address feeTo,\r\n        address assetAdmin,\r\n        uint16 serviceRate,\r\n        uint256 _creationFee\r\n    ) \r\n        public\r\n        onlyOwner(\"Factory - setContractData not permitted\")\r\n        returns(bool)\r\n    {\r\n        if(creationFee == 0) {\r\n            creationFee = _creationFee;\r\n        }\r\n        return data.setContractData(assetAdmin, feeTo, serviceRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns both ERC20 and Native balances locked in an epoch\r\n     * @param epochId : Epoch Id\r\n     */\r\n    function getBalances(\r\n        uint epochId\r\n    )   \r\n        external\r\n        view\r\n        validateEpochId(epochId)\r\n        returns(Balances memory)\r\n    {\r\n        return data._getBalancesOfStrategy(epochId);\r\n    }\r\n\r\n    /**\r\n     * @dev See FactoryLib._cancelBand()\r\n     */\r\n    function _removeLiquidityPool(\r\n        uint epochId,\r\n        bool isPermissionLess\r\n    ) \r\n        internal \r\n        whenNotPaused \r\n        validateEpochId(epochId)\r\n        returns (bool)\r\n    {\r\n        data.cancelBand(\r\n            epochId, \r\n            isPermissionLess, \r\n            _setPermit, \r\n            _lockFunction\r\n        );\r\n        emit Cancellation(epochId);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a single pool for 'epochId'\r\n     * @param epochId : Epoch id.\r\n     */\r\n    function getPoolData(\r\n        uint epochId\r\n    ) \r\n        external \r\n        view \r\n        validateEpochId(epochId)\r\n        returns(Pool memory) \r\n    {\r\n        return data._fetchPoolData(epochId);\r\n    }\r\n\r\n    /**@dev Returns pool from all epoched array */\r\n    function getPoolFromAllEpoches() \r\n        public\r\n        view \r\n        returns(Pool[] memory pools) \r\n    {\r\n        return data.fetchPools();\r\n    }\r\n\r\n    function getContractData()\r\n        public\r\n        view\r\n        returns(ContractData memory result)\r\n    {\r\n        result = data.pData; \r\n    }\r\n    \r\n    /**\r\n     * @dev Get price of SIMT in USD.\r\n     * @notice from price oracle\r\n     * Assuming the price of XFI is 0.5$\r\n     */\r\n    function _getXFIPriceInUSD() \r\n        internal \r\n        pure \r\n        returns (uint _price) \r\n    {\r\n        _price = 500000000000000000; // ================================================> We use oracle here\r\n    }\r\n}"
    },
    "contracts/abstracts/OnlyOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { MsgSender, OwnerShip } from \"../implementations/OwnerShip.sol\";\r\nimport { IOwnerShip } from \"../apis/IOwnerShip.sol\";\r\n\r\nabstract contract OnlyOwner is MsgSender {\r\n    address public ownershipManager;\r\n\r\n    constructor(address _ownershipManager)\r\n    {\r\n        _setOwnershipManager(_ownershipManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Caller must have owner role before execeution can proceed.\r\n     * The 'errorMessage' argument can be used to return error specific to \r\n     * a context e.g function call. \r\n     * @param errorMessage : Custom error message\r\n     */\r\n    modifier onlyOwner(string memory errorMessage) {\r\n        address mgr = ownershipManager;\r\n        require(mgr != address(0), \"OnlyOwner: Manager not set\");\r\n        require(IOwnerShip(mgr).isOwner(_msgSender()), errorMessage);\r\n        _;\r\n    }\r\n\r\n    function _setOwnershipManager(\r\n        address newManager\r\n    )\r\n        private\r\n    {\r\n        ownershipManager = newManager;\r\n    }\r\n\r\n    /**\r\n     * Set Ownership manager\r\n     * @param newManager : New manager address\r\n     */\r\n    function setOwnershipManager(\r\n        address newManager\r\n    )\r\n        public\r\n        onlyOwner(\"OnlyOwner: Not permitted\")\r\n        returns(bool)\r\n    {\r\n        _setOwnershipManager(newManager);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/abstracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner } from \"./OnlyOwner.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n * \r\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\r\n * Thanks to the OZ team.\r\n */\r\nabstract contract Pausable is OnlyOwner {\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is paused.\r\n     */\r\n    error EnforcedPause();\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is not paused.\r\n     */\r\n    error ExpectedPause();\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor(\r\n        address _ownershipManager\r\n    ) OnlyOwner(_ownershipManager) {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     * Only owner role can call.\r\n     * - The contract must not be paused.\r\n     */\r\n    function pause() \r\n        public \r\n        onlyOwner(\"Pausable: OnlyOwner can pause\") \r\n        whenNotPaused \r\n    {\r\n        _paused = true; \r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     * - Only owner role can call.\r\n     * - The contract must be paused.\r\n     */\r\n    function unpause() \r\n        public \r\n        onlyOwner(\"Pausable: OnlyOwner can unpause\") \r\n        whenPaused \r\n    {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/apis/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ninterface Common {\r\n  /**\r\n   * @dev Tags/Placeholders for functions available in the implementation contract.\r\n   */\r\n  enum FuncTag { \r\n    JOIN, \r\n    GET, \r\n    PAYBACK, \r\n    WITHDRAW\r\n  }\r\n\r\n  enum TransactionType { NATIVE, ERC20 }\r\n\r\n  /**\r\n   *  @dev Data for each pool. \r\n   *    Note: We use the term `allGh` to denote when every participant in a \r\n   *    group had get financed.\r\n   *  @param isMember : Whether user is a member or not\r\n   *  @param isAdmin: Whether user is an admin or not i.e the initiator.\r\n   *  @param payDate: The data in future on which the borrowed fund must be retured\r\n   *  @param turnTime : This is a period or interval between the last received and the next.\r\n   *  @param owings: Total debts owed by the last fund recipient.\r\n   *  @param colBals: Collateral balances of the last recipient.\r\n   *  @param hasGH : Whether an user/current msg.sender has received or not.\r\n   *  @param id : Address of the last recipient.  \r\n   */\r\n  struct Contributor {\r\n    uint durOfChoice;\r\n    uint expInterest;\r\n    uint payDate;\r\n    uint turnTime;\r\n    uint loan;\r\n    uint colBals;\r\n    // bool hasGH;\r\n    address id;\r\n  }\r\n\r\n  struct Rank {\r\n    bool admin;\r\n    bool member;\r\n  }\r\n\r\n  /**\r\n   *  @dev Pool data\r\n   *  @param uints : Structured data of all unsigned integers type uint8.\r\n   *  @param uint256s: Structured data of all unsigned integers type uint256.\r\n   *  @param addrs : Structured data of all address type\r\n   *  @param allGh : Total members already got financed.\r\n   */\r\n  struct Pool {\r\n    Uints uints;\r\n    Uint256s uint256s;\r\n    Addresses addrs;\r\n    uint allGh;\r\n  }\r\n\r\n  /**\r\n    @dev Structured data types to convey parameters to avoid Stack too deep error.\r\n    @param quorum : The maximum number of users that can form a contribution group.\r\n    @param duration : The number of days the contribution contract will expires. It should be \r\n                      specified in hour.\r\n    @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \r\n                  in order to be able to get financed. This should be specified in percentage i.e \r\n                  if raw ccr is 1.2 , actual ccr should be 1.2 * 100 = 120. It is pertinent to be\r\n                  mindful how this works in our protocol. Even if ccr is 1 indicating that contributor\r\n                  must hold at least 100% of collateral in their wallet before they can GF, it must \r\n                  be rendered in input section as 1 * 100. 100 is the minimum admins of bands\r\n                  can give as collateral coverage ratio.\r\n    @param value : The total value of pooled fund.\r\n    @param members : List of members in a group.\r\n    @param intRate : The rate of interest to charge for the duration of use of the fund.\r\n    @param asset : The contract address of an approved assets in this group. \r\n                    @notice The pooled asset of this group is denominated in this currency. \r\n  */\r\n  struct CreatePoolParam {\r\n    uint16 intRate;\r\n    uint8 quorum;\r\n    uint16 duration;\r\n    uint24 colCoverage; \r\n    uint unitContribution;\r\n    address[] members;\r\n    address asset;\r\n  }\r\n\r\n  /**\r\n   *  @notice Structured types - uint256\r\n   *  @param unit : Unit contribution.\r\n   *  @param currentPool : Total contributed to date.\r\n   */\r\n  struct Uint256s {\r\n    uint fullInterest;\r\n    uint intPerSec;\r\n    uint256 unit;\r\n    uint256 currentPool;\r\n  }\r\n\r\n  /**\r\n   *  @notice Structured types - unit less than uint124\r\n   *  @param intRate : Rate of interest per duration. \r\n   *  @param quorum : The maximum number of users that can form a contribution group.\r\n   *  @param selector : This is like the hand or ticker of a clock that is used to select\r\n   *                    the next contributor to get finance.\r\n   *  @param colCoverage : Collateral Coverate Ratio : The ratio of collateral a member must hold \r\n                  in order to be able to get financed.\r\n      @param duration : The number of days the contribution contract will expires.\r\n   */\r\n  struct Uints {\r\n    uint quorum;\r\n    uint selector;\r\n    uint colCoverage;\r\n    uint duration;\r\n    uint intRate;\r\n  }\r\n  \r\n  /**\r\n   * @notice Structured types - Address\r\n   * @param asset : Contract address of the asset in use.\r\n   * @param lastPaid: Last contributor who got finance.\r\n   * @param strategy : Strategy for each pool or epoch. See Strategy.sol for more details.\r\n   * @param admin : Pool creator.\r\n   * \r\n   */\r\n  struct Addresses {\r\n    address asset;\r\n    address lastPaid;\r\n    address strategy;\r\n    address admin;\r\n  }\r\n\r\n  struct LiquidateParam {\r\n    uint epochId;\r\n    function (uint, FuncTag) internal lock;\r\n    function (uint, FuncTag) internal unlock;\r\n  }\r\n  \r\n  struct AddTobandParam {\r\n    uint epochId;\r\n    bool isPermissioned;\r\n    function (uint, FuncTag) internal lock;\r\n    function (uint, FuncTag) internal unlock;\r\n  }\r\n\r\n  struct CreatePoolReturnValue {\r\n    Pool pool; \r\n    Contributor contributor; \r\n    uint epochId;\r\n    uint16 spot;\r\n  }\r\n\r\n  struct PaybackParam {\r\n    uint epochId;\r\n    address user;\r\n    function (uint, FuncTag) internal lock;\r\n    function (uint, FuncTag) internal unlock;\r\n  }\r\n\r\n  struct UpdateMemberDataParam {\r\n    uint24 durOfChoice;\r\n    address expected;\r\n    uint epochId; \r\n    uint fee;\r\n    uint msgValue;\r\n    uint xfiUSDPriceInDecimals;\r\n    Pool pool;\r\n  }\r\n\r\n  struct CreatePermissionedPoolParam {\r\n    CreatePoolParam cpp;\r\n    function (uint, FuncTag) internal _unlock;\r\n  }\r\n\r\n  struct InterestReturn {\r\n    uint fullInterest;\r\n    uint intPerSec;\r\n    uint intPerChoiceOfDur;\r\n  }\r\n\r\n  struct CommonEventData {\r\n    uint8 slot;\r\n    Rank rank;\r\n    Contributor cbData;\r\n    Pool pool;\r\n  }\r\n\r\n  struct ContributorData {\r\n    Contributor cData;\r\n    Rank rank;\r\n    uint8 slot;\r\n  }\r\n\r\n  struct Balances {\r\n    uint xfi;\r\n    uint erc20;\r\n  }\r\n\r\n  error UpdateStrategyError();\r\n  error CollateralCoverageCannotGoBelow_100(uint24 ccr);\r\n\r\n}"
    },
    "contracts/apis/IAssetClass.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\ninterface IAssetClass {\r\n  error UnSupportedAsset(address);\r\n  error Locked();\r\n  \r\n  function isSupportedAsset(\r\n    address _asset\r\n  ) \r\n    external \r\n    view returns(bool);\r\n}"
    },
    "contracts/apis/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport \"./IERC20Metadata.sol\";\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 is IERC20Metadata{\r\n    error NotCallable();\r\n    error AddressIsZero(address);\r\n    error NoPreviousLockDetected();\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    /** \r\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event for each transfer.\r\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \r\n                RELATIVE TO THE ACCOUNTS ARRAY\r\n     */\r\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    /**@dev Locks specific amount of JFT to the private ledger.\r\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\r\n        param: amount - Amount to lock.\r\n    */\r\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\r\n\r\n    /**@dev Moves an 'amount' from private ledger to regular balances.\r\n        @param amount - Amount to unlock.\r\n        Note: If the lock duration was set, holder will not be able to unlock until the \r\n            set time has passed else they can withdraw to regular balance anytime.\r\n     */\r\n    function unlockToken(uint amount) external returns(bool);\r\n\r\n    /** @dev Returns seperate balances of @param who\r\n        return value will be in struct format having two values\r\n     */\r\n    function accountBalances(address who) external view returns(Balances memory);\r\n   \r\n    // /**@dev Return JFT's Metadata including the information of `who`\r\n    //  */\r\n    // function getInfo(address who) external view returns(Protected memory);\r\n\r\n    /**\r\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\r\n     * It should only be called when JFT holder has lost access to their account and they had \r\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\r\n     * provided at the time the lock was activated.\r\n     * \r\n     * Note: Attorney charges a fee for doing this. \r\n     * @param account : Account that owns this token.\r\n     */\r\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\r\n\r\n    struct Protected {\r\n        uint256 value; // Total value currently locked\r\n        address escapeTo;\r\n    }\r\n\r\n    struct Balances {\r\n        uint256 spendable;\r\n        Protected locked;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        uint8 decimals;\r\n        uint256 totalSupply;\r\n        string name;\r\n        string symbol;\r\n        address attorney;\r\n        // address rewarder;\r\n    }\r\n}\r\n"
    },
    "contracts/apis/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/apis/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Common } from \"./Common.sol\";\r\n\r\ninterface IFactory is Common {\r\n  error InsufficientFund();\r\n  error AllMemberIsPaid();\r\n  error QuorumIsInvalid();\r\n  error OwnershipManagerIsNotSet();\r\n\r\n  event BandCreated(CreatePoolReturnValue);\r\n  event NewMemberAdded(CommonEventData);\r\n  event GetFinanced(CommonEventData);\r\n  event Payback(CommonEventData);\r\n  event Liquidated(CommonEventData);\r\n  event Cancellation(uint epochId);\r\n\r\n  event RoundUp(uint, Pool);\r\n  event Rekeyed(address indexed, address indexed);\r\n\r\n  enum Router { PERMISSIONLESS, PERMISSIONED }\r\n\r\n  // function getRouterWithPoolId(\r\n  //   uint epochId\r\n  // ) \r\n  //   external \r\n  //   view \r\n  //   returns(string memory);\r\n  \r\n  function epoches() \r\n    external \r\n    view \r\n    returns(uint);\r\n\r\n  function createPermissionlessPool(\r\n    uint16 intRate,\r\n    uint8 quorum,\r\n    uint16 durationInHours,\r\n    uint24 colCoverage,\r\n    uint unitLiquidity,\r\n    address liquidAsset\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function createPermissionedPool(\r\n    uint16 intRate,\r\n    uint16 durationInHours,\r\n    uint24 colCoverage,\r\n    uint unitLiquidity,\r\n    address liquidAsset,\r\n    address[] memory contributors\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function payback(\r\n    uint epochId\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function joinAPool(\r\n    uint epochId\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function liquidate(\r\n    uint epochId\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function removeLiquidityPool(\r\n    uint epochId\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function getFinance(\r\n    uint epochId,\r\n    uint8 daysOfUseInHr\r\n  ) \r\n    external \r\n    payable returns(bool);\r\n\r\n  function getPoolData(\r\n    uint epochId\r\n  ) \r\n    external \r\n    view returns(Pool memory);\r\n\r\n  function enquireLiquidation(\r\n    uint epochId\r\n  ) \r\n    external \r\n    view \r\n    returns(Contributor memory prof, bool defaulted, uint debtToDate); \r\n  \r\n  function getCurrentDebt(\r\n    uint epochId,\r\n    address target\r\n  ) \r\n    external \r\n    view \r\n    returns(uint debtToDate); \r\n\r\n  function getProfile(\r\n    uint epochId,\r\n    address user\r\n  )\r\n    external\r\n    view\r\n    returns(ContributorData memory);\r\n        \r\n  function getBalances(\r\n    uint epochId\r\n  )   \r\n    external\r\n    view\r\n    returns(Balances memory);\r\n\r\n  function withdrawCollateral(\r\n    uint epochId\r\n  )\r\n    external\r\n    returns(bool);\r\n \r\n  struct ContractData {\r\n    address feeTo;\r\n    address assetAdmin;\r\n    uint16 makerRate;\r\n    address strategyManager;\r\n  }\r\n}\r\n"
    },
    "contracts/apis/IOwnerShip.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @title IOwnerShip \r\n * Interface of the OwnerShip contract\r\n * @author Simplifi (Bobeu)\r\n */\r\ninterface IOwnerShip {\r\n    function setPermission(\r\n        address[] memory newOwners\r\n    ) \r\n        external\r\n        returns(bool);\r\n\r\n    function removeOwner(\r\n        address target\r\n    ) \r\n        external\r\n        returns(bool);\r\n\r\n    function renounceOwnerShip() \r\n        external\r\n        returns(bool);\r\n\r\n    function getOwner(\r\n        uint ownerId\r\n    ) \r\n        external \r\n        view \r\n        returns(address);\r\n\r\n    function isOwner(\r\n        address target\r\n    )\r\n        external\r\n        view \r\n        returns(bool);\r\n}"
    },
    "contracts/apis/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Common } from \"./Common.sol\";\r\n\r\ninterface IStrategy {\r\n  error ContractBalanceTooLow();\r\n  error InsufficientNativeBalanceInContract(uint);\r\n  error InsufficientCredit(uint, uint);\r\n  \r\n  /**\r\n   * @dev Add contributor to the list\r\n   * @param user : Contributor address\r\n   * @param epochId : Epoch Id\r\n   */\r\n  function addUp(\r\n    address user,\r\n    uint epochId\r\n  ) \r\n    external\r\n    returns(bool);\r\n\r\n  /**\r\n   * @dev Map assetInUse to epoch Id in Strategy.\r\n   * @param epochId: Epoch Id otherwise known as pool Id.\r\n   * @param assetInUse: Contract address of the ERC20 token the contribution is based on.\r\n   * @return success\r\n   */\r\n  function mapAsset(\r\n    uint epochId, \r\n    address assetInUse\r\n  ) \r\n    external \r\n    returns(bool success);\r\n\r\n  /**\r\n   * @dev Utility to activate claim for a contributor.\r\n   * @param epochId: Epoch Id otherwise known as pool Id.\r\n   * @param claim: withdrawable amount.\r\n   * @param fee: Amount charged as fee.\r\n   * @param user: User address.\r\n   * @param feeTo: Fee receiver.\r\n   * @param txType : The type of transaction to perform in the call.\r\n   *                Can be either ERC20 or native transaction.\r\n  *  @param allHasGF : A boolean flag indicating whether the epoch should end or not.\r\n   * @return actualClaim\r\n   */\r\n  function setClaim(\r\n    uint claim,\r\n    uint fee,\r\n    uint credit,\r\n    uint epochId,\r\n    address user,\r\n    address feeTo,\r\n    bool allHasGF,\r\n    Common.TransactionType txType\r\n  ) \r\n    external\r\n    payable\r\n    returns(uint actualClaim);\r\n\r\n  function swapProvider(\r\n    uint epochId, \r\n    address newProv, \r\n    address oldProv\r\n  ) \r\n    external \r\n    returns(bool);\r\n\r\n  function withdraw(\r\n    uint epochId,\r\n    address user\r\n  )\r\n    external\r\n    returns(bool);\r\n}"
    },
    "contracts/apis/IStrategyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @title Interface of the Strateg manager\r\n * @author : Simplifinance\r\n */\r\ninterface IStrategyManager {\r\n  error ZeroAddress(address);\r\n  \r\n  /**\r\n   * Query strategy for user\r\n   * @param user : Address to get strategy for\r\n   * @return A strategy if none was found, it returns address(0).\r\n   */\r\n  function getStrategy(address user) external view returns(address);\r\n\r\n/**\r\n * Clones and return a new strategy\r\n * @param user : Target address for whom to create strategy\r\n */\r\n  function createStrategy(address user) external returns(address strategy);\r\n\r\n  /**\r\n   * Strategy struct map\r\n   * key: user address { EOA }\r\n   * value: Strategy { Contract } \r\n   */\r\n  struct StrategyData {\r\n    address key;\r\n    address value;\r\n  }\r\n  \r\n}"
    },
    "contracts/implementations/AssetClass.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner } from \"../abstracts/OnlyOwner.sol\";\r\nimport { IAssetClass } from \"../apis/IAssetClass.sol\"; \r\n\r\ncontract AssetClass is IAssetClass, OnlyOwner {\r\n  address[] private assets;\r\n\r\n  /**\r\n   * @dev Mapping assets address to bool i.e Assets must be contract account\r\n   * and must be supported\r\n   */\r\n  mapping(address => bool) private supportedAssets;\r\n\r\n  mapping(address => bool) public listed;\r\n\r\n  /**\r\n   * @dev Asset must be supported before they can be used.\r\n   */\r\n  modifier onlySupportedAsset(address _asset) {\r\n    if(!supportedAssets[_asset]) revert UnSupportedAsset(_asset);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Initialize state variables\r\n   * @param _asset : Initial supported asset\r\n   */\r\n  constructor(\r\n    address _asset,\r\n    address _ownershipMgr\r\n  ) \r\n    OnlyOwner(_ownershipMgr) \r\n  {\r\n    require(_asset != address(0), \"Asset cannot be empty\");\r\n    _supportAsset(_asset);\r\n  }\r\n\r\n  // fallback(bytes calldata data) external returns(bytes memory) {\r\n  //   return \"Function not found\";\r\n  // }\r\n\r\n  /**\r\n   * @dev Support a new asset\r\n   * Note: OnlyOwner action\r\n   * @param _asset : Asset to add to list of supported asset\r\n   */\r\n  function supportAsset(\r\n    address _asset\r\n  ) \r\n    public \r\n    onlyOwner(\"AssetClass - supportAsset: Not permitted\")\r\n  {\r\n    _supportAsset(_asset); \r\n  }\r\n\r\n  function _supportAsset(address _asset) private {\r\n    \r\n    if(!listed[_asset]){\r\n      listed[_asset] = true;\r\n      assets.push(_asset);\r\n    }\r\n    if(!_isAssetSupported(_asset)){\r\n      supportedAssets[_asset] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Unsupports an asset\r\n   * Note: Only-owner action\r\n   * @param newAsset : Removes an asset from the list of supported asset\r\n   */\r\n  function unsupportAsset(\r\n    address newAsset\r\n  ) \r\n    public \r\n    onlyOwner(\"AssetClass - unsupportAsset: Not permitted\")\r\n  {\r\n    supportedAssets[newAsset] = false;\r\n  }\r\n\r\n  function _isAssetSupported(address _asset) internal view returns(bool) {\r\n    return supportedAssets[_asset];\r\n  }\r\n\r\n  /**\r\n   * @dev Check if an asset is supported\r\n   */\r\n  function isSupportedAsset(address _asset) public override view returns(bool) {\r\n    return _isAssetSupported(_asset);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a list of supported assets\r\n   */\r\n  function getSupportedAssets() public view returns(address[] memory _assets) {\r\n    _assets = assets;\r\n    return _assets;\r\n  }\r\n\r\n}"
    },
    "contracts/implementations/Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { AbstractFactory } from \"../abstracts/AbstractFactory.sol\";\r\n\r\n/** @title Factory : Main contract\r\n *  @author Simplifinance - (Bobeu) \r\n *  @notice \r\n *  A multi p2p lending and borrowing structure where liquidity providers are borrowers. We bring together users form different \r\n * parts of the world to form a liquidity synergy, where the pooled fund moved round them from the first to the last on the list\r\n * in form of borrowed fund.The permissionless model allows users to create liquidity pool for anyone to participate while the \r\n * permissioned structure restricts participation only to the known members known as band.\r\n*/\r\n\r\ncontract Factory is AbstractFactory {\r\n    mapping(uint => Router) public routers;\r\n\r\n  /** @dev Initializes state variables.\r\n    * @param serviceRate : Platform fee in %\r\n    * @param minContribution : Minimum contribution amount.\r\n    * @param setUpFee : Amount to charge for setting a liquidity pool.\r\n    * @param feeTo : Account to receive fees.\r\n    * @param assetClass : Asset manager contract.\r\n    * @param strategyManager : Strategy manager contract.\r\n    * @param ownerShipManager : Accessibility manager contract\r\n    */\r\n    constructor(\r\n        uint16 serviceRate,\r\n        uint minContribution,\r\n        uint setUpFee,\r\n        address feeTo,\r\n        address assetClass,\r\n        address strategyManager,\r\n        address ownerShipManager\r\n    ) AbstractFactory(\r\n        serviceRate,\r\n        minContribution,\r\n        setUpFee,\r\n        feeTo,\r\n        assetClass,\r\n        strategyManager,\r\n        ownerShipManager\r\n    ) { }\r\n\r\n    /**@dev Create permissioned pool\r\n        See AbstractFactory.sol \r\n     */\r\n    function createPermissionedPool(\r\n        uint16 intRate,\r\n        uint16 durationInHours,\r\n        uint24 colCoverage,\r\n        uint unitLiquidity,\r\n        address liquidAsset,\r\n        address[] memory contributors\r\n    ) \r\n        external \r\n        returns(bool) \r\n    {\r\n        Router router = Router.PERMISSIONED;\r\n        uint quorum = contributors.length;\r\n        routers[\r\n            _createPool(\r\n                intRate,\r\n                uint8(quorum),\r\n                durationInHours,\r\n                colCoverage,\r\n                unitLiquidity,\r\n                liquidAsset,\r\n                contributors,\r\n                router\r\n            )\r\n        ] = router;\r\n        return true;\r\n    }\r\n\r\n    /**@dev Create permissionless\r\n        See AbstractFactory.sol\r\n    */\r\n    function createPermissionlessPool(\r\n        uint16 intRate,\r\n        uint8 quorum,\r\n        uint16 durationInHours,\r\n        uint24 colCoverage,\r\n        uint unitLiquidity,\r\n        address liquidAsset\r\n    ) \r\n        external \r\n        returns(bool) \r\n    {\r\n        Router _router = Router.PERMISSIONLESS;\r\n        address[] memory contributors = new address[](1);\r\n        contributors[0] = _msgSender();\r\n        routers[\r\n            _createPool(\r\n                intRate,\r\n                quorum,\r\n                durationInHours,\r\n                colCoverage,\r\n                unitLiquidity,\r\n                liquidAsset,\r\n                contributors,\r\n                _router\r\n            )\r\n        ] = _router;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove liquidity pool\r\n     * @param epochId : Epoch/Poool id\r\n     */\r\n    function removeLiquidityPool(\r\n        uint epochId\r\n    )\r\n        external\r\n        validateEpochId(epochId)\r\n        returns(bool)\r\n    {\r\n        _removeLiquidityPool(epochId, routers[epochId] == Router.PERMISSIONLESS);\r\n        return true;\r\n    }\r\n    \r\n    /**@dev See AbstractFactory.sol */\r\n    function joinAPool(\r\n        uint epochId\r\n    ) \r\n        external \r\n        whenNotPaused\r\n        validateEpochId(epochId)\r\n        checkFunctionPass(epochId, FuncTag.JOIN) \r\n        returns(bool) \r\n    {\r\n        return _joinEpoch(epochId, routers[epochId] == Router.PERMISSIONED);\r\n    }\r\n\r\n    /**@dev Return the router for an epochId. \r\n    */\r\n    function getRouter(\r\n        uint epochId\r\n    ) \r\n        external \r\n        view \r\n        validateEpochId(epochId)\r\n        returns(string memory) \r\n    {\r\n        return routers[epochId] == Router.PERMISSIONLESS ? \"PERMISSIONLESS\" : \"PERMISSIONED\";\r\n    }\r\n\r\n}"
    },
    "contracts/implementations/OwnerShip.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IOwnerShip } from \"../apis/IOwnerShip.sol\";\r\n/**\r\n * @title MsgSender \r\n * @author Simplifi (Bobeu)\r\n * @notice Non-deployable contract simply returning the calling account.\r\n */\r\nabstract contract MsgSender {\r\n    function _msgSender() internal view returns(address sender) {\r\n        sender = msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @title OwnerShip \r\n * @author Simplifi (Bobeu)\r\n * @notice Standalone contract for managing ownership in Simplifi protocol.\r\n */\r\ncontract OwnerShip is IOwnerShip, MsgSender{\r\n    /**\r\n     * @notice Number of owners.\r\n     */\r\n    uint public ownersCount;\r\n\r\n    /**\r\n     * @notice Addresses with ownership permission.\r\n     */\r\n    \r\n    mapping (address => bool) private _isOwner;\r\n\r\n    /**\r\n     * @notice Mapping of ownersCount to addresses.\r\n     * A valid id will return a mapped owner.\r\n     */\r\n    mapping (uint => address) public owners;\r\n\r\n    /**\r\n     * @dev Only owner is allowed.\r\n     */\r\n    modifier onlyOwner {\r\n        require(_isOwner[_msgSender()], \"Oop! Caller is not recognized\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender(), true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns owner variable.\r\n     */\r\n    function _getOwner(uint ownerId) \r\n        internal \r\n        view \r\n        returns(address _owner) \r\n    {\r\n        _owner = owners[ownerId];\r\n    }\r\n\r\n    /**\r\n     * @dev Add or remove target address as owner.\r\n     * @param target: Target address.\r\n     * @notice 'target' parameter must not be empty.\r\n     */\r\n    function _setOwner(\r\n        address target,\r\n        bool add\r\n    ) \r\n        private \r\n    {\r\n        require(target != address(0), \"Simplifi OwnerShip: 'target' parameter is empty\");\r\n        add? (_isOwner[target] = true, ownersCount ++) : (_isOwner[target] = false, ownersCount --);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new owner address\r\n     * @param newOwners: New owners\r\n     * @notice Only address with owner permission can add another owner.\r\n     */\r\n    function setPermission(\r\n        address[] memory newOwners\r\n    ) \r\n        external\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        bool rt = true;\r\n        for(uint r = 0; r < newOwners.length; r++) {\r\n            _setOwner(newOwners[r], rt);\r\n        }\r\n        return rt;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an address as owner.\r\n     * @param target: Target address\r\n     * @notice Only address with owner permission can remove another owner.\r\n     */\r\n    function removeOwner(\r\n        address target\r\n    ) \r\n        external\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        _setOwner(target, false);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev An owner can renounce their ownership. This however will not leave the\r\n     * contract empty without an owner. There must be at least one owner left.\r\n     * @notice Only address with owner permission can renounce ownership.\r\n     */\r\n    function renounceOwnerShip() \r\n        external\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        require(ownersCount > 1, \"At least 2 owners is required to leave\"); \r\n        _setOwner(_msgSender(), false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns owner variable.\r\n     * Can be called externally by contracts.\r\n     * @param ownerId : Owner Id. \r\n     */\r\n    function getOwner(\r\n        uint ownerId\r\n    ) \r\n        external \r\n        view \r\n        returns(address) \r\n    {\r\n        return _getOwner(ownerId);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if target is an owner.\r\n     * @param target : Target address.\r\n     */\r\n    function isOwner(\r\n        address target\r\n    )\r\n        external\r\n        view \r\n        returns(bool) \r\n    {\r\n        return _isOwner[target];\r\n    }\r\n}"
    },
    "contracts/implementations/strategies/Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { SafeMath } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\";\r\nimport { SafeCallERC20, IERC20 } from \"../../libraries/SafeCallERC20.sol\";\r\nimport { IStrategy } from \"../../apis/IStrategy.sol\";\r\nimport { Common } from \"../../apis/Common.sol\";\r\nimport { OnlyOwner } from \"../../abstracts/OnlyOwner.sol\";\r\n\r\ncontract Strategy is IStrategy, OnlyOwner {\r\n  using SafeMath for uint;\r\n\r\n  /**\r\n   * @dev Approvals in native coin i.e XFI \r\n   * mapping of providera to balances.\r\n   */\r\n  mapping(address => mapping (uint => uint)) private nativeApprovals;\r\n\r\n  /**\r\n   * @dev mapping of epoch Id to assets.\r\n   * Each epoch might use different asset as constribution base i.e\r\n   * A band creator might want to contribute in USDT while another \r\n   * might choose USDC. The base point is that any asset in use must\r\n   * conform to ERC20 standard.\r\n   */\r\n  mapping (uint => address) public assets;\r\n\r\n  /**\r\n   * @notice Mapping of epoches to list of contributors.\r\n   */\r\n  mapping (uint => address[]) public contributors;\r\n\r\n  /**\r\n   * @notice Every loan repayment is recorded here\r\n   * Mapping of epochId to credit balances.\r\n   * Using this method to track amortization records will enables us \r\n   * to properly account for loans and interests payments from all \r\n   * contributors in an epoch. \r\n   */\r\n  mapping (uint => uint) public credits;\r\n\r\n  /**\r\n   * @dev Initializes state variables.\r\n   * OnlyOwner function.\r\n   */\r\n  constructor (address _ownershipManager) OnlyOwner(_ownershipManager)  {}\r\n\r\n  receive() external payable onlyOwner(\"Strategy: Not receive() - Not permitted\") {}\r\n\r\n  /**\r\n   * @dev Implementation of IStrategy.addUp\r\n   * See IStrategy.addUp for doc\r\n  */\r\n  function addUp(\r\n    address user,\r\n    uint epochId\r\n  ) \r\n    external\r\n    onlyOwner(\"Strategy - addUp: Not permitted\")\r\n    returns(bool)\r\n  {\r\n    contributors[epochId].push(user);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Implementation of IStrategy.mapAsset\r\n   * See IStrategy.mapAsset for doc\r\n   */\r\n  function mapAsset(\r\n    uint epochId, \r\n    address assetInUse\r\n  ) \r\n    external\r\n    onlyOwner(\"Strategy - mapAsset: Not permitted\")\r\n    returns(bool) \r\n  {\r\n    assets[epochId] = assetInUse;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Return outstanding allowance\r\n   * @param asset : Asset in use\r\n   * @param user : provider\r\n   */\r\n  function _prevAllowance(\r\n    address asset, \r\n    address user\r\n  ) \r\n    internal \r\n    view returns(uint allowance) \r\n  {\r\n    allowance = IERC20(asset).allowance(address(this), user);\r\n  }\r\n  \r\n  /**\r\n   * @dev Implementation of IStrategy.setClaim\r\n   * See IStrategy.setClaim for doc.\r\n   * @notice 'credit' should only be set if borrower is returning the borrowed fund.\r\n  */ \r\n  function setClaim(\r\n    uint claim,\r\n    uint fee,\r\n    uint credit,\r\n    uint epochId,\r\n    address user,\r\n    address feeTo, \r\n    bool allHasGF,\r\n    Common.TransactionType txType\r\n  ) \r\n    external\r\n    payable\r\n    onlyOwner(\"Strategy - setClaim: Not permitted\")\r\n    returns(uint actualClaim)\r\n  {\r\n    address asset = assets[epochId];\r\n    if(txType == Common.TransactionType.ERC20) {\r\n      actualClaim = claim > fee? claim - fee : claim;\r\n      _setAllowance(user, asset, actualClaim);\r\n      if(fee > 0) {\r\n        IERC20(asset).transfer(feeTo, fee);\r\n      }\r\n    } else {\r\n      nativeApprovals[user][epochId] += claim;\r\n      if(allHasGF) {\r\n        _roundUp(epochId, assets[epochId]);\r\n      }\r\n      if(credit > 0) credits[epochId] += credit;\r\n    }\r\n    return actualClaim;\r\n  }\r\n\r\n  /**\r\n   * @notice Closes the current epoch and set claims for all contributors \r\n   *          of this epoch.\r\n   * @param epochId : Epoch Id.\r\n   * @param asset : Asset in use\r\n   */\r\n  function _roundUp(\r\n    uint epochId,\r\n    address asset\r\n  ) \r\n    private \r\n  {\r\n    uint credit = credits[epochId];\r\n    address[] memory providers = contributors[epochId];\r\n    credits[epochId] = credit.sub(credit);\r\n    uint size = providers.length;\r\n    if(credit < size) revert InsufficientCredit(credit, size);\r\n    uint allowance = credit.sub(size);\r\n    for(uint i = 0; i < size; i++){\r\n      _setAllowance(providers[i], asset, allowance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Approve spender contributor 'to' to spend from contract's balance\r\n   * @param to : Contributor\r\n   * @param asset : Currency in use\r\n   * @param amount : Value\r\n   */\r\n  function _setAllowance(\r\n    address to, \r\n    address asset, \r\n    uint256 amount\r\n  ) \r\n    private \r\n  {\r\n    uint prevAllow = _prevAllowance(asset, to);\r\n    IERC20(asset).approve(to, prevAllow > 0? amount + prevAllow : amount);\r\n  }\r\n\r\n  /**\r\n   *  @dev Withdraw Native coin. \r\n   */\r\n  function withdraw(\r\n    uint epochId,\r\n    address user\r\n  ) \r\n    external \r\n    onlyOwner(\"Strategy: Not Permitted\")\r\n    returns(bool) \r\n  {\r\n    uint balance = nativeApprovals[user][epochId];\r\n    nativeApprovals[user][epochId] = 0;\r\n    require(balance > 0, \"No claim\");\r\n    if(address(this).balance == 0) {\r\n      revert InsufficientNativeBalanceInContract(address(this).balance);\r\n    }\r\n    payable(user).transfer(balance);\r\n    // (bool sent,) = sender.call{value: balance}(\"\");\r\n    // require(sent,\"Op failed\");\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Swaps addresses.\r\n   * @param epochId : EpochId.\r\n   * @param newProv : New address.\r\n   * @param oldProv : Old address.\r\n   */\r\n  function swapProvider(\r\n    uint epochId, \r\n    address newProv, \r\n    address oldProv\r\n  ) \r\n    external \r\n    onlyOwner(\"Strategy - swapProvider: Not permitted\")\r\n    returns(bool success) \r\n  {\r\n    address[] memory addrs = contributors[epochId]; \r\n    uint slot;\r\n    for(uint i = 0; i < addrs.length; i++) {\r\n      if(addrs[i] == oldProv) {\r\n        slot = i;\r\n        success = true;\r\n      }\r\n    }\r\n    if(success) {\r\n      contributors[epochId][slot] = newProv;\r\n    }\r\n    return success;\r\n  }\r\n\r\n}"
    },
    "contracts/implementations/strategies/StrategyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IStrategyManager } from \"../../apis/IStrategyManager.sol\";\r\nimport { Strategy } from \"./Strategy.sol\";\r\n// import { Clones } from \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport { OnlyOwner } from \"../../abstracts/OnlyOwner.sol\";\r\n\r\n/**@title SmartStrategyAdmin: A standalone contract that manages strategy creation, \r\n   deletion, read and write data.\r\n\r\n   Author: Simplifinance\r\n */\r\ncontract StrategyManager is IStrategyManager, OnlyOwner {\r\n  // using Clones for address;\r\n\r\n  // Strategy count \r\n  uint public totalStrategies;\r\n\r\n  /* @notice A deployed instance of the SmartStrategy contract\r\n   */\r\n  // address public instance;\r\n\r\n  // /// @notice Address that can perform upgrade to deployed instance\r\n  // address public admin;\r\n\r\n/**\r\n * @dev List of Strategies and their keys \r\n */\r\n  StrategyData[] private strategies;\r\n\r\n /**\r\n * @dev Mapping of addresses to strategies.\r\n * Also used as reverse map of strategies to status.\r\n */\r\n  mapping(address => address) private strategyMap;\r\n\r\n  constructor (\r\n    address _ownershipManager\r\n  ) OnlyOwner(_ownershipManager) {}\r\n\r\n  receive() \r\n    external \r\n    payable \r\n  {\r\n    revert();\r\n  }\r\n  \r\n  /**@dev Return if account owns a strategy or not\r\n  */\r\n  function _hasStrategy(\r\n    address user\r\n  ) \r\n    internal \r\n    view \r\n    returns (bool) \r\n  {\r\n    return strategyMap[user] != address(0);\r\n  }\r\n\r\n  // Returns smartStrategy for 'user'\r\n  function _getStrategy(\r\n    address user\r\n  ) \r\n    internal \r\n    view returns(address) \r\n  { \r\n    return strategyMap[user];\r\n  }\r\n  \r\n  /**@dev Create a new strategy.\r\n   * @notice 'user' should not own a strategy before now.\r\n   *          only address with owner permission can call.\r\n  */\r\n  function createStrategy(\r\n    address user\r\n  )\r\n    external\r\n    onlyOwner(\"StrategyMgr - createStrategy: Not permitted\")\r\n    returns(address _strategy) \r\n  {\r\n    if(!_hasStrategy(user)){\r\n      _strategy = _createStrategy(user);\r\n    } else {\r\n      _strategy = _getStrategy(user);\r\n    }\r\n    return _strategy;\r\n  }\r\n\r\n  /**\r\n   * @dev Create strategy - private function\r\n    * @param caller : msg.sender\r\n   * \r\n   * @notice Even if user is trying to rekey or upgrade smartstrategy, same amount of fee is required\r\n   * for successful upgrade.\r\n   */\r\n  function _createStrategy(\r\n    address caller\r\n  ) \r\n    private \r\n    returns(address strategy) \r\n  {\r\n    totalStrategies ++;\r\n    // address ssi = instance;\r\n    // strategy = ssi.cloneDeterministic(keccak256(abi.encodePacked(totalStrategies, caller)));\r\n    strategy = address(new Strategy(ownershipManager));\r\n    _updateStrategy(caller, strategy);\r\n  }\r\n\r\n  // //Set new instance address : onlyOwner function\r\n  // function setInstance(\r\n  //   address newInstance\r\n  // ) \r\n  //   public\r\n  //   onlyOwner(\"Strategy - setInstance: Not permitted\")\r\n  // {\r\n  //   if(newInstance == address(0)) revert ZeroAddress(newInstance);\r\n  //   instance = newInstance;\r\n  // }\r\n\r\n  /**\r\n   * Update storage with the new Strategy instance : {internal}\r\n   * @param user : User/Caller address \r\n   * @param strategy : New Strategy address\r\n   */\r\n  function _updateStrategy(\r\n    address user, \r\n    address strategy\r\n  ) \r\n    private \r\n  {\r\n    strategyMap[user] = strategy;\r\n  }\r\n\r\n  /// Returns strategy of 'user'\r\n  /// @param user : User Address\r\n  function getStrategy(\r\n    address user\r\n  ) \r\n    external \r\n    view \r\n    returns(address) \r\n  { \r\n    return _getStrategy(user);\r\n  }\r\n}\r\n"
    },
    "contracts/implementations/token/Attorney.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Pausable } from \"../../abstracts/Pausable.sol\";\r\nimport { Lib } from \"../../libraries/Lib.sol\";\r\nimport { SafeERC20 } from \"./SafeERC20.sol\";\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\n\r\n/**Attorney\r\n * It acts on behalf of users who lost access to their account but had previously\r\n * set up a lock. Attorney enquires from the token contract if user is genuine, charges a small amount of fee\r\n * and unlock the token. \r\n * Tokens are unlocked directly the escape address, where call must be made directly from the\r\n * escape address. \r\n */\r\n\r\ncontract Attorney is Pausable {\r\n  using Lib for *;\r\n  using SafeERC20 for IERC20;\r\n\r\n  error CallNotFromEscapeAccount();\r\n\r\n  uint public fee;\r\n\r\n  address private feeTo;\r\n\r\n  IERC20 public token;\r\n\r\n  receive() external payable {\r\n    (bool _s,) = feeTo.call{value: msg.value}(\"\");\r\n    require(_s);\r\n  }\r\n\r\n  constructor(\r\n    uint _fee, \r\n    address _feeTo,\r\n    address _ownershipManager\r\n  ) \r\n    Pausable(_ownershipManager) \r\n  {\r\n    _feeTo.cannotBeEmptyAddress();\r\n    fee = _fee;\r\n    feeTo = _feeTo;\r\n  }\r\n\r\n  function setToken(IERC20 _token) \r\n    public \r\n    onlyOwner(\"Attorney: setToken Not Permitted\")\r\n  {\r\n    address(_token).cannotBeEmptyAddress();\r\n    token = _token;\r\n  }\r\n\r\n  /**@dev Panic unlock token.\r\n    Token balances is sent to address specified as an escape address.\r\n    Note: Owner must invoke this method from the escape address\r\n   */\r\n  function panicUnlock(\r\n    address accountToRetrieve\r\n  ) \r\n    public \r\n    payable \r\n    whenNotPaused\r\n  {\r\n    IERC20.Balances memory _b = IERC20(token).accountBalances(accountToRetrieve);\r\n    require(_b.locked.value > 0, \"No lock detected\");\r\n    if(_msgSender() != _b.locked.escapeTo) revert CallNotFromEscapeAccount();\r\n    uint msgValue = msg.value;\r\n    msgValue.mustBeAbove(fee);\r\n    (bool _s,) = feeTo.call{value: msgValue}(\"\");\r\n    require(_s);\r\n    token.safePanicUnlock(accountToRetrieve, _b);\r\n  }\r\n\r\n  function setFee(uint newFee) public {\r\n    if(_msgSender() == feeTo) {\r\n      fee = newFee;\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/implementations/token/CallContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**@title CallContext: Adding another layer of security to internal functions that modify the state\r\n      even if they're gated. Some ungated internal functions should only be called \r\n      in the context of the public or external functions for which they're defined.\r\n      We use this method to achieve that.\r\n\r\n    Caution: Do not use this method as a way of restricting access to sensitive functions.\r\n            You could introduce a DOS attack. The internal functions are gated by default.\r\n\r\n    @author Simplifinance { Bobeu }\r\n    Github: https://github.com/bobeu\r\n */\r\nabstract contract CallContext {\r\n  error FunctionNotCallable();\r\n  \r\n  enum Internal {\r\n    MINT,\r\n    BURN,\r\n    PAUSE,\r\n    BATCH,\r\n    UNPAUSE,\r\n    TRANSFER,\r\n    TRANSFERFROM,\r\n    INCREASEALLOWANCE,\r\n    DECREASEALLOWANCE,\r\n    LOCK,\r\n    UNLOCK,\r\n    SPENDALLOWANCE,\r\n    APPROVE,\r\n    PANIC\r\n  }\r\n\r\n  mapping(Internal => bool) private callables;\r\n\r\n  ///@dev Can be used for multiple nested checks that evaluates to false.\r\n  function _requireContext(bool condition) internal virtual {\r\n    if(condition == false) revert FunctionNotCallable();\r\n  }\r\n\r\n  ///@dev Returns if a function is callable or not.\r\n  function _isCallable(Internal funcTag) internal view returns(bool) {\r\n    return callables[funcTag];\r\n  }\r\n\r\n  ///@dev Unlocks internal functions, then locks it when body of funtion terminates\r\n  modifier toggleFunc(Internal funcTag) {\r\n    _openTag(funcTag);\r\n    _;\r\n    _closeTag(funcTag);\r\n\r\n  }\r\n\r\n  ///@dev Activates internal function\r\n  function _openTag(Internal funcTag) private {\r\n    callables[funcTag] = true;\r\n  }\r\n\r\n  /// @dev Deactivate internal func tags\r\n  function _closeTag(Internal funcTag) private {\r\n    callables[funcTag] = false;\r\n  }\r\n\r\n}"
    },
    "contracts/implementations/token/ERC20Abstract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Lib } from \"../../libraries/Lib.sol\";\r\nimport { CallContext } from \"./CallContext.sol\";\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\nimport { Pausable } from \"../../abstracts/Pausable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n\r\n/**\r\n * @title SimpliFinance Token Implementation { Non deployable }\r\n * @author SimpliFinance - https://github.com/bobeu\r\n * @notice @dev Simplifinance Token operates a dual ledger model:\r\n     *      - Regular balance : Compatible with the standard ERC20 balances.\r\n     *      - private balance : This is kept in a seperate ledger but reflects in the total balances when \r\n     *          the `balanceOf` is invoked. We introduced this method for internal security reasons to protect\r\n     *          SPT holder in the event they lost access to their wallets.\r\n     *  HOW IS WORKS\r\n     *  ============\r\n     *      To be protected, holder must explicitly subscribe to it. During the processs, an alternative \r\n     *      EOA referred to as `escapeTo` must be provided as an argument to the function. Holders are adviced to create a seperate account for this purpose\r\n     *      and keep the private keys secure. Such account might not be used for regular transaction. Providing this address activates \r\n     *      the private balance mode. The specified amount of `inValue` is locked for the period of `lockTil`. During the locked period, if holder \r\n     *      lost access to their account, through the `Attorney` contract, provided the lock is activated, they will regain access to their funds.\r\n     *      The Attorney will enquire from the Token contract if the caller has previously activated the lock, and if an escape address was set. otherwise\r\n     *      the request is ignored.\r\n     * Note: An amount is charged by the Attorney for such service.\r\n     * Even if an hacker gained access to your private keys, as a SPT holder, the fund is not accessible to them only if the holder had activated the lock feature.\r\n     * \r\n     * Note: The call must be initiated by an account other than the owner.\r\n     *       An attacker only has access to SPT token in your regular ERC20 ledger balances.\r\n     *   \r\n        The `panicWithdraw` method resides in the Attorney contract. It unlocks all balances in the locked ledger and are sent to the `escape` account provided the  \r\n        an address was initially set.\r\n */\r\nabstract contract ERC20Abstract is CallContext, IERC20, Pausable {\r\n  using Lib for *;\r\n\r\n  TokenInfo private tokenInfo;\r\n  \r\n  mapping(address => Balances) private _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  /**\r\n   * @dev Initializes state varibles.\r\n   * Note: We mint the maxSupply at deployment. 30% of the total supply\r\n   * is in circulation while the rest is lcoked in the reserve.\r\n   */\r\n  constructor(\r\n    address attorney_,\r\n    address reserve_,\r\n    address initTokenReceiver,\r\n    address _ownershipManager\r\n  ) \r\n    Pausable(_ownershipManager)\r\n    toggleFunc(Internal.LOCK) \r\n  {\r\n    attorney_.cannotBeEmptyAddress();\r\n    tokenInfo = TokenInfo(18, 0, \"Simplfinance Token\", \"SFT\", attorney_);\r\n    _mint(initTokenReceiver, 1_000_000_000*(10**18));\r\n    _lock(initTokenReceiver, reserve_, 700_000_000*(10**18));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return tokenInfo.name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return tokenInfo.symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the default value returned by this function, unless\r\n   * it's overridden.\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return tokenInfo.decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns contracts account connected to the token contracts i.e.\r\n   *    - Attorney\r\n   * Note: Attorney account acts on behalf of a holders to retrive their token\r\n   *        in the event they lost access to their accounts.\r\n   */\r\n  function getAttorney() public view returns(address _attorney) {\r\n    _attorney = tokenInfo.attorney;\r\n  }\r\n\r\n  /// @dev See IERC20.sol {getInfo}\r\n  function getLockedInfo(address target) public view returns(Protected memory _locked) {\r\n    address msgSender = _msgSender();\r\n    if(msgSender == tokenInfo.attorney) {\r\n      _locked = _balances[target].locked;\r\n    }\r\n    return _locked;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return tokenInfo.totalSupply;\r\n  }\r\n\r\n  ///@dev See {IERC20-accountBalances}.\r\n  function accountBalances(address who) external view returns (Balances memory _bal) {\r\n    _bal = _balances[who];\r\n    return _bal;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   * Returns the spendable balance of @param account: Bytes32 address type\r\n   * Note: The function `balanceOf` complies with that ERC20 standard\r\n   */\r\n  function balanceOf(address account) public view returns (uint256 _bal) {\r\n    return _getSpendable(account);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address to, uint256 amount) public toggleFunc(Internal.TRANSFER) returns (bool) {\r\n    address owner = _msgSender();\r\n    _transfer(owner, to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) public virtual override toggleFunc(Internal.APPROVE) returns (bool) {\r\n      address owner = _msgSender();\r\n      _approve(owner, spender, amount);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * NOTE: Does not update the allowance if the current allowance\r\n   * is the maximum `uint256`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` and `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``from``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address from, address to, uint256 amount) public virtual override toggleFunc(Internal.TRANSFERFROM) returns (bool) {\r\n    address spender = _msgSender();\r\n    _spendAllowance(from, spender, amount);\r\n    _transfer(from, to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual toggleFunc(Internal.INCREASEALLOWANCE) returns (bool) {\r\n      address owner = _msgSender();\r\n      _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual toggleFunc(Internal.DECREASEALLOWANCE) returns(bool) {\r\n    address owner = _msgSender();\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n      _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // Returns spendable balances of {from} i.e usual ERC20 'balanceOf'\r\n  function _getSpendable(address from) internal view returns (uint256) {\r\n    return _balances[from].spendable;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `from` to `to`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address from, address to, uint256 amount) internal virtual \r\n  {\r\n    _requireContext(\r\n      _isCallable(Internal.TRANSFER) || \r\n        _isCallable(Internal.TRANSFERFROM) ||\r\n          _isCallable(Internal.BATCH) ||\r\n            _isCallable(Internal.PANIC)\r\n    );\r\n    from.cannotBeEmptyAddress();\r\n    to.cannotBeEmptyAddress();\r\n\r\n    _beforeTokenTransfer(from, to, amount);\r\n    uint256 fromBalance = _getSpendable(from);\r\n    fromBalance.mustBeAbove(amount);\r\n    unchecked {\r\n        _balances[from].spendable = fromBalance - amount;\r\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n        // decrementing then incrementing.\r\n        _balances[to].spendable += amount;\r\n    }\r\n\r\n    emit Transfer(from, to, amount);\r\n\r\n    _afterTokenTransfer(from, to, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    // _requireContext(_isCallable(Internal.MINT));\r\n    account.cannotBeEmptyAddress();\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    tokenInfo.totalSupply += amount;\r\n    unchecked {\r\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n        _balances[account].spendable += amount;\r\n    }\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    _requireContext(_isCallable(Internal.BURN));\r\n    account.cannotBeEmptyAddress();\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account].spendable;\r\n    accountBalance.mustBeAbove(amount);\r\n    unchecked {\r\n      _balances[account].spendable = accountBalance - amount;\r\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n      tokenInfo.totalSupply -= amount;\r\n    }\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    _requireContext(\r\n      _isCallable(Internal.APPROVE) || \r\n        _isCallable(Internal.INCREASEALLOWANCE) ||\r\n          _isCallable(Internal.DECREASEALLOWANCE) ||\r\n            _isCallable(Internal.TRANSFERFROM)\r\n    );\r\n    owner.cannotBeEmptyAddress();\r\n    spender.cannotBeEmptyAddress();\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n   *\r\n   * Does not update the allowance amount in case of infinite allowance.\r\n   * Revert if not enough allowance is available.\r\n   *\r\n   * Might emit an {Approval} event.\r\n   */\r\n  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n      currentAllowance.mustBeAbove(amount);\r\n      unchecked {\r\n        _approve(owner, spender, currentAllowance - amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * has been transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n  \r\n  ///@dev Returns current Unix time stamp\r\n  function _now() internal view returns(uint32) {\r\n    return uint32(block.timestamp);\r\n  }\r\n  \r\n  /**@dev Locks JFT in the private ledger balances.\r\n    When tokens are locked they can be unlocked at any time.\r\n      @param _escapeTo : Escape address that token will be forwarded to. This must not be zero address\r\n      @param amount : Amount user is willing to send to the safe.\r\n      Note: If caller has no lock previously set,`escapeTo` must not be an empty address.\r\n            User will always have to provide an escape address each time they want to lock up tokens.\r\n      REWARD\r\n      ======\r\n      Holders are eligible to claim reward if they hold JFT in private ledger for at least 30 days.\r\n      The amount of reward is determined by the team.\r\n      Note: Care must be taken when locking and unlocking. Users must first check through the attorney if they're\r\n            qualify for reward then they must claim first before lock again, otherwise, the locked time is overriden.\r\n            This can nullify their rewards.\r\n\r\n   */\r\n  function _lock(address account, address _escapeTo, uint256 amount) \r\n    internal\r\n  {\r\n    _requireContext(_isCallable(Internal.LOCK));\r\n    _escapeTo.cannotBeEmptyAddress();\r\n    Balances memory balances = _balances[account];\r\n\r\n    balances.spendable.mustBeAbove(amount);\r\n    // _balances[account].locked.escapeTo = _escapeTo;\r\n    // _balances[account].locked.lastLocked = amount;\r\n    unchecked {\r\n      _balances[account] = Balances(\r\n        balances.spendable - amount,\r\n        Protected(\r\n          balances.locked.value + amount,\r\n          _escapeTo\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**@dev Unlock token \r\n   */\r\n  function _unlock(address account, uint amount) internal {\r\n    _requireContext(_isCallable(Internal.UNLOCK));\r\n    Balances memory balances = _balances[account];\r\n    if(balances.locked.escapeTo == address(0)) revert NoPreviousLockDetected();\r\n    balances.locked.value.mustBeAbove(amount);\r\n    unchecked {\r\n      _balances[account].locked.value -= amount;\r\n      _balances[balances.locked.escapeTo].spendable += amount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Replaces the attorney account. Only authorized owner account can perform\r\n   * this action.\r\n   */\r\n  function setAttorney(address newAttorney) public onlyOwner(\"Token: setAttorney: Not permitted\") {\r\n    newAttorney.cannotBeEmptyAddress();\r\n    tokenInfo.attorney = newAttorney;\r\n  }\r\n\r\n  /**See IERC20.sol {panicUnlock}\r\n    Method is executed only of the caller is the attorney\r\n    Note: Since the user is able to prove to the attorney that they\r\n    own the lost account, they are also able to reclaim all balances.\r\n   */\r\n  function panicUnlock(address accountToRetrieve, Balances memory _bal) external toggleFunc(Internal.PANIC) returns(bool feedback) {\r\n    tokenInfo.attorney.cannotBeEmptyAddress();\r\n    if(_msgSender() == tokenInfo.attorney) {\r\n      unchecked {\r\n        _balances[accountToRetrieve].locked.value = 0;\r\n        _balances[_bal.locked.escapeTo].spendable += _bal.locked.value;\r\n      }\r\n      if(_bal.spendable > 0) {\r\n        _transfer(accountToRetrieve, _bal.locked.escapeTo, _bal.spendable);\r\n      } \r\n      feedback = true;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/implementations/token/Reserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner } from \"../../abstracts/OnlyOwner.sol\";\r\nimport { SafeERC20 } from \"./SafeERC20.sol\";\r\nimport { Lib } from \"../../libraries/Lib.sol\";\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\n\r\n/**\r\n * @title Reserve\r\n * @dev Total supply is minted to this contract and is controlled by an owner address\r\n * expected to be a multisig account.\r\n */\r\ncontract Reserve is OnlyOwner {\r\n  using Lib for *;\r\n  using SafeERC20 for IERC20;\r\n\r\n  IERC20 public token;\r\n\r\n  ///@dev Contract accepts platform coin\r\n  receive () external payable {\r\n    revert(\"NA\");\r\n  } \r\n\r\n  constructor( \r\n    address _ownershipManager\r\n  ) OnlyOwner(_ownershipManager) { }\r\n\r\n  function setToken(IERC20 newToken) public onlyOwner(\"Reserve: setToken: Not permitted\") {\r\n    address(newToken).cannotBeEmptyAddress();\r\n    token = newToken;\r\n  }\r\n\r\n  ///@dev Transfer Token to @param account : Token recipient\r\n  function transferToken(address account, uint amount) public onlyOwner(\"Reserve: batchTransferToken: Not permitted\") {\r\n    token.safeTransfer(account, amount);\r\n  }\r\n\r\n  ///@dev Batch tranfer: Sends token to many addresses\r\n  function batchTransfer(address[] memory accounts, uint256[] memory amounts) public onlyOwner(\"Reserve: batchTransfer: Not permitted\") {\r\n    token.safeBatchTransfer(accounts, amounts);\r\n  }\r\n\r\n  ///@dev Locks certain amount i.e Move from private ledger to the regular balance\r\n  function lockToken(address _routeTo, uint256 amount) public onlyOwner(\"Reserve: lockToken: Not permitted\") {\r\n    token.safeLock(_routeTo, amount);\r\n  }\r\n\r\n  ///@dev Unlocks certain amount i.e Move from private ledger to the regular balance\r\n  function unlockToken(uint256 amount) public onlyOwner(\"Reserve: unlockToken: Not permitted\") {\r\n    token.safeUnlock(amount);\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/implementations/token/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\nimport { IERC20Permit } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /** Batch transfer\r\n     * @dev Transfer `values` amount of `token` from the calling contract to `tos`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeBatchTransfer(IERC20 token, address[] memory tos, uint256[] memory values) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.batchTransfer.selector, tos, values));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Panicly unlock token from the 'token' contract by force transfer from the 'account' to the\r\n     * preset escape account. \r\n     * This is done only by the Attorney.\r\n     */\r\n    function safePanicUnlock(IERC20 token, address account, IERC20.Balances memory _bal) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.panicUnlock.selector, account, _bal));\r\n    }\r\n\r\n    /**\r\n     * @dev Unlocks token 'token' of 'amount' from the caller's account.\r\n     * If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeUnlock(IERC20 token, uint256 amount) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.unlockToken.selector, amount));\r\n    }\r\n    \r\n    /**\r\n     * @dev Lock token 'token' of 'amount' from the caller's account.\r\n     * If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeLock(IERC20 token, address _routeTo, uint256 amount) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.lockToken.selector, _routeTo, amount));\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/implementations/token/SimpliToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { ERC20Abstract } from \"./ERC20Abstract.sol\";\r\n\r\n/*\r\n    @title QToken is the native token of the Simplifinance platform.\r\n            It is a utility token that gives its holders access to Simplifinance\r\n            products.\r\n        Standard: Customized and ERC20 compatible.\r\n        Type: Deflationary.\r\n        Max Supply: 1_000_000_000.\r\n        Decimal: 18.\r\n*/\r\ncontract SimpliToken is ERC20Abstract {\r\n    event Locked(address from, uint256 amount);\r\n    event UnLocked(address from, uint256 amount);\r\n\r\n    constructor( \r\n        address attorney_,\r\n        address reserve_,\r\n        address initTokenReceiver,\r\n        address _ownershipMgr\r\n    ) ERC20Abstract(attorney_, reserve_, initTokenReceiver, _ownershipMgr) { }\r\n\r\n    ///@dev Contract accepts no platform coin\r\n    receive() external payable {\r\n        revert(\"NA\");\r\n    }\r\n\r\n    ///@dev See IERC20.sol {lockToken}\r\n    function lockToken(address _routeTo, uint256 amount) public toggleFunc(Internal.LOCK) returns (bool) {\r\n        _lock(_msgSender(), _routeTo, amount);\r\n\r\n        emit Locked(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    ///@dev See IERC20.sol {unlock}\r\n    function unlockToken(uint256 amount) public toggleFunc(Internal.UNLOCK) returns (bool) {\r\n        _unlock(_msgSender(), amount);\r\n\r\n        emit UnLocked(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    ///@dev Burns token of `amount`\r\n    function burn(uint amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n        See IERC20.sol {batchTransfer}\r\n        A dynamic transfer utility. \r\n        Note: The size of the amount array must match that of the \r\n        account's. Anothe benefit is that each of the addresses on the \r\n        list can be mapped to different amount dynamically.\r\n     */\r\n    function batchTransfer(\r\n        uint[] memory amounts,\r\n        address[] memory accounts\r\n    ) public override toggleFunc(Internal.BATCH) returns (bool) {\r\n        uint accountSize = accounts.length;\r\n        require(accountSize == amounts.length, \"Unequal list\");\r\n        for (uint i = 0; i < accountSize; i++) {\r\n            address to = accounts[i];\r\n            uint amount = amounts[i];\r\n            _transfer(_msgSender(), to, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n"
    },
    "contracts/implementations/token/TokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { OnlyOwner } from \"../../abstracts/OnlyOwner.sol\";\r\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport { Lib } from \"../../libraries/Lib.sol\";\r\nimport { SafeERC20 } from \"./SafeERC20.sol\";\r\nimport { IERC20 } from \"../../apis/IERC20.sol\";\r\n\r\n/**\r\n * @title InitialTokenReceiver\r\n * @dev Total supply is minted to this contract and is controlled by a set of addresses\r\n *  acting as multisig addresses. \r\n * To transfer any amount of token out of this contract, the following steps\r\n * must be peformed:\r\n * \r\n * - INITIATE TRXN: A request to transfer an amount must be made. An event is emitted \r\n *      to extract the request Id. Request IDs are unique to another.\r\n * \r\n * - SIGN TRXN: The predefined signers addresses will have to sign the transaction with \r\n *      the given request Id. The number of signers needed to validate execution must match \r\n *      `quorum` declared as state variable.\r\n * \r\n * - EXECUTE TRXN: Transactions can only be executed if the delay period has passed and are \r\n *      are already signed.\r\n * \r\n * Same functionalities can be used to add and remove a new signer, and change quorum. \r\n */\r\ncontract TokenDistributor is \r\n    OnlyOwner,\r\n    ReentrancyGuard\r\n{\r\n    using Lib for *;\r\n    using SafeERC20 for IERC20;\r\n\r\n    error Pending();\r\n    error AlreadySigned();\r\n    error InvalidRequestId(uint);\r\n    error InsufficientBalance(uint256);\r\n\r\n    event Requested(uint reqId, address from);\r\n    event Signer(uint reqId, address from);\r\n\r\n    enum Status {NONE, INITIATED, PENDING, EXECUTED}\r\n\r\n    /**\r\n     * @notice Transaction type\r\n     * Transaction can be ERC20 or Native.\r\n     * By default, they're ERC20 type.\r\n     * We also use other type from 2 and above to denote the \r\n     * type of transaction that can be performed by the owner account\r\n     */\r\n    enum Type {ERC20, NATIVE, ADDSIGNER, REMOVESIGNER, SETQUORUM}\r\n\r\n    /**\r\n     * @notice Number of signers require to execute a transfer\r\n     */\r\n    uint public quorum;\r\n\r\n    /**\r\n     * @dev Unique order ID mapped to each transfer request.\r\n     * Note: Two requests can not have same order ID. \r\n     */\r\n    uint private requestIDs;\r\n\r\n    /**\r\n     * @notice Delay timer.\r\n     * Transfers are executed after the expiration of this period.\r\n     */\r\n    uint public delay;\r\n\r\n    struct Request {\r\n        uint256 amount;\r\n        address recipient;\r\n        uint delay;\r\n        address[] executors;\r\n        Status status;\r\n        Type txType;\r\n    }\r\n\r\n    address[] private executors;\r\n\r\n    /**\r\n     * @dev Transfer orders.\r\n     * Mapping of Ids to Request\r\n     * Note: We assigned slot `0` to add and remove signer.\r\n     * i.e requests[0].\r\n     */\r\n    mapping (uint => Request) private requests;\r\n\r\n    /**\r\n     * @dev Signers\r\n     * Mapping of address to bool\r\n     */\r\n    mapping (address => bool) private signers;\r\n\r\n    /**\r\n     * @dev Signed requests\r\n     * Mapping of signer to request id to bool\r\n     */\r\n    mapping (address => mapping (uint => bool)) private signed;\r\n\r\n    // ERC20 basic token contract held by this contract\r\n    IERC20 public token;\r\n\r\n    /**\r\n     * @dev Only signers are allowed\r\n     */\r\n    modifier onlySigner {\r\n        require(signers[_msgSender()], \"Not a signer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Request Id must not be zero\r\n     * @param reqId : Request Id\r\n     */\r\n    modifier validateRequestId(uint reqId) {\r\n        if(reqId == 0) revert InvalidRequestId(reqId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only when not signed.\r\n     * @param reqId : Request Id\r\n     */\r\n    modifier whenNotSign(uint reqId) {\r\n        address caller = _msgSender();\r\n        if(signed[caller][reqId]) revert AlreadySigned();\r\n        _;\r\n        signed[caller][reqId] = true;\r\n    }\r\n\r\n    constructor(\r\n        address _ownershipManager,\r\n        address[] memory _signers, \r\n        uint8 _quorum\r\n    ) \r\n        OnlyOwner(_ownershipManager) \r\n    {\r\n        uint size = _signers.length;\r\n        quorum = _quorum;\r\n        if(size > 0) {\r\n            for (uint i = 0; i < size; i++) {\r\n                _addSigner(_signers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setToken(IERC20 newToken) \r\n        public \r\n        onlyOwner(\"TokenDistributor - setToken: Not permitted\")\r\n    {\r\n        address(newToken).cannotBeEmptyAddress();\r\n        token = newToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Generate request Id\r\n     * Request Id is generated for all transaction type\r\n     */\r\n    function _generateRequestId() private returns(uint id) {\r\n        requestIDs ++;\r\n        id = requestIDs;\r\n        // id = _type < 2? requestIDs : 0;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check that current request's staus correspond\r\n     * @param _req : Request struct.\r\n     * @param _status : Status to match with.\r\n     * @param errorMessage : Error message.\r\n     */\r\n    function _whenStatus(Request memory _req, Status _status, string memory errorMessage) internal pure {\r\n        require(_req.status == _status, errorMessage);\r\n    }\r\n\r\n    /**@dev Initiate transaction. \r\n        This function can be invoked only by the authorized accounts\r\n        as signers.\r\n        The `_type` parameter is used to select the type of transaction \r\n        the caller want to perform - a more reason we restrict the `_type` \r\n        input to number between 0 and 5 otherwise we get out of bound error\r\n        since enums work similar to arrays.\r\n        @param _recipient :     An address to act as the beneficiary of this \r\n                                transaction.\r\n        @param _amount:         Amount to send as value (in token).\r\n        @param _delayInHours:   If this flag is set to value greater than 0,\r\n                                execution of the proposed transaction will not succeed unless the \r\n                                delay time has passed.\r\n        @param  _type:  The type of transaction to perform. Transction could be any of the following\r\n                        as set in the `Type` enum:\r\n                        ERC20 (0): Transfer ERC20 token.\r\n                        NATIVE (1): Transfer network asset such as ETH.\r\n                        ADDSIGNER (2): Add more signers to the list.\r\n                        REMOVESIGNER (3): Deactivate the `_recipient` address from as a signers. \r\n                        SETQUORUM (4): Increase or decrease the number of signatories needed to execute a transaction.\r\n        Note: By default, the caller is deemed to have signed the transaction.\r\n     */\r\n    function initiateTransaction(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        uint16 _delayInHours,\r\n        uint8 _type\r\n    ) public onlySigner {\r\n        require(_type < 5, \"Invalid selector\");\r\n        uint reqId = _generateRequestId();\r\n        if(_type < 4) {\r\n            require(_recipient != address(0), \"Recipient is zero addr\");\r\n        }\r\n        requests[reqId].amount = _amount;\r\n        requests[reqId].recipient = _recipient;\r\n        requests[reqId].status = Status.INITIATED;\r\n        requests[reqId].txType = Type(_type);\r\n        unchecked {\r\n            requests[reqId].delay = _now() + (_delayInHours * 1 hours);\r\n            \r\n        }\r\n        address caller = _msgSender();\r\n        requests[reqId].executors.push(caller);\r\n        signed[caller][reqId] = true;\r\n\r\n        emit Requested(reqId, caller);\r\n    }\r\n\r\n    function _now() internal view returns(uint64) {\r\n        return uint64(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Sign transactions\r\n     * @param reqId : Request Id.\r\n     * Note: Caller must be one of the signers\r\n     */\r\n    function signTransaction(uint reqId) \r\n        public \r\n        onlySigner\r\n        validateRequestId(reqId)\r\n        whenNotSign(reqId)\r\n    {\r\n        Request memory req = requests[reqId];\r\n        _whenStatus(req, Status.INITIATED, \"Trxn must be initiated\");\r\n        uint currentSigners = req.executors.length;\r\n        require(currentSigners < quorum, \"Signers complete\");\r\n        address caller = _msgSender();\r\n        requests[reqId].executors.push(caller);\r\n        signed[caller][reqId] = true;\r\n        if((currentSigners + 1) == quorum) {\r\n            requests[reqId].status = Status.PENDING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Executes pending transaction.\r\n     * @param reqId : Request Id\r\n     * Transaction must be pending in status. When moved to executed, \r\n     * they have no way to be restored.\r\n     * Only signer accounts can call.\r\n     */\r\n    function executeTransaction(uint reqId) public onlySigner validateRequestId(reqId) nonReentrant {\r\n        Request memory req = requests[reqId];\r\n        _whenStatus(req, Status.PENDING, \"Trxn must be initiated\");\r\n        if(_now() < req.delay) revert Pending();\r\n        requests[reqId].status = Status.EXECUTED;\r\n        if(req.txType == Type.ERC20) {\r\n            address(token).cannotBeEmptyAddress();\r\n            token.safeTransfer(req.recipient, req.amount);\r\n        } else if(req.txType == Type.NATIVE) {\r\n            uint256 balance = address(this).balance;\r\n            if(balance < req.amount) revert InsufficientBalance(balance);\r\n            (bool success,) = req.recipient.call{value: req.amount}(\"\");\r\n            require(success,\"Trxn failed\");\r\n        } else if(req.txType == Type.ADDSIGNER) {\r\n            req = requests[reqId];\r\n            delete requests[reqId];\r\n            _addSigner(req.recipient);\r\n        } else if(req.txType == Type.REMOVESIGNER) {\r\n            req = requests[reqId];\r\n            delete requests[reqId];\r\n            _removeSigner(req.recipient);\r\n        } else if(req.txType == Type.SETQUORUM) {\r\n            quorum = req.amount;\r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n     * @dev Remove a signer from the list\r\n     */\r\n    function _removeSigner(address account) private {\r\n        signers[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a signer to the list\r\n     */\r\n    function _addSigner(address account) private {\r\n        signers[account] = true;\r\n        executors.push(account);\r\n    }\r\n\r\n    /**\r\n        @dev Return request struct at the reqId ref.\r\n     */\r\n    function getTransactionRequest(uint reqId) public view returns(Request memory req) {\r\n        return requests[reqId];\r\n    }\r\n\r\n    function deposit() public payable {\r\n        require(msg.value > 0, \"000/\");\r\n    }\r\n\r\n    function getExecutors() public view returns(address[] memory) {\r\n        return executors;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/libraries/FactoryLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { SafeMath } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\";\r\nimport { Counters } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/Counters.sol\";\r\nimport { IERC20 } from \"../apis/IERC20.sol\";\r\nimport { IStrategyManager } from \"../apis/IStrategyManager.sol\";\r\nimport { IStrategy } from \"../apis/IStrategy.sol\";\r\nimport { IFactory } from \"../apis/IFactory.sol\";\r\nimport { Common } from \"../apis/Common.sol\";\r\nimport { AssetClass } from \"../implementations/AssetClass.sol\";\r\nimport { Utils } from \"../libraries/Utils.sol\";\r\n\r\n/**@dev\r\n  * @param amountExist: Tracks unit contribution i.e values created in each permissionless communities\r\n  * @param pools: Mapping of epochIds to Pool\r\n  * @param pData: Public State variable stats\r\n  * @param epoches : Total pool created to date\r\n  * @param contributors : Mapping of epochIds to group of contributors\r\n  * @param slots : Reverse map of contributors to epochId to slots on the list.\r\n*/\r\nstruct Data {\r\n  IFactory.ContractData pData;\r\n  Counters.Counter epoches; \r\n\r\n  /**Mapping of epochIds to pools */\r\n  mapping(uint => Common.Pool) pools;\r\n\r\n  /**Mapping of contribution amount to bool indicating if they exit or not */\r\n  mapping(uint256 => bool) amountExist; \r\n\r\n  /**Mapping of slots to Profiles */\r\n  mapping(uint => Common.Contributor[]) contributors;\r\n\r\n  /**Mapping of contributors addresses to epochid to slot */\r\n  mapping(address => mapping(uint => uint)) slots;\r\n\r\n  /**Mapping of epochId to contributors addresses to ranks */\r\n  mapping(uint => mapping (address => Common.Rank)) ranks;\r\n\r\n  Common.Pool[] poolArr;\r\n}\r\n\r\nstruct Def {\r\n  bool t;\r\n  bool f;\r\n  uint8 zero;\r\n  uint8 one;\r\n  address zeroAddr;\r\n}\r\n\r\nlibrary FactoryLib {\r\n  using Utils for *;\r\n  using SafeMath for uint256;\r\n  using Counters for Counters.Counter;\r\n\r\n  event AllGh(uint epochId, Common.Pool pool);\r\n\r\n  /**\r\n   * @dev Create a fresh pool\r\n   * @param self: Storage of type `Data`\r\n   * @param cpp: This is a struct of data much like an object. We use it to compress a few parameters\r\n   *              instead of overloading _createPool.\r\n   * @param epochId: Pool we are currently dealing with.\r\n   * @param _unlock: Function as parameter. It should unlock a function with related `Common.FuncTag'\r\n   *                 when invoked.\r\n   * @notice We first check that the duraetion given by the admin should not be zero.\r\n   * Note: `.assertChained3` is simply making tripple boolean checks.\r\n   */\r\n  function _createPool(\r\n    Data storage self,\r\n    Common.CreatePoolParam memory cpp,\r\n    function (uint, Common.FuncTag) internal _unlock,\r\n    address strategy,\r\n    address user,\r\n    uint epochId\r\n  ) \r\n    private \r\n    returns(Common.Pool memory pool) \r\n  {\r\n    Def memory _d = _def();\r\n    // Utils.assertTrue_2(cpp.duration > _d.zero, cpp.duration < type(uint8).max, \"Invalid duration\"); // Please uncomment this line after you have completed the testing.\r\n    _validateAllowance(user, cpp.asset, cpp.unitContribution);\r\n    _updatePoolSlot(self, epochId, cpp, _d, strategy);\r\n    _unlock(epochId, Common.FuncTag.JOIN);\r\n    pool = _fetchPoolData(self, epochId);\r\n    _updateAssetInStrategy(strategy, pool.addrs.asset, epochId);\r\n    _withdrawAllowance(user, cpp.asset, cpp.unitContribution, strategy);\r\n    _pushToStorage(self.poolArr, pool);\r\n    // require(self.poolArr.length > 0, \"Hereeeee\");\r\n  }\r\n\r\n  function _def()\r\n    internal \r\n    pure \r\n    returns(Def memory) \r\n  {\r\n    return Def(true, false, 0, 1, address(0));\r\n  }\r\n\r\n  ///@dev Returns current timestamp (unix).\r\n  function _now() \r\n    internal \r\n    view returns (uint) \r\n  {\r\n    return block.timestamp;\r\n  }\r\n\r\n  /**\r\n   * @dev Check that user has given enough approval to spend from their balances\r\n   * @param user : Caller.\r\n   * @param assetInUse : ERC20 currency address to use as contribution base.\r\n   * @param value : Contribution per user.\r\n   */\r\n  function _validateAllowance(\r\n    address user, \r\n    address assetInUse, \r\n    uint value\r\n  ) \r\n    internal \r\n    view \r\n  {\r\n    // require(IERC20(assetInUse).allowance(user, address(this)) >= value, \"FactoryLib: Insufficient allowance\");\r\n  }\r\n\r\n  /**@notice Send contribution to strategy\r\n   * @param user : User/Caller address\r\n   * @param assetInUse: ERC20 token { USD contract address }\r\n   * @param unitContribution: Unit contribution\r\n   * @param strategy : Address to hold funds on behalf of the members. The factory generates \r\n   * a strategy by querying StrategyManager. Every address that create a pool must operate a \r\n   * strategy. This process is managed internally for users.  \r\n   */\r\n  function _withdrawAllowance(\r\n    address user, \r\n    address assetInUse, \r\n    uint unitContribution, \r\n    address strategy\r\n  ) \r\n    private \r\n  {\r\n    require(IERC20(assetInUse).transferFrom(user, strategy, unitContribution), \"FactoryLib: Transfer failed\");\r\n  }\r\n\r\n  /*** @dev Update the storage with pool information\r\n   * @param self: Storage of type `Data`\r\n   * @param cpp: This is a struct of data much like an object. We use it to compress a few parameters\r\n   *              instead of overloading _createPool.\r\n   * @param epochId: Pool we are currently dealing with.\r\n   * @param _d: Default literal values i.e True, False, 0, 1 and address(0) \r\n   */\r\n  function _updatePoolSlot(\r\n    Data storage self,\r\n    uint epochId, \r\n    Common.CreatePoolParam memory cpp,\r\n    Def memory _d,\r\n    address strategy\r\n  ) \r\n    private\r\n  {\r\n    uint24 durInSec = _convertDurToSec(uint16(cpp.duration));\r\n    Common.InterestReturn memory _itr = cpp.unitContribution.mul(cpp.quorum).computeInterestsBasedOnDuration(cpp.intRate, durInSec, durInSec);\r\n    self.pools[epochId] = Common.Pool(\r\n      Common.Uints(cpp.quorum, _d.zero, cpp.colCoverage, durInSec, cpp.intRate),\r\n      Common.Uint256s(_itr.fullInterest, _itr.intPerSec, cpp.unitContribution, cpp.unitContribution),\r\n      Common.Addresses(cpp.asset, _d.zeroAddr, strategy, cpp.members[0]),\r\n      _d.zero\r\n    );\r\n  }\r\n\r\n  ///@dev Returns all uint256s related data in pool at epochId.\r\n  function _fetchPoolData(Data storage self, uint epochId) internal view returns (Common.Pool memory _return) {\r\n    _return = self.pools[epochId];\r\n  }\r\n\r\n  /**\r\n   * @dev Update strategy.\r\n   * @param strategy : Strategy for creator of band at 'epochId'.\r\n   * @param assetInUse: ERC20 currency address to use as contribution base.\r\n   * @param epochId: Otherwise known as pool Id.\r\n   */\r\n  function _updateAssetInStrategy(\r\n    address strategy,\r\n    address assetInUse,\r\n    uint epochId\r\n  ) private {\r\n    if(!IStrategy(strategy).mapAsset(epochId, assetInUse)){\r\n      revert Common.UpdateStrategyError();\r\n    }\r\n  }\r\n\r\n  /**@dev Create permissioned band\r\n   * @param self: Storage of type `Data`.\r\n   * @param cpi : Parameter struct\r\n   * Note: Each of the addresses on the members array must an Account instance. Participants must already own an\r\n   * account before now otherwise, execution will not pass.\r\n   * - Admin cannot replicate themselves in a band.\r\n   * - Each of the contributors must have created account before now.\r\n   * - We assume admin should be address in first slot in the members array, so expression evaluates to `if not admin`.\r\n   */\r\n  function createPermissionedPool(\r\n    Data storage self,\r\n    Common.CreatePermissionedPoolParam memory cpi\r\n  ) \r\n    internal\r\n    returns (Common.CreatePoolReturnValue memory cpr) \r\n  {\r\n    Def memory _d = _def();\r\n    uint epochId = _generateEpochId(self);\r\n    address admin = cpi.cpp.members[0];\r\n    address strategy = _fetchAndValidateStrategy(admin, self.pData.strategyManager);\r\n    for(uint i = _d.zero; i < cpi.cpp.members.length; i++) {\r\n      if(i == _d.zero) {\r\n          Common.Pool memory pool = _createPool(self, cpi.cpp, cpi._unlock, strategy, admin, epochId);\r\n        (\r\n          uint slot,\r\n          Common.Contributor memory cbData\r\n        ) = _addNewContributor(self, cpr.epochId, admin, _d.t, _d.t);\r\n        cpr = Common.CreatePoolReturnValue(pool, cbData, epochId, uint16(slot));\r\n      } else {\r\n        address contributor = cpi.cpp.members[i];\r\n        bool(contributor != admin).assertTrue(\"Admin spotted twice\");\r\n        _addNewContributor(self, cpr.epochId, contributor, _d.f, _d.t);\r\n      }\r\n      // self.pools[cpr.epochId].uints.quorum ++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return strategy for user\r\n   * @param strategyManager: StrategyManager contract address\r\n   * @param user : Caller\r\n   */\r\n  function _getStrategy(\r\n    address strategyManager, \r\n    address user\r\n  ) \r\n    internal \r\n    view\r\n    returns(address _strategy) \r\n  {\r\n    _strategy = IStrategyManager(strategyManager).getStrategy(user);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks, validate and return strategy for the target address.\r\n   * @param user : Address for whom to get strategy.\r\n   * @param strategyManager : StrategyManager contract address.\r\n   */\r\n  function _fetchAndValidateStrategy(\r\n    address user,\r\n    address strategyManager\r\n  ) \r\n    private \r\n    returns(address strategy) \r\n  {\r\n    strategy = _getStrategy(strategyManager, user);\r\n    if(strategy == address(0)) {\r\n      strategy = IStrategyManager(strategyManager).createStrategy(user);\r\n    }\r\n    assert(strategy != address(0));\r\n  }\r\n\r\n    /**\r\n   * @dev Add new member to the pool\r\n   * Note: `target` is expected to be an instance of the `SmartStrategy`\r\n   * @param self: Storage pointer\r\n   * @param epochId: Pool index\r\n   * @param isAdmin: Whether strategy is an admin or not.\r\n   * @param isMember: Strategy strategy is a member or not.\r\n   */\r\n  function _addNewContributor(\r\n    Data storage self, \r\n    uint epochId, \r\n    address contributor,\r\n    bool isAdmin,\r\n    bool isMember                                                                                                                                                                                     \r\n  ) \r\n    private \r\n    returns(\r\n      uint8 slot,\r\n      Common.Contributor memory cbData\r\n    )\r\n  {\r\n    slot = _generateSlot(self.contributors, epochId);\r\n    _setSlot(self.slots, contributor, slot, epochId);\r\n    self.ranks[epochId][contributor] = Common.Rank({admin: isAdmin, member: isMember});\r\n    cbData.id = contributor;\r\n    _addContributor(self.contributors, cbData, epochId);\r\n  }\r\n\r\n  /**@dev Push a new contributor to storage.\r\n    @param self : Storage of type mapping\r\n    @param cbData : Common.Contributor.\r\n    @param epochId : Pool id\r\n   */\r\n  function _addContributor(\r\n    mapping(uint => Common.Contributor[]) storage self, \r\n    Common.Contributor memory cbData, \r\n    uint epochId\r\n  ) \r\n    private \r\n  {\r\n    self[epochId].push(cbData);\r\n  }\r\n\r\n  /**@dev Update contributor's data\r\n    @param self : Storage of type mapping\r\n    @param cbData : Contributor struct containing updated data\r\n    @param epochId : Pool id\r\n    @param slot : Position of Contributor in the list\r\n   */\r\n  function _setContributorData(\r\n    mapping(uint => Common.Contributor[]) storage self, \r\n    Common.Contributor memory cbData, \r\n    uint epochId, \r\n    uint16 slot\r\n  )\r\n    private \r\n  {\r\n    self[epochId][slot] = cbData;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the length of epochs i.e total epoch to date\r\n   * @param self : Storage of type Data\r\n   */\r\n  function _getEpoches(Data storage self) internal view returns(uint epoches) {\r\n    epoches = self.poolArr.length;\r\n  } \r\n\r\n  /**\r\n   * @dev Generates Id for new epoch\r\n   * @param self: Storage of type Data\r\n   */\r\n  function _generateEpochId(\r\n    Data storage self\r\n  ) \r\n    internal \r\n    view\r\n    returns (uint _return) \r\n  {\r\n    _return = _getEpoches(self);\r\n  }\r\n\r\n  /**@dev Ruturn provider's info\r\n    @param self : Storage of type mapping\r\n    @param epochId : Epoch id\r\n    @param user : User \r\n   */\r\n  function _getProfile(\r\n    Data storage self, \r\n    uint epochId, \r\n    address user\r\n  ) \r\n    internal \r\n    view \r\n    returns(Common.ContributorData memory cbt) \r\n  {\r\n    uint8 slot = _getSlot(self.slots, user, epochId);\r\n    cbt = Common.ContributorData({\r\n      slot: slot,\r\n      cData: self.contributors[epochId][slot],\r\n      rank: _getRank(self.ranks, epochId, user)\r\n    });\r\n  }\r\n\r\n  /**@dev Get the slots of strategy on the list\r\n    @param self : Storage of type mapping\r\n    @param epochId : Pool Id\r\n    Note: To avoid irregularity in accessing Strategy array \r\n      `_generateSlot` must be invoked before adding a new data \r\n      to the contributors array.\r\n   */\r\n  function _generateSlot(\r\n    mapping(uint => Common.Contributor[]) storage self, \r\n    uint epochId\r\n  ) \r\n    internal \r\n    view \r\n    returns(uint8 _return) \r\n  {\r\n    _return = uint8(self[epochId].length);\r\n  }\r\n\r\n  /**@dev Creates a new permissionless community i.e public\r\n   * @param self: Storage of type `Data`\r\n   * @param cpp: This is a data struct. We use it to compress a few parameters\r\n   *              instead of overloading _createPool.\r\n   * @param _unlock: Function as parameter. It should unlock a function with related `Common.FuncTag'\r\n   *                 when invoked.\r\n   * Note: Only in private bands we mandated the selected contribution value does not exist.\r\n   *       This is to ensure orderliness in the system, timeliness, and efficiency.\r\n   */\r\n  function createPermissionlessPool( \r\n    Data storage self, \r\n    Common.CreatePoolParam memory cpp,\r\n    function (uint, Common.FuncTag) internal _unlock\r\n  )\r\n    internal\r\n    returns (Common.CreatePoolReturnValue memory cpr)\r\n  {\r\n    Def memory _d = _def();\r\n    uint epochId = _generateEpochId(self);\r\n    address admin = cpp.members[0];\r\n    address strategy = _fetchAndValidateStrategy(admin, self.pData.strategyManager);\r\n    self.amountExist[cpp.unitContribution].assertFalse(\"Amount exist\");\r\n    self.amountExist[cpp.unitContribution] = _d.t;\r\n    Common.Pool memory pool = _createPool(self, cpp, _unlock, strategy, admin, epochId);\r\n    (\r\n      uint16 slot,\r\n      Common.Contributor memory cbData\r\n    ) = _addNewContributor(self, cpr.epochId, admin, _d.t, _d.t);\r\n    cpr = Common.CreatePoolReturnValue(pool, cbData, epochId, slot);\r\n    // self.pools[epochId].uints.quorum ++;\r\n  }\r\n\r\n  /** \r\n   * @dev Add contributor to strategy. \r\n   * @param user : Contributor address\r\n   * @param strategy : Strategy for the epoch\r\n   * @param epochId : Epoch Id\r\n   */\r\n  function addContributorToStrategy(\r\n    address user,\r\n    address strategy,\r\n    uint epochId\r\n  ) \r\n    private \r\n  {\r\n    require(IStrategy(strategy).addUp(user, epochId), \"Adding User to strategy failed\");\r\n  }\r\n\r\n  /**\r\n   * @notice Validates epochId\r\n   */\r\n  function verifyEpochId(\r\n    Data storage self,\r\n    uint epochId\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    require(_getEpoches(self) > epochId, \"Epoch Id has not begin\");\r\n  }\r\n\r\n  /**@dev Add new contributor to a band.\r\n   * @param self: Storage ref of type Data.\r\n   * @param _ab: Parameters struct.\r\n   * @notice A contributor can occupy more than one spot.\r\n  */\r\n  function addToBand(\r\n    Data storage self,\r\n    Common.AddTobandParam memory _ab\r\n  )\r\n    internal\r\n    returns (\r\n      Common.CommonEventData memory ced\r\n    ) \r\n  {\r\n    Common.Pool memory pool = _fetchPoolData(self, _ab.epochId);\r\n    Def memory _d = _def();\r\n    if(_ab.isPermissioned) {\r\n      ced.cbData = _mustBeAMember(self, _ab.epochId, _msgSender());\r\n    } else {\r\n      Utils.assertTrue(_getCurrentProvidersSize(self.contributors, _ab.epochId) < pool.uints.quorum, \"Pub filled\");\r\n      ced.cbData = _mustNotBeAMember(self, _ab.epochId, _msgSender());\r\n      _addNewContributor(self, _ab.epochId, _msgSender(), _d.f, _d.t);\r\n    }\r\n    self.pools[_ab.epochId].uint256s.currentPool += pool.uint256s.unit;\r\n    Common.Pool memory newPoolData = _fetchPoolData(self, _ab.epochId);\r\n    if(_isPoolFilled(newPoolData)) {\r\n      _ab.lock(_ab.epochId, Common.FuncTag.JOIN);\r\n      _ab.unlock(_ab.epochId, Common.FuncTag.GET);\r\n      _setTurnTime(self, newPoolData.uints.selector, _ab.epochId);\r\n    }\r\n    _validateAllowance(_msgSender(), pool.addrs.asset, pool.uint256s.unit);\r\n    _withdrawAllowance(_msgSender(), pool.addrs.asset, pool.uint256s.unit, pool.addrs.strategy);\r\n    ced.pool = newPoolData;\r\n    ced.rank = _getRank(self.ranks, _ab.epochId, _msgSender());\r\n    ced.slot = uint8(_getSlot(self.slots, _msgSender(), _ab.epochId));\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n   * @dev Returns the Rank object of a user.\r\n   */\r\n  function _getRank(\r\n    mapping(uint => mapping (address => Common.Rank)) storage self, \r\n    uint epochId, \r\n    address user\r\n  ) \r\n    internal \r\n    view \r\n    returns(Common.Rank memory _rank) \r\n  {\r\n    _rank = self[epochId][user];\r\n  }\r\n\r\n  /**\r\n   * @dev A Check to know if _msgSender() is a member of the band at epochId.\r\n   * @param self: Storage {typeof => mapping}\r\n   * @param epochId: Pool index\r\n   * @param contributor: Contributor address\r\n  */\r\n  function _mustBeAMember(\r\n    Data storage self,\r\n    uint epochId,\r\n    address contributor\r\n  ) \r\n    internal \r\n    view \r\n    returns(Common.Contributor memory cbData) \r\n  {\r\n    cbData = self.contributors[epochId][_getSlot(self.slots, contributor, epochId)];\r\n    self.ranks[epochId][contributor].member.assertTrue(\"Not A Member\");\r\n  }\r\n\r\n  /**@dev Return number of members already in the pool\r\n   */\r\n  function _getCurrentProvidersSize(mapping(uint => Common.Contributor[]) storage self, uint epochId) internal view returns(uint _return) {\r\n    _return = self[epochId].length;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Msg.sender must not be a member of the band at epoch Id before now.\r\n   * @param self: Storage {typeof mapping}\r\n   * @param epochId: Pool index\r\n   * @param contributor : Contributor\r\n  */\r\n  function _mustNotBeAMember(\r\n    Data storage self,\r\n    uint epochId,\r\n    address contributor\r\n  ) \r\n    internal \r\n    view \r\n    returns(Common.Contributor memory cbData) \r\n  {\r\n    cbData = self.contributors[epochId][_getSlot(self.slots, contributor, epochId)];\r\n    self.ranks[epochId][contributor].member.assertFalse(\"Contributor is a member\");\r\n  }\r\n\r\n  /**@dev Check if pool is filled\r\n    * @dev Msg.sender must not be a member of the band at epoch Id before now.\r\n    * @param pool: Pool struct\r\n  */\r\n  function _isPoolFilled(Common.Pool memory pool) \r\n    internal \r\n    pure\r\n    returns(bool filled) \r\n  {\r\n    uint expectedLiq = pool.uint256s.unit * pool.uints.quorum;\r\n    filled = expectedLiq == pool.uint256s.currentPool;\r\n  }\r\n\r\n  /**@dev Update selector to who will get finance next\r\n    * @param self: Storage {typeof mapping}\r\n    * @param epochId: Pool index.\r\n    * @param selector : Spot selector.\r\n  */\r\n  function _setTurnTime(\r\n    Data storage self, \r\n    uint selector, \r\n    uint epochId\r\n  ) \r\n    private\r\n    // returns(address contributor)\r\n  {\r\n    self.contributors[epochId][selector].turnTime = _now();\r\n    // contributor = self.contributors[epochId][selector].id;\r\n  }\r\n\r\n  /**@dev Get the slots of contributor on the list\r\n    @param self : Storage of type mappping\r\n    @param contributor : Contributor address\r\n   */\r\n  function _getSlot(\r\n    mapping(address =>mapping(uint => uint)) storage self, \r\n    address contributor, \r\n    uint epochId\r\n  ) \r\n    internal \r\n    view \r\n    returns(uint8 _return) \r\n  {\r\n    _return = uint8(self[contributor][epochId]);\r\n  }\r\n\r\n  /**@dev Set the slot for contributor\r\n    @param self : Storage of type mapping\r\n    @param contributor : Contributor\r\n    @param slot : New index\r\n   */\r\n  function _setSlot(\r\n    mapping(address => mapping(uint => uint)) storage self, \r\n    address contributor, \r\n    uint8 slot, \r\n    uint epochId\r\n  ) \r\n    private \r\n  {\r\n    self[contributor][epochId] = slot;\r\n  }\r\n  \r\n  /**@dev Set amount withdrawable by provider in their respective strategy.\r\n   * @param contributor : Contributor.\r\n   * @param epochId: Pool index.\r\n   * @param amount: Amount to set as claim.\r\n   * @param fee: platform fee if any.\r\n   * @param debt Loan or debt if any.\r\n   * @param feeTo : If fee is greater than 0, feeTo (fee Recipient) must not be address(0).\r\n   * @param allHasGF : A booleab flag indicating if all providers has fulfilled their borrowings.\r\n   * @param strategy: Strategy for mentioned epoch.\r\n   * @param txType : The type of transaction to perform in the strategy contract. It can either \r\n   *                  be ERC20 or NATIVE.\r\n   */\r\n\r\n  function _setClaim(\r\n    uint amount,\r\n    uint epochId,\r\n    uint fee,\r\n    uint debt,\r\n    uint value,\r\n    address contributor,\r\n    address strategy,\r\n    address feeTo,\r\n    bool allHasGF,\r\n    Common.TransactionType txType\r\n  ) \r\n    private \r\n    returns(uint actualClaim)\r\n  {\r\n    actualClaim = \r\n      IStrategy(strategy).setClaim{value: value}(\r\n        amount,\r\n        fee,\r\n        debt,\r\n        epochId,\r\n        contributor,\r\n        feeTo,\r\n        allHasGF,\r\n        txType\r\n      );\r\n  }\r\n\r\n  /**@dev Get finance: Sends current total contribution to the \r\n   * expected account and update respective accounts.\r\n    @param self : Storage of type Data.\r\n    @param epochId : Pool Id.\r\n    @param msgValue : Value sent in call.\r\n    @param daysOfUseInHr : Number of days specified in hours after which \r\n                      the contributor shall return the borrowed fund.\r\n    @param _lock : Utility that lock a function when called.\r\n    @param _unlock : Utility that unlock a function when called.\r\n    @param getXFIPriceInUSD : A function that returns the current price of XFI.\r\n  */\r\n  function getFinance(\r\n    Data storage self,\r\n    uint epochId,\r\n    uint msgValue,\r\n    uint16 daysOfUseInHr,\r\n    function (uint, Common.FuncTag) internal _lock,\r\n    function (uint, Common.FuncTag) internal _unlock,\r\n    function () internal returns(uint) getXFIPriceInUSD\r\n  ) \r\n    internal\r\n    returns(Common.CommonEventData memory ced)\r\n  {\r\n    _lock(epochId, Common.FuncTag.GET);\r\n    _unlock(epochId, Common.FuncTag.PAYBACK);\r\n    Common.Pool memory pool = _fetchPoolData(self, epochId);\r\n    if(pool.allGh == pool.uints.quorum) revert IFactory.AllMemberIsPaid();\r\n    _increaseAllGh(self.pools, epochId);\r\n    bool(pool.uint256s.currentPool >= (pool.uint256s.unit.mul(pool.uints.quorum))).assertTrue(\"Pool not complete\");\r\n    ced = _updateStorageAndCall(\r\n      self,\r\n      Common.UpdateMemberDataParam(\r\n        _convertDurToSec(daysOfUseInHr), \r\n        self.contributors[epochId][pool.uints.selector].id,\r\n        epochId,\r\n        pool.uint256s.currentPool.computeFee(self.pData.makerRate),\r\n        msgValue,\r\n        getXFIPriceInUSD(),\r\n        pool\r\n      )\r\n    );\r\n  }\r\n\r\n  /**@dev Increase slot selector\r\n   *  This is a flag we use in selecting the next borrower.\r\n  */\r\n  function _moveSelectorToTheNext(\r\n    mapping(uint => Common.Pool) storage self, \r\n    uint epochId\r\n  ) \r\n    private \r\n  {\r\n    self[epochId].uints.selector ++;\r\n  }\r\n\r\n  /**@dev Increment allGh when one member get finance\r\n  */\r\n  function _increaseAllGh(\r\n    mapping(uint => Common.Pool) storage self, \r\n    uint epochId\r\n  )  \r\n    private \r\n  {\r\n    self[epochId].allGh ++;\r\n  }\r\n\r\n  /**\r\n   * @dev Validates duration selected by this contributor must not exceed the set duration.\r\n   * @param durInHrs : Duration set in hours.\r\n   */\r\n  function _convertDurToSec(\r\n    uint16 durInHrs\r\n  ) \r\n    internal \r\n    pure\r\n    returns(uint24 durOfChoiceInSec) \r\n  {\r\n    durOfChoiceInSec = uint24(uint(durInHrs).mul(1 hours));\r\n  }\r\n\r\n  function _computeCollateral(\r\n    uint loanAmount,\r\n    uint amountOfXFISent,\r\n    uint24 ccr,\r\n    uint xfiPriceInUSD\r\n  )\r\n    internal\r\n    pure\r\n    returns(uint collateral)\r\n  { \r\n    collateral = amountOfXFISent.computeCollateral(\r\n      18,\r\n      ccr,\r\n      xfiPriceInUSD,\r\n      loanAmount,\r\n      amountOfXFISent > 0\r\n    );\r\n  }\r\n\r\n\r\n  /** \r\n    * @dev Update storage.\r\n    * Note: Priority is given to expected contributor. i.e the first to get finance.\r\n    * Irrespective of who _msgSender() is, consideration is given to\r\n    * expected user provided their time to get finance has not pass.\r\n    * If _msgSender() is not the contributor we're expecting and the time\r\n    * to get finance for the contributor has passed, we swap the whole\r\n    * process in favor of the actual caller provided the conditions are met.\r\n    * @param self: Storage.\r\n    * @param arg : Parameter of type Common.UpdateMemberDataParam\r\n    * Note: \r\n    *   slot = exp.slot;\r\n        If the caller is not the next on the queue to getfinance\r\n        and the time to get finance for the expected account has passed.\r\n      @notice Debt is not determined ahead. We do that at the point of paying back\r\n              since borrrowers decide when to return the borrowed fund so long it is not\r\n              greater than the duration set by the admin.\r\n      We will also not include the debt for the 'credit' parameter as stated in Strategy.setClaim\r\n      unless borrowers are returning the loan.\r\n\r\n      ASSUMPTION 1\r\n      ------------\r\n      Assuming 2 providers in a pool, if the first on the list with slot '0' failed to GF within the grace\r\n      period, the next provider can take over. When this happens, the slots and profile are swapped to \r\n      alow the serious one proceed to borrow. Slot 0 becomes 1 vice versa. This allows the defaulted \r\n      party another chance to GF since the ticker i.e 'pool.uints.selector' waits for no one. It is always\r\n      incremented as long at the epoch is active. If the second slot also default, the any party in the pool\r\n      i.e Provider 1 can step in to GF. \r\n\r\n      ASSUMPTION 2\r\n      ------------\r\n      The case above is different where the number of providers exceeds 2. Since the selector goes forward, the \r\n      first one the list i.e admin is given priority to proceed to GF even after they defaulted. Since the admin\r\n      is 0, if they defaulted, slots greater than 0 can step in i.e from 1, 2, to 'n'. Admin slot is swapped for\r\n      higher slot.\r\n      If a defaulted slot is swapped for higher one, they have another chance to GF. But if a defaulted slot is \r\n      is swapped for the lower one, the only chance available to them is for the next GF to default so they can \r\n      hop in. \r\n      Irrespective of who defaults, the orderliness is preserved, And the defaulted must wait for the turn of the \r\n      new slot assigned to them. \r\n  */  \r\n  function _updateStorageAndCall(\r\n    Data storage self,\r\n    Common.UpdateMemberDataParam memory arg\r\n  ) \r\n    private\r\n    returns (Common.CommonEventData memory ced) \r\n  {\r\n    Def memory _d = _def();\r\n    _resetPoolBalance(self.pools, arg.epochId);\r\n    address sender = arg.expected;\r\n    Common.ContributorData memory cbt = _getProfile(self, arg.epochId, arg.expected); // Expected contributor\r\n    ced.slot = cbt.slot;\r\n    ced.cbData = cbt.cData;\r\n    if(_now() > cbt.cData.turnTime + 1 hours){\r\n      if(_msgSender() != arg.expected) {\r\n        sender = _msgSender();\r\n        _mustBeAMember(self, arg.epochId, sender);\r\n        ced.slot = _swapSlots(self, cbt.slot, arg.expected, sender, arg.epochId);\r\n      }\r\n    } else {\r\n      require(_msgSender() == cbt.cData.id, \"Not the expected\");\r\n    }\r\n    _computeCollateral(\r\n      arg.pool.uint256s.currentPool,\r\n      arg.msgValue,\r\n      uint24(arg.pool.uints.colCoverage),\r\n      arg.xfiUSDPriceInDecimals\r\n    );\r\n    self.pools[arg.epochId].addrs.lastPaid = sender;\r\n    _moveSelectorToTheNext(self.pools, arg.epochId);\r\n    ced.cbData = Common.Contributor({\r\n      durOfChoice: arg.durOfChoice,\r\n      expInterest: arg.pool.uint256s.currentPool.computeInterestsBasedOnDuration(uint16(arg.pool.uints.intRate), uint24(arg.pool.uints.duration) ,arg.durOfChoice).intPerChoiceOfDur,\r\n      payDate: _now().add(arg.durOfChoice),\r\n      turnTime: cbt.cData.turnTime + 1 hours,\r\n      loan: _setClaim(arg.pool.uint256s.currentPool, arg.epochId, arg.fee, 0, arg.msgValue ,sender, arg.pool.addrs.strategy, self.pData.feeTo, _d.f,Common.TransactionType.ERC20),\r\n      colBals: arg.msgValue,\r\n      // hasGH: _d.t,\r\n      id: sender\r\n    });\r\n    _setContributorData(self.contributors, ced.cbData, arg.epochId, ced.slot);\r\n    ced.pool = _fetchPoolData(self, arg.epochId);\r\n    // (bool sent,) = arg.pool.addrs.strategy.call{value:arg.msgValue}(\"\");\r\n    // sent.assertTrue(\"XFI sent to strategy failed\");\r\n  }\r\n\r\n  /**@dev Reset pool balances\r\n    @param self: Storage of type mapping\r\n    @param epochId : Pool index\r\n   */\r\n  function _resetPoolBalance(mapping(uint => Common.Pool) storage self, uint epochId) private {\r\n    self[epochId].uint256s.currentPool = _def().zero;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the caller identifier from the msg object \r\n   * Gas-saving\r\n   */\r\n  function _msgSender() internal view returns(address _sender) {\r\n    _sender = msg.sender;\r\n  }\r\n\r\n  \r\n  /**\r\n   * @dev Swaps slot if the calling address is different from the expected contributor.\r\n   * The assumption is that profile data of contributors who are yet to get finance\r\n   * are identical except if the expected address is an admin which makes it easier for us to swap profile data.\r\n   * @param self: Storage ref of type `Data`.\r\n   * @param _expSlot: Slot of the expected address.\r\n   * @param _expContributor : The address that should get finance if nothing change.\r\n   * @param _actContributor: Actual calling address.\r\n   * @param epochId: Pool Id.\r\n   * @notice Defaulted address will not be taken out of the band. In this case, we move them backward. \r\n   *          The worse that could happen to them is to them is for someone else to occupy their slot. \r\n   */\r\n  function _swapSlots(\r\n    Data storage self,\r\n    uint8 _expSlot,\r\n    address _expContributor,\r\n    address _actContributor,\r\n    uint epochId\r\n  )\r\n    private \r\n    returns(\r\n      // Common.Contributor memory _actInfo, \r\n      uint8 _actSlot\r\n    ) \r\n  {\r\n    Common.ContributorData memory cbt = _getProfile(self, epochId, _actContributor);\r\n    _actSlot = _expSlot;\r\n    self.slots[_expContributor][epochId] = cbt.slot;\r\n    self.slots[_actContributor][epochId] = _expSlot;\r\n  }\r\n\r\n  /**@dev Payback borrowed fund.\r\n   * @param self : Storage\r\n   * @param pb : Payback Parameters struct.\r\n  */\r\n  function payback(\r\n    Data storage self,\r\n    Common.PaybackParam memory pb,\r\n    function(address, uint, bool) internal setPermit \r\n  )\r\n    internal\r\n    returns(Common.CommonEventData memory ced)\r\n  {\r\n    Common.Pool memory _p = _fetchPoolData(self, pb.epochId);\r\n    uint debt = _getCurrentDebt(self, pb.epochId, pb.user);\r\n    bool(debt > 0).assertTrue(\"No debt\");\r\n    bool allGF = _allHasGF(self.pools, pb.epochId);\r\n    pb.lock(pb.epochId, Common.FuncTag.PAYBACK);\r\n    if(!allGF){\r\n      _replenishPoolBalance(self.pools, pb.epochId);\r\n      pb.unlock(pb.epochId, Common.FuncTag.GET);\r\n      _setTurnTime(self, _p.uints.selector, pb.epochId);\r\n    }\r\n    // pb.unlock(pb.epochId, Common.FuncTag.WITHDRAW);\r\n    setPermit(pb.user, pb.epochId, _def().t);\r\n    _validateAllowance(pb.user, _p.addrs.asset, debt);\r\n    _withdrawAllowance(pb.user, _p.addrs.asset, debt, _p.addrs.strategy);\r\n    ced = Common.CommonEventData(\r\n      _getSlot(self.slots, pb.user, pb.epochId),\r\n      _getRank(self.ranks, pb.epochId, pb.user),\r\n      _getProfile(self, pb.epochId, pb.user).cData,\r\n      _fetchPoolData(self, pb.epochId)\r\n    );\r\n    \r\n    _setClaim(\r\n      ced.cbData.colBals,\r\n      pb.epochId,\r\n      0,\r\n      debt,\r\n      0,\r\n      pb.user,\r\n      _p.addrs.strategy,\r\n      address(0),\r\n      allGF,\r\n      Common.TransactionType.NATIVE\r\n    );\r\n  }\r\n\r\n  /**@dev Return accrued debt for user up to this moment.\r\n   * @param self : Storage\r\n   * @param epochId : EpochId.\r\n   * @param user : Contributor.\r\n   * @notice This is the total accrued debt between the date user was paid and now.\r\n  */\r\n  function _getCurrentDebt(\r\n    Data storage self, \r\n    uint epochId, \r\n    address user\r\n  ) \r\n    internal \r\n    view returns(uint debt) \r\n  {\r\n    Common.Pool memory _p = _fetchPoolData(self, epochId);\r\n    Common.Contributor memory _cb = _getProfile(self, epochId, user).cData;\r\n    debt = _cb.loan.add(_p.uint256s.intPerSec.mul(_now().sub(_cb.turnTime)));\r\n  }\r\n\r\n  /**@dev Reset pool balances\r\n    @param self: Storage of type mapping\r\n    @param epochId : Pool index\r\n   */\r\n  function _replenishPoolBalance(mapping(uint => Common.Pool) storage self, uint epochId) private {\r\n    Common.Pool memory pool = self[epochId];\r\n    self[epochId].uint256s.currentPool = pool.uint256s.unit.mul(pool.uints.quorum);\r\n  }\r\n\r\n  \r\n  /**@dev Check if round is completed i.e all contributors have received finance\r\n  */\r\n  function _allHasGF(mapping(uint => Common.Pool) storage self, uint epochId) internal view returns(bool) {\r\n    Common.Pool memory pool = self[epochId];\r\n    return pool.allGh == pool.uints.quorum;\r\n  }\r\n\r\n  /**\r\n   * @dev Return struct object with data if current beneficiary has defaulted otherwise an empty struct is returned.\r\n   * @param self : Storage\r\n   * @param epochId: Pool id\r\n   */\r\n  function _enquireLiquidation(\r\n    Data storage self, \r\n    uint epochId\r\n  ) \r\n    internal \r\n    view \r\n    returns (Common.Contributor memory _liq, bool defaulted, uint currentDebt) \r\n  {\r\n    Common.Pool memory _p = _fetchPoolData(self, epochId);\r\n    // uint16 slot = _getSlot(self.slots, _p.addrs.lastPaid, epochId);\r\n    Common.Contributor memory prof = _getProfile(self, epochId, _p.addrs.lastPaid).cData;\r\n    (_liq, defaulted, currentDebt) \r\n      = \r\n        _now() <= prof.payDate? \r\n          (_liq, _def().f, 0) \r\n            : \r\n              (prof, _def().t, _getCurrentDebt(\r\n                self,\r\n                epochId,\r\n                prof.id\r\n              ));\r\n  }\r\n\r\n  /**\r\n    @dev Liquidates a borrower if they have defaulted in repaying their loan.\r\n      - If the current beneficiary defaults, they're liquidated.\r\n      - Their collateral balances is forwarded to the liquidator.\r\n      - Liquidator must not be a participant in pool at `epochId. We use this \r\n        to avoid fatal error in storage.\r\n    @param self : Storage ref.\r\n    @param lp : Parameters.\r\n  */\r\n  function liquidate(\r\n    Data storage self,\r\n    Common.LiquidateParam memory lp,\r\n    function(address, uint, bool) internal setPermit\r\n  ) \r\n    internal\r\n    returns (Common.CommonEventData memory ced)\r\n  {\r\n    (Common.Contributor memory prof, bool defaulted,) = _enquireLiquidation(self, lp.epochId);\r\n    defaulted.assertTrue(\"Not defaulter\");\r\n    address liquidator = _msgSender();\r\n    _mustNotBeAMember(self, lp.epochId, liquidator);\r\n    self.pools[lp.epochId].addrs.lastPaid = liquidator;\r\n    _swapProfile(self, lp.epochId, _getSlot(self.slots, prof.id, lp.epochId), liquidator, prof, self.ranks[lp.epochId][prof.id]);\r\n    ced = payback(\r\n      self, \r\n      Common.PaybackParam(\r\n        lp.epochId, \r\n        liquidator,\r\n        lp.lock, \r\n        lp.unlock\r\n      ),\r\n      setPermit\r\n    ); \r\n  }\r\n\r\n  /**\r\n   * @dev Swaps profiles of two contributors\r\n   * This is useful during liquidation where we swap the defaulted borrower's\r\n   * profile to the liquidator. One thing to note is that when liquidation takes\r\n   * place, the new contributor will have their collateral balances and debts set\r\n   * to zero while this is not the case otherwise.\r\n   */\r\n  function _swapProfile(\r\n    Data storage self,\r\n    uint epochId,\r\n    uint8 oldProvSlot,\r\n    address newProv,\r\n    Common.Contributor memory oldProvData,\r\n    Common.Rank memory oldProvRank\r\n  ) \r\n    private \r\n  {\r\n    Common.Contributor memory newProvData = oldProvData;\r\n    newProvData.id = newProv;\r\n    // newProvData.loan = 0;\r\n    // newProvData.colBals = 0;\r\n    _setContributorData(self.contributors, newProvData, epochId, oldProvSlot);\r\n    _setSlot(self.slots, newProv, oldProvSlot, epochId);\r\n    self.ranks[epochId][newProv] = oldProvRank;\r\n    delete self.ranks[epochId][oldProvData.id];\r\n    IStrategy(_fetchPoolData(self, epochId).addrs.strategy).swapProvider(epochId, newProv, oldProvData.id);\r\n  }\r\n\r\n  /**\r\n    @dev Cancels virgin band i.e Newly created band with only one contributor.\r\n      Only admin of a band can cancel only if no one has join the band.\r\n    @param self : Storage\r\n    @param epochId : Pool Id.\r\n    @param isPermissionLess : Whether band is public or not.\r\n\r\n    @notice : Setting the quorum to 0 is an indication that a pool was removed.\r\n  */\r\n  function cancelBand(\r\n    Data storage self,\r\n    uint epochId,\r\n    bool isPermissionLess,\r\n    function(address, uint, bool) internal setPermit,\r\n    function (uint, Common.FuncTag) internal _lock\r\n  ) \r\n    internal\r\n    returns (uint success)\r\n  {\r\n    require(epochId < self.poolArr.length, \"Invalid epoch lId\");\r\n    Common.Pool memory _p = _fetchPoolData(self, epochId);\r\n    address creator = _msgSender();\r\n    _isAdmin(self.ranks, epochId, creator);\r\n    Def memory _d = _def();\r\n    if(isPermissionLess) {\r\n      bool(self.contributors[epochId].length == 1).assertTrue(\"FactoryLib - Pub: Cannot cancel\");\r\n      delete self.amountExist[_p.uint256s.unit];\r\n    } else {\r\n      bool(_p.uint256s.currentPool <= _p.uint256s.unit).assertTrue(\"FactoryLib - Priv: Cannot cancel\");\r\n    }\r\n    delete self.poolArr[epochId];\r\n    Common.Contributor memory newC;\r\n    self.pools[epochId].uints.quorum = 0;\r\n    _setContributorData(self.contributors, newC, epochId, _getSlot(self.slots, creator, epochId));\r\n    _lock(epochId, Common.FuncTag.JOIN);\r\n    setPermit(creator, epochId, true);\r\n    _setClaim(_p.uint256s.unit, epochId, 0, 0, 0, creator, _p.addrs.strategy, address(0), _d.f, Common.TransactionType.ERC20);\r\n    success = epochId;\r\n  }\r\n\r\n  function _isAdmin(\r\n    mapping(uint => mapping (address => Common.Rank)) storage self,\r\n    uint epochId,\r\n    address user\r\n  ) \r\n    internal\r\n    view\r\n  {\r\n    require(self[epochId][user].admin, \"FactoryLib: Only admin\");\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Withdraws collateral\r\n   * @param self: storage ref.\r\n   * @param epochId: Epoch Id.\r\n   */\r\n  function _withdrawCollateral(\r\n    Data storage self,\r\n    uint epochId\r\n  ) \r\n    internal\r\n  {\r\n    address user = _msgSender();\r\n    self.contributors[epochId][_getSlot(self.slots, user, epochId)].colBals = 0;\r\n    require(IStrategy(_fetchPoolData(self, epochId).addrs.strategy).withdraw(epochId, user), \"Withdrawal failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Return the different balances locked in an epoch\r\n   * @param self : Data ref\r\n   * @param epochId : Epoch Id\r\n   */\r\n  function _getBalancesOfStrategy(\r\n    Data storage self,\r\n    uint epochId\r\n  )\r\n    internal\r\n    view\r\n    returns(Common.Balances memory balances) \r\n  {\r\n    Common.Pool memory pool = _fetchPoolData(self, epochId);\r\n    balances = Common.Balances({\r\n      xfi: pool.addrs.strategy.balance,\r\n      erc20: IERC20(pool.addrs.asset).balanceOf(pool.addrs.strategy)\r\n    });\r\n  }\r\n  /** @dev Update Contract variables\r\n    * @param self : Storage. \r\n    * @param assetAdmin : Asset manager contract.\r\n    * @param feeTo : Fee receiver.\r\n    * @param makerRate : Service fee.\r\n   */\r\n  function setContractData(\r\n    Data storage self,\r\n    address assetAdmin,\r\n    address feeTo,\r\n    uint16 makerRate\r\n  ) \r\n    internal \r\n    returns(bool)\r\n  {\r\n    if(assetAdmin != address(0)) self.pData.assetAdmin = assetAdmin;\r\n    if(feeTo != address(0)) self.pData.feeTo = feeTo;\r\n    if(makerRate < type(uint16).max) self.pData.makerRate = makerRate;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set pool to storage array. \r\n   * We use it for read purpose.\r\n   */\r\n  function _pushToStorage(\r\n    Common.Pool[] storage self, \r\n    Common.Pool memory pool\r\n  ) \r\n    private\r\n  {\r\n    self.push(pool);\r\n  } \r\n\r\n  function fetchPools(\r\n    Data storage self\r\n  )\r\n    internal\r\n    view\r\n    returns(Common.Pool[] memory pools) \r\n  {\r\n    pools = self.poolArr;\r\n  } \r\n}\r\n\r\n"
    },
    "contracts/libraries/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @title Lib : Non-deployable contract\r\n * @author Simplifi\r\n */\r\n\r\nlibrary Lib {\r\n  error AddressIsZero();\r\n  error InsufficientBalance(uint256, uint256);\r\n\r\n  /**\r\n   * @dev Ensures that parameter parsed cannot be empty\r\n   * @param _a : Parameter of type address\r\n   */\r\n  function cannotBeEmptyAddress(address _a) internal pure {\r\n    if(_a == address(0)) {\r\n      revert AddressIsZero();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Invoking this function ensures parameter 'a' is greater than 'b'\r\n   * @param _a : Parameter of type uint256\r\n   * @param _b : Parameter of type uint256\r\n   */\r\n  function mustBeAbove(uint256 _a, uint256 _b) internal pure {\r\n    if(_a < _b) revert InsufficientBalance(_a, _b);\r\n  }\r\n\r\n  /**\r\n   * @dev Condition parsed to this function must be true\r\n   * @param condition : Expected condition\r\n   * @param errorMessage : Error message to return when assertion failed\r\n   */\r\n  function yes(bool condition, string memory errorMessage) internal pure {\r\n    require(condition, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Condition parsed to this function must evaluate to false\r\n   * @param condition : Expected condition\r\n   * @param errorMessage : Error errorMto return when assertion failed\r\n   */\r\n  function no(bool condition, string memory errorMessage) internal pure {\r\n    require(!condition, errorMessage);\r\n  }\r\n}"
    },
    "contracts/libraries/SafeCallERC20.sol": {
      "content": "  // SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nlibrary SafeCallERC20 {\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    unchecked {\r\n      uint256 oldAllowance = token.allowance(address(this), spender);\r\n      require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n      uint256 newAllowance = oldAllowance - value;\r\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n  }\r\n\r\n  /** Imported from Openzeppelin\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data);\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation failed\");\r\n    }\r\n  }\r\n}"
    },
    "contracts/libraries/Utils.sol": {
      "content": "  // SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { SafeMath } from \"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\";\r\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport { Common } from \"../apis/Common.sol\";\r\n\r\nlibrary Utils {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    error InsufficientCollateral(uint256 actual, uint256 expected);\r\n\r\n    error InvalidDenominator(string message);\r\n\r\n    ///@dev Requires all conditions to be true \r\n    function assertTrue_2(bool a, bool b, string memory errorMessage) internal pure {\r\n        require(a && b, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires single condition to be true \r\n    function assertTrue(bool condition, string memory errorMessage) internal pure {\r\n        require(condition, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires conditions to be true \r\n    function assertFalse(bool condition, string memory errorMessage) internal pure {\r\n        require(!condition, errorMessage);\r\n    }\r\n\r\n    /**     @dev Calculation of percentage.\r\n        *   This is how we calculate percentage to arrive at expected value with \r\n        *   100% precision.\r\n        *   We choose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set \r\n        *   her interest rate to 0.05%, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \r\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \r\n        *   zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\r\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\r\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \r\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\r\n        *   @param interest : Interest rate. \r\n        *   \r\n        *   Rules\r\n        *   -----\r\n        *   - Principal cannot be less than base.\r\n        *   - Interest cannot be greater than (2 ^ 16) - 1\r\n    */\r\n    function _getPercentage(\r\n        uint principal, \r\n        uint16 interest\r\n    )\r\n        internal \r\n        pure \r\n        returns (uint _return) \r\n    {\r\n        uint16 base = _getBase(); \r\n        if(interest == 0 || principal == 0) return 0;\r\n        assertTrue(interest < type(uint16).max, \"Interest overflow\");\r\n        assertTrue(principal > base, \"Principal should be greater than 10000\");\r\n        _return = principal.mul(interest).div(base);\r\n    }\r\n\r\n    /**\r\n     * Percentage base\r\n     */\r\n    function _getBase() internal pure returns(uint16 base) {\r\n        base = 10000;\r\n    }\r\n    \r\n    function _decimals(address asset) internal view returns(uint8 decimals) {\r\n        decimals = IERC20Metadata(asset).decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Computes collateral on the requested loan amount\r\n     * @param xfiBaseDecimals : Decimals on which XFI is based e.g 18. USDT for instance is 18.\r\n     * @param ccr : Collateral ratio. Must be multiply by 100 before parsing as input i.e if raw ccr\r\n     *              is 1.2, it should be rendered as 1.2 * 100 = 120.\r\n     * @param xfiUSDPriceInDecimals : Price of XFI in the right decimal.\r\n     * @param loanReqInDecimals : Total requested contribution in USD\r\n     * @param amountOfXFISent : Amount sent in XFI as collateral.\r\n     * @notice Based on Simplifi mvp, loans are collaterized in XFI until we add more pairs\r\n     *         in the future.\r\n     * Example: Alice, Bob and Joe formed a band to contribute $100 each where duration is for \r\n     * 10 days each. Alice being the admin set ccr to 1.5 equivalent to 150% of the total sum \r\n     * contribution of $300. If the price of XFI as at the time of GF is $0.5/XFI, where XFI decimals\r\n     * is in 18, we calculate the required XFI to stake as follows:   \r\n     *  \r\n     *                    totalContribution *  (10** XFIdecimals)   |                 raw ccr\r\n     *   totalLoanInXFI = --------------------------------------    |    actualCCR = (1.5 * 100) * 100 = 1500\r\n     *                        (xfiPriceIndecimals)                  |\r\n     * \r\n     *                     totalLoanInXFI * actualCCR\r\n     *        XFINeeded = ----------------------------\r\n     *                             _getBase()\r\n     * \r\n     *  Therefore, Alice is required to stake 900XFI to GF $300 for 10 days.\r\n     *   \r\n     */\r\n    function computeCollateral(\r\n        uint amountOfXFISent,\r\n        uint8 xfiBaseDecimals,\r\n        uint24 ccr,\r\n        uint xfiUSDPriceInDecimals,\r\n        uint loanReqInDecimals,\r\n        bool performCheck\r\n    ) \r\n        internal\r\n        pure \r\n        returns(uint256 expColInXFI) \r\n    {\r\n        uint8 mantissa = 100;\r\n        if(ccr < mantissa) revert Common.CollateralCoverageCannotGoBelow_100(ccr);\r\n        uint48 _ccr = uint48(uint(ccr).mul(100));\r\n        uint totalLoanInXFI = loanReqInDecimals.mul(10**xfiBaseDecimals).div(xfiUSDPriceInDecimals);\r\n        expColInXFI = totalLoanInXFI.mul(_ccr).div(_getBase());\r\n        if(performCheck) {\r\n            assertTrue(amountOfXFISent >= expColInXFI, \"Insufficient XFI\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Computes maker fee.\r\n        @param makerRate : The amount of fee (in %) charged by the platform\r\n            Note : Raw rate must multiply by 100 to get the expected value i.e\r\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\r\n            See `_getPercentage()`.\r\n        @param amount should be in decimals.\r\n    */\r\n    function computeFee(\r\n        uint amount, \r\n        uint16 makerRate\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint mFee) \r\n    {\r\n        mFee = _getPercentage(amount, makerRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Compute interest based on specified rate.\r\n     * @param rate : Interest rate.\r\n     * @param principal : Total expected contribution.\r\n     * @param durOfChoiceInSec : Duration of loan. To be specified in hours.\r\n     * \r\n     * Rules\r\n     * -----\r\n     * - Duration cannot exceed 30days i.e 2592000 seconds uint24 seconds\r\n     */\r\n    function computeInterestsBasedOnDuration(\r\n        uint principal,\r\n        uint16 rate,\r\n        uint24 fullDurationInSec,\r\n        uint24 durOfChoiceInSec\r\n    )\r\n        internal \r\n        pure \r\n        returns(Common.InterestReturn memory _itr) \r\n    {\r\n        Common.InterestReturn memory it;\r\n        assertTrue_2(fullDurationInSec <= _maxDurationInSec(), durOfChoiceInSec <= fullDurationInSec, \"Utils: FullDur or DurOfChoice oerflow\");\r\n        it.fullInterest = _getPercentage(principal, rate); // Full interest for fullDurationInSec\r\n        if(it.fullInterest > 0) {\r\n            it.intPerSec = it.fullInterest.mul(1).div(fullDurationInSec);\r\n            it.intPerChoiceOfDur = fullDurationInSec > durOfChoiceInSec? it.fullInterest.mul(durOfChoiceInSec).div(fullDurationInSec) : it.fullInterest;\r\n        }\r\n        _itr = it; \r\n    }\r\n\r\n    /**\r\n     * @dev Max duration : 30Days, presented in seconds\r\n     */\r\n    function _maxDurationInSec() internal pure returns(uint24 max) {\r\n        max = 2592000;\r\n    }\r\n\r\n    function notZeroAddress(address target) internal pure {\r\n        require(target != address(0), \"Zero address\");\r\n    }\r\n\r\n}"
    },
    "contracts/peripherals/FuncHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport { Common } from \"../apis/Common.sol\";\r\nimport { Pausable } from \"../abstracts/Pausable.sol\";\r\n\r\ncontract FuncHandler is Common, Pausable {\r\n  error FunctionNotCallable(uint8);\r\n  error IndexOutOfBound(uint);\r\n  error FunctionAlreadyUnlocked(FuncTag);\r\n  error FunctionAlreadyLocked(FuncTag);\r\n\r\n  /**\r\n   * @notice Mapping of epochId to permit\r\n   * Permit is used to give instructions to the child contract who can\r\n   * withdraw from an epoch.\r\n   * Only one provider can withdraw at a time in an apoch.\r\n   */\r\n  mapping (uint => mapping (address => bool)) public permits;\r\n  \r\n  /**\r\n    @dev Mapping of `epochId` to `functions tags` to bool.\r\n      Note: Functions can either be locked or opened.\r\n      Ex.\r\n      if locker[0][FuncTag.ADD] == false, execution will fail. \r\n  */\r\n  mapping(uint => mapping(FuncTag => bool)) private locker;\r\n  \r\n  /**\r\n    @dev Determines if function should be called for a specific pool.\r\n      @param tag - Function handle.\r\n      @param epochId - Pool index.\r\n   */\r\n  modifier checkFunctionPass(uint epochId, FuncTag tag) {\r\n    address caller = _msgSender();\r\n    if(tag != FuncTag.WITHDRAW) {\r\n      if(!_getFunctionStatus(epochId, tag)) {\r\n        revert FunctionNotCallable(uint8(tag));\r\n      }\r\n    } else {\r\n      require(permits[epochId][caller], \"FuncHandler: Not Permitted\");\r\n    }\r\n    // if(tag == FuncTag.WITHDRAW) {\r\n    // }\r\n    _;\r\n    if(tag == FuncTag.WITHDRAW){\r\n      _setPermit(caller, epochId, false);\r\n      // _lockFunction(epochId, tag);\r\n    }\r\n  }\r\n\r\n  constructor(address _ownershipManager) Pausable(_ownershipManager) {}\r\n\r\n  function _setPermit(\r\n    address target, \r\n    uint epochId, \r\n    bool permit\r\n  ) \r\n    internal \r\n  {\r\n    permits[epochId][target] = permit;\r\n  }\r\n\r\n  /**\r\n   * @dev locks function\r\n   * @param epochId : Pool Id\r\n   * @param tag : Function tag\r\n   */\r\n  function _lockFunction(uint epochId, FuncTag tag) internal virtual {\r\n    if(locker[epochId][tag]) {\r\n      locker[epochId][tag] = false;\r\n    } else {\r\n      revert FunctionAlreadyLocked(tag);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev Unlocks function\r\n    * @param epochId : Pool Id\r\n    * @param tag : Function handle\r\n   */\r\n  function _unlockFunction(uint epochId, FuncTag tag) internal virtual{\r\n    if(!locker[epochId][tag]){\r\n      locker[epochId][tag] = true;\r\n    } else {\r\n      revert FunctionAlreadyUnlocked(tag);\r\n    }\r\n  }\r\n\r\n  /**@dev Return status of functions i.e Whether function is locked or not.\r\n   * @param epochId : pool Id\r\n   * @param tag : Function tag\r\n   */\r\n  function _getFunctionStatus(uint epochId, FuncTag tag) internal view returns(bool) {\r\n    return locker[epochId][tag];\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if function is invokable at this time\r\n   * @param functionSelector : Functions in the Router contracts are mapped to unsigned integer uint8\r\n   *                          i.e JoinBand -> 0 etc. Total callable functions are 4 in number which is why\r\n   *                          functionSelector can not exceed 4. \r\n   */\r\n  function isFunctionCallable(uint epochId, uint8 functionSelector) public view virtual returns(string memory _isCallable) {\r\n    if(functionSelector > 3) revert IndexOutOfBound(functionSelector);\r\n    return _getFunctionStatus(epochId, FuncTag(functionSelector))? \"UNLOCKED\" : \"LOCKED\";\r\n  }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "constantinople",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}